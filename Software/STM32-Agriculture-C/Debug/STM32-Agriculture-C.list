
STM32-Agriculture-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007094  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000450  080071a8  080071a8  000081a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075f8  080075f8  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080075f8  080075f8  000085f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007600  08007600  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007600  08007600  00008600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007604  08007604  00008604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007608  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001d4  080077dc  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  080077dc  0000941c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c4b9  00000000  00000000  000091fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002133  00000000  00000000  000156b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000177f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009e2  00000000  00000000  000184b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c11  00000000  00000000  00018e9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e941  00000000  00000000  00031aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bfc4  00000000  00000000  000403ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc3b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049a0  00000000  00000000  000cc3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000d0d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800718c 	.word	0x0800718c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800718c 	.word	0x0800718c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__aeabi_d2lz>:
 8001024:	b538      	push	{r3, r4, r5, lr}
 8001026:	2200      	movs	r2, #0
 8001028:	2300      	movs	r3, #0
 800102a:	4604      	mov	r4, r0
 800102c:	460d      	mov	r5, r1
 800102e:	f7ff fcc5 	bl	80009bc <__aeabi_dcmplt>
 8001032:	b928      	cbnz	r0, 8001040 <__aeabi_d2lz+0x1c>
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800103c:	f000 b80a 	b.w	8001054 <__aeabi_d2ulz>
 8001040:	4620      	mov	r0, r4
 8001042:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001046:	f000 f805 	bl	8001054 <__aeabi_d2ulz>
 800104a:	4240      	negs	r0, r0
 800104c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop

08001054 <__aeabi_d2ulz>:
 8001054:	b5d0      	push	{r4, r6, r7, lr}
 8001056:	2200      	movs	r2, #0
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <__aeabi_d2ulz+0x34>)
 800105a:	4606      	mov	r6, r0
 800105c:	460f      	mov	r7, r1
 800105e:	f7ff fa3b 	bl	80004d8 <__aeabi_dmul>
 8001062:	f7ff fd11 	bl	8000a88 <__aeabi_d2uiz>
 8001066:	4604      	mov	r4, r0
 8001068:	f7ff f9bc 	bl	80003e4 <__aeabi_ui2d>
 800106c:	2200      	movs	r2, #0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <__aeabi_d2ulz+0x38>)
 8001070:	f7ff fa32 	bl	80004d8 <__aeabi_dmul>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4630      	mov	r0, r6
 800107a:	4639      	mov	r1, r7
 800107c:	f7ff f874 	bl	8000168 <__aeabi_dsub>
 8001080:	f7ff fd02 	bl	8000a88 <__aeabi_d2uiz>
 8001084:	4621      	mov	r1, r4
 8001086:	bdd0      	pop	{r4, r6, r7, pc}
 8001088:	3df00000 	.word	0x3df00000
 800108c:	41f00000 	.word	0x41f00000

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010a4:	4b18      	ldr	r3, [pc, #96]	@ (8001108 <MX_GPIO_Init+0x78>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a17      	ldr	r2, [pc, #92]	@ (8001108 <MX_GPIO_Init+0x78>)
 80010aa:	f043 0320 	orr.w	r3, r3, #32
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b15      	ldr	r3, [pc, #84]	@ (8001108 <MX_GPIO_Init+0x78>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0320 	and.w	r3, r3, #32
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b12      	ldr	r3, [pc, #72]	@ (8001108 <MX_GPIO_Init+0x78>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a11      	ldr	r2, [pc, #68]	@ (8001108 <MX_GPIO_Init+0x78>)
 80010c2:	f043 0304 	orr.w	r3, r3, #4
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001108 <MX_GPIO_Init+0x78>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0304 	and.w	r3, r3, #4
 80010d0:	603b      	str	r3, [r7, #0]
 80010d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_DS18B20_GPIO_Port, SENSOR_DS18B20_Pin, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010da:	480c      	ldr	r0, [pc, #48]	@ (800110c <MX_GPIO_Init+0x7c>)
 80010dc:	f000 feab 	bl	8001e36 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENSOR_DS18B20_Pin;
 80010e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e6:	2301      	movs	r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ee:	2302      	movs	r3, #2
 80010f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SENSOR_DS18B20_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	4619      	mov	r1, r3
 80010f8:	4804      	ldr	r0, [pc, #16]	@ (800110c <MX_GPIO_Init+0x7c>)
 80010fa:	f000 fd01 	bl	8001b00 <HAL_GPIO_Init>

}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40021000 	.word	0x40021000
 800110c:	40010800 	.word	0x40010800

08001110 <main>:
uint8_t DS18B20_ReadByte(void);
void DS18B20_StartConversion(void);
float DS18B20_ReadTemperature(void);

int main(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08e      	sub	sp, #56	@ 0x38
 8001114:	af00      	add	r7, sp, #0
    // MCU Configuration
    HAL_Init();
 8001116:	f000 fbcf 	bl	80018b8 <HAL_Init>
    SystemClock_Config();
 800111a:	f000 f82d 	bl	8001178 <SystemClock_Config>
    MX_GPIO_Init();
 800111e:	f7ff ffb7 	bl	8001090 <MX_GPIO_Init>
    MX_TIM1_Init();
 8001122:	f000 fabf 	bl	80016a4 <MX_TIM1_Init>
    MX_USART1_UART_Init(); // Initialize USART1 for serial communication
 8001126:	f000 fb2b 	bl	8001780 <MX_USART1_UART_Init>

    // Initialize DS18B20 sensor
    DS18B20_Init();
 800112a:	f000 f82b 	bl	8001184 <DS18B20_Init>

    while (1)
    {
        // Start temperature conversion
        DS18B20_StartConversion();
 800112e:	f000 f8ce 	bl	80012ce <DS18B20_StartConversion>

        // Read temperature
        float temperature = DS18B20_ReadTemperature();
 8001132:	f000 f8d8 	bl	80012e6 <DS18B20_ReadTemperature>
 8001136:	6378      	str	r0, [r7, #52]	@ 0x34

        // Print temperature via USART1
        char buffer[50];
        sprintf(buffer, "Temperature: %.2f C\r\n", temperature);
 8001138:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800113a:	f7ff f975 	bl	8000428 <__aeabi_f2d>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4638      	mov	r0, r7
 8001144:	490a      	ldr	r1, [pc, #40]	@ (8001170 <main+0x60>)
 8001146:	f002 fbf5 	bl	8003934 <siprintf>
        HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 800114a:	463b      	mov	r3, r7
 800114c:	4618      	mov	r0, r3
 800114e:	f7fe ffff 	bl	8000150 <strlen>
 8001152:	4603      	mov	r3, r0
 8001154:	b29a      	uxth	r2, r3
 8001156:	4639      	mov	r1, r7
 8001158:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800115c:	4805      	ldr	r0, [pc, #20]	@ (8001174 <main+0x64>)
 800115e:	f001 fb3b 	bl	80027d8 <HAL_UART_Transmit>

        // Delay before next reading
        HAL_Delay(1000);
 8001162:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001166:	f000 fbc7 	bl	80018f8 <HAL_Delay>
    {
 800116a:	bf00      	nop
 800116c:	e7df      	b.n	800112e <main+0x1e>
 800116e:	bf00      	nop
 8001170:	080071a8 	.word	0x080071a8
 8001174:	20000284 	.word	0x20000284

08001178 <SystemClock_Config>:
    }
}

// System Clock Configuration (auto-generated by STM32CubeIDE)
void SystemClock_Config(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
    // Configure system clock...
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <DS18B20_Init>:

// Initialize GPIO pin for OneWire communication
void DS18B20_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118a:	463b      	mov	r3, r7
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]

    GPIO_InitStruct.Pin = GPIO_PIN_15; // PA15
 8001196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800119a:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800119c:	2311      	movs	r3, #17
 800119e:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2302      	movs	r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a4:	463b      	mov	r3, r7
 80011a6:	4619      	mov	r1, r3
 80011a8:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <DS18B20_Init+0x34>)
 80011aa:	f000 fca9 	bl	8001b00 <HAL_GPIO_Init>
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40010800 	.word	0x40010800

080011bc <DS18B20_WriteBit>:

// Write a single bit to the DS18B20 sensor
void DS18B20_WriteBit(uint8_t bit)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull the bus low
 80011c6:	2200      	movs	r2, #0
 80011c8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011cc:	480a      	ldr	r0, [pc, #40]	@ (80011f8 <DS18B20_WriteBit+0x3c>)
 80011ce:	f000 fe32 	bl	8001e36 <HAL_GPIO_WritePin>

    // Delay to meet the timing requirements of the OneWire protocol
    // You may need to adjust the delay based on your microcontroller clock frequency
    HAL_Delay(5);
 80011d2:	2005      	movs	r0, #5
 80011d4:	f000 fb90 	bl	80018f8 <HAL_Delay>

    if (bit)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d005      	beq.n	80011ea <DS18B20_WriteBit+0x2e>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Release the bus
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011e4:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <DS18B20_WriteBit+0x3c>)
 80011e6:	f000 fe26 	bl	8001e36 <HAL_GPIO_WritePin>
    }

    // Delay to meet the timing requirements of the OneWire protocol
    HAL_Delay(60);
 80011ea:	203c      	movs	r0, #60	@ 0x3c
 80011ec:	f000 fb84 	bl	80018f8 <HAL_Delay>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40010800 	.word	0x40010800

080011fc <DS18B20_ReadBit>:

// Read a single bit from the DS18B20 sensor
uint8_t DS18B20_ReadBit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
    uint8_t bit = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	71fb      	strb	r3, [r7, #7]

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET); // Pull the bus low
 8001206:	2200      	movs	r2, #0
 8001208:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800120c:	4810      	ldr	r0, [pc, #64]	@ (8001250 <DS18B20_ReadBit+0x54>)
 800120e:	f000 fe12 	bl	8001e36 <HAL_GPIO_WritePin>

    // Delay to meet the timing requirements of the OneWire protocol
    HAL_Delay(5);
 8001212:	2005      	movs	r0, #5
 8001214:	f000 fb70 	bl	80018f8 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET); // Release the bus
 8001218:	2201      	movs	r2, #1
 800121a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800121e:	480c      	ldr	r0, [pc, #48]	@ (8001250 <DS18B20_ReadBit+0x54>)
 8001220:	f000 fe09 	bl	8001e36 <HAL_GPIO_WritePin>

    // Delay to wait for the DS18B20 to respond
    HAL_Delay(10);
 8001224:	200a      	movs	r0, #10
 8001226:	f000 fb67 	bl	80018f8 <HAL_Delay>

    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET)
 800122a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800122e:	4808      	ldr	r0, [pc, #32]	@ (8001250 <DS18B20_ReadBit+0x54>)
 8001230:	f000 fdea 	bl	8001e08 <HAL_GPIO_ReadPin>
 8001234:	4603      	mov	r3, r0
 8001236:	2b01      	cmp	r3, #1
 8001238:	d101      	bne.n	800123e <DS18B20_ReadBit+0x42>
    {
        bit = 1; // Read logic high
 800123a:	2301      	movs	r3, #1
 800123c:	71fb      	strb	r3, [r7, #7]
    }

    // Delay to meet the timing requirements of the OneWire protocol
    HAL_Delay(45);
 800123e:	202d      	movs	r0, #45	@ 0x2d
 8001240:	f000 fb5a 	bl	80018f8 <HAL_Delay>

    return bit;
 8001244:	79fb      	ldrb	r3, [r7, #7]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40010800 	.word	0x40010800

08001254 <DS18B20_WriteByte>:

// Write a byte of data to the DS18B20 sensor
void DS18B20_WriteByte(uint8_t byte)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++)
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
 8001262:	e00c      	b.n	800127e <DS18B20_WriteByte+0x2a>
    {
        DS18B20_WriteBit(byte & 0x01); // Write LSB first
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ffa5 	bl	80011bc <DS18B20_WriteBit>
        byte >>= 1; // Shift byte right by 1 bit
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	085b      	lsrs	r3, r3, #1
 8001276:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3301      	adds	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	2b07      	cmp	r3, #7
 8001282:	d9ef      	bls.n	8001264 <DS18B20_WriteByte+0x10>
    }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <DS18B20_ReadByte>:

// Read a byte of data from the DS18B20 sensor
uint8_t DS18B20_ReadByte(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
    uint8_t byte = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	71fb      	strb	r3, [r7, #7]

    for (uint8_t i = 0; i < 8; i++)
 8001298:	2300      	movs	r3, #0
 800129a:	71bb      	strb	r3, [r7, #6]
 800129c:	e00f      	b.n	80012be <DS18B20_ReadByte+0x30>
    {
        byte >>= 1; // Shift byte right by 1 bit
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	085b      	lsrs	r3, r3, #1
 80012a2:	71fb      	strb	r3, [r7, #7]
        byte |= (DS18B20_ReadBit() << 7); // Read MSB first
 80012a4:	f7ff ffaa 	bl	80011fc <DS18B20_ReadBit>
 80012a8:	4603      	mov	r3, r0
 80012aa:	01db      	lsls	r3, r3, #7
 80012ac:	b25a      	sxtb	r2, r3
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	71fb      	strb	r3, [r7, #7]
    for (uint8_t i = 0; i < 8; i++)
 80012b8:	79bb      	ldrb	r3, [r7, #6]
 80012ba:	3301      	adds	r3, #1
 80012bc:	71bb      	strb	r3, [r7, #6]
 80012be:	79bb      	ldrb	r3, [r7, #6]
 80012c0:	2b07      	cmp	r3, #7
 80012c2:	d9ec      	bls.n	800129e <DS18B20_ReadByte+0x10>
    }

    return byte;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <DS18B20_StartConversion>:

// Start temperature conversion on the DS18B20 sensor
void DS18B20_StartConversion(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
    DS18B20_Init();
 80012d2:	f7ff ff57 	bl	8001184 <DS18B20_Init>
    DS18B20_WriteByte(0xCC); // Skip ROM command
 80012d6:	20cc      	movs	r0, #204	@ 0xcc
 80012d8:	f7ff ffbc 	bl	8001254 <DS18B20_WriteByte>
    DS18B20_WriteByte(0x44); // Start conversion command
 80012dc:	2044      	movs	r0, #68	@ 0x44
 80012de:	f7ff ffb9 	bl	8001254 <DS18B20_WriteByte>
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <DS18B20_ReadTemperature>:

// Read temperature from the DS18B20 sensor
float DS18B20_ReadTemperature(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
    DS18B20_Init();
 80012ec:	f7ff ff4a 	bl	8001184 <DS18B20_Init>
    DS18B20_WriteByte(0xCC); // Skip ROM command
 80012f0:	20cc      	movs	r0, #204	@ 0xcc
 80012f2:	f7ff ffaf 	bl	8001254 <DS18B20_WriteByte>
    DS18B20_WriteByte(0xBE); // Read Scratchpad command
 80012f6:	20be      	movs	r0, #190	@ 0xbe
 80012f8:	f7ff ffac 	bl	8001254 <DS18B20_WriteByte>

    uint8_t temp_LSB = DS18B20_ReadByte();
 80012fc:	f7ff ffc7 	bl	800128e <DS18B20_ReadByte>
 8001300:	4603      	mov	r3, r0
 8001302:	71fb      	strb	r3, [r7, #7]
    uint8_t temp_MSB = DS18B20_ReadByte();
 8001304:	f7ff ffc3 	bl	800128e <DS18B20_ReadByte>
 8001308:	4603      	mov	r3, r0
 800130a:	71bb      	strb	r3, [r7, #6]
    int16_t temp_raw = (temp_MSB << 8) | temp_LSB;
 800130c:	79bb      	ldrb	r3, [r7, #6]
 800130e:	021b      	lsls	r3, r3, #8
 8001310:	b21a      	sxth	r2, r3
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	b21b      	sxth	r3, r3
 8001316:	4313      	orrs	r3, r2
 8001318:	80bb      	strh	r3, [r7, #4]

    // Convert raw temperature to Celsius
    float temperature = (float)temp_raw / 16.0;
 800131a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff fcdc 	bl	8000cdc <__aeabi_i2f>
 8001324:	4603      	mov	r3, r0
 8001326:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff fdde 	bl	8000eec <__aeabi_fdiv>
 8001330:	4603      	mov	r3, r0
 8001332:	603b      	str	r3, [r7, #0]

    return temperature;
 8001334:	683b      	ldr	r3, [r7, #0]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <Error_Handler>:

// Error handler (auto-generated by STM32CubeIDE)
void Error_Handler(void)
{
 800133e:	b480      	push	{r7}
 8001340:	af00      	add	r7, sp, #0
    while (1)
 8001342:	bf00      	nop
 8001344:	e7fd      	b.n	8001342 <Error_Handler+0x4>
	...

08001348 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <HAL_MspInit+0x5c>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a14      	ldr	r2, [pc, #80]	@ (80013a4 <HAL_MspInit+0x5c>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <HAL_MspInit+0x5c>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <HAL_MspInit+0x5c>)
 8001368:	69db      	ldr	r3, [r3, #28]
 800136a:	4a0e      	ldr	r2, [pc, #56]	@ (80013a4 <HAL_MspInit+0x5c>)
 800136c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001370:	61d3      	str	r3, [r2, #28]
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <HAL_MspInit+0x5c>)
 8001374:	69db      	ldr	r3, [r3, #28]
 8001376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800137e:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <HAL_MspInit+0x60>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_MspInit+0x60>)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	bc80      	pop	{r7}
 80013a2:	4770      	bx	lr
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40010000 	.word	0x40010000

080013ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	@ 0x38
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80013bc:	2300      	movs	r3, #0
 80013be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80013c2:	4b34      	ldr	r3, [pc, #208]	@ (8001494 <HAL_InitTick+0xe8>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a33      	ldr	r2, [pc, #204]	@ (8001494 <HAL_InitTick+0xe8>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b31      	ldr	r3, [pc, #196]	@ (8001494 <HAL_InitTick+0xe8>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013da:	f107 0210 	add.w	r2, r7, #16
 80013de:	f107 0314 	add.w	r3, r7, #20
 80013e2:	4611      	mov	r1, r2
 80013e4:	4618      	mov	r0, r3
 80013e6:	f000 fd71 	bl	8001ecc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d103      	bne.n	80013fc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013f4:	f000 fd42 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 80013f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80013fa:	e004      	b.n	8001406 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013fc:	f000 fd3e 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8001400:	4603      	mov	r3, r0
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001408:	4a23      	ldr	r2, [pc, #140]	@ (8001498 <HAL_InitTick+0xec>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	3b01      	subs	r3, #1
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001414:	4b21      	ldr	r3, [pc, #132]	@ (800149c <HAL_InitTick+0xf0>)
 8001416:	4a22      	ldr	r2, [pc, #136]	@ (80014a0 <HAL_InitTick+0xf4>)
 8001418:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_InitTick+0xf0>)
 800141c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001420:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001422:	4a1e      	ldr	r2, [pc, #120]	@ (800149c <HAL_InitTick+0xf0>)
 8001424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001426:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001428:	4b1c      	ldr	r3, [pc, #112]	@ (800149c <HAL_InitTick+0xf0>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b1b      	ldr	r3, [pc, #108]	@ (800149c <HAL_InitTick+0xf0>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b19      	ldr	r3, [pc, #100]	@ (800149c <HAL_InitTick+0xf0>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800143a:	4818      	ldr	r0, [pc, #96]	@ (800149c <HAL_InitTick+0xf0>)
 800143c:	f000 fd76 	bl	8001f2c <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001446:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800144e:	4813      	ldr	r0, [pc, #76]	@ (800149c <HAL_InitTick+0xf0>)
 8001450:	f000 fdbc 	bl	8001fcc <HAL_TIM_Base_Start_IT>
 8001454:	4603      	mov	r3, r0
 8001456:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800145a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800145e:	2b00      	cmp	r3, #0
 8001460:	d111      	bne.n	8001486 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001462:	201e      	movs	r0, #30
 8001464:	f000 fb3d 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	d808      	bhi.n	8001480 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800146e:	2200      	movs	r2, #0
 8001470:	6879      	ldr	r1, [r7, #4]
 8001472:	201e      	movs	r0, #30
 8001474:	f000 fb19 	bl	8001aaa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001478:	4a0a      	ldr	r2, [pc, #40]	@ (80014a4 <HAL_InitTick+0xf8>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e002      	b.n	8001486 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001486:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800148a:	4618      	mov	r0, r3
 800148c:	3738      	adds	r7, #56	@ 0x38
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	431bde83 	.word	0x431bde83
 800149c:	200001f0 	.word	0x200001f0
 80014a0:	40000800 	.word	0x40000800
 80014a4:	20000004 	.word	0x20000004

080014a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <NMI_Handler+0x4>

080014b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b4:	bf00      	nop
 80014b6:	e7fd      	b.n	80014b4 <HardFault_Handler+0x4>

080014b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014bc:	bf00      	nop
 80014be:	e7fd      	b.n	80014bc <MemManage_Handler+0x4>

080014c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c4:	bf00      	nop
 80014c6:	e7fd      	b.n	80014c4 <BusFault_Handler+0x4>

080014c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <UsageFault_Handler+0x4>

080014d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <TIM4_IRQHandler+0x10>)
 8001506:	f000 fdb3 	bl	8002070 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200001f0 	.word	0x200001f0

08001514 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return 1;
 8001518:	2301      	movs	r3, #1
}
 800151a:	4618      	mov	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr

08001522 <_kill>:

int _kill(int pid, int sig)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800152c:	f002 fab8 	bl	8003aa0 <__errno>
 8001530:	4603      	mov	r3, r0
 8001532:	2216      	movs	r2, #22
 8001534:	601a      	str	r2, [r3, #0]
  return -1;
 8001536:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_exit>:

void _exit (int status)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b082      	sub	sp, #8
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800154a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffe7 	bl	8001522 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <_exit+0x12>

08001558 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e00a      	b.n	8001580 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800156a:	f3af 8000 	nop.w
 800156e:	4601      	mov	r1, r0
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	b2ca      	uxtb	r2, r1
 8001578:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	697a      	ldr	r2, [r7, #20]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	429a      	cmp	r2, r3
 8001586:	dbf0      	blt.n	800156a <_read+0x12>
  }

  return len;
 8001588:	687b      	ldr	r3, [r7, #4]
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b086      	sub	sp, #24
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	60b9      	str	r1, [r7, #8]
 800159c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e009      	b.n	80015b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	1c5a      	adds	r2, r3, #1
 80015a8:	60ba      	str	r2, [r7, #8]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4618      	mov	r0, r3
 80015ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	3301      	adds	r3, #1
 80015b6:	617b      	str	r3, [r7, #20]
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dbf1      	blt.n	80015a4 <_write+0x12>
  }
  return len;
 80015c0:	687b      	ldr	r3, [r7, #4]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <_close>:

int _close(int file)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr

080015e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015f0:	605a      	str	r2, [r3, #4]
  return 0;
 80015f2:	2300      	movs	r3, #0
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr

080015fe <_isatty>:

int _isatty(int file)
{
 80015fe:	b480      	push	{r7}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001612:	b480      	push	{r7}
 8001614:	b085      	sub	sp, #20
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
	...

0800162c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <_sbrk+0x5c>)
 8001636:	4b15      	ldr	r3, [pc, #84]	@ (800168c <_sbrk+0x60>)
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001640:	4b13      	ldr	r3, [pc, #76]	@ (8001690 <_sbrk+0x64>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d102      	bne.n	800164e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001648:	4b11      	ldr	r3, [pc, #68]	@ (8001690 <_sbrk+0x64>)
 800164a:	4a12      	ldr	r2, [pc, #72]	@ (8001694 <_sbrk+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800164e:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <_sbrk+0x64>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4413      	add	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	429a      	cmp	r2, r3
 800165a:	d207      	bcs.n	800166c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800165c:	f002 fa20 	bl	8003aa0 <__errno>
 8001660:	4603      	mov	r3, r0
 8001662:	220c      	movs	r2, #12
 8001664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001666:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800166a:	e009      	b.n	8001680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800166c:	4b08      	ldr	r3, [pc, #32]	@ (8001690 <_sbrk+0x64>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001672:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <_sbrk+0x64>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	4a05      	ldr	r2, [pc, #20]	@ (8001690 <_sbrk+0x64>)
 800167c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	4618      	mov	r0, r3
 8001682:	3718      	adds	r7, #24
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20005000 	.word	0x20005000
 800168c:	00000400 	.word	0x00000400
 8001690:	20000238 	.word	0x20000238
 8001694:	20000420 	.word	0x20000420

08001698 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016b8:	463b      	mov	r3, r7
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016c0:	4b1e      	ldr	r3, [pc, #120]	@ (800173c <MX_TIM1_Init+0x98>)
 80016c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001740 <MX_TIM1_Init+0x9c>)
 80016c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80016c6:	4b1d      	ldr	r3, [pc, #116]	@ (800173c <MX_TIM1_Init+0x98>)
 80016c8:	2247      	movs	r2, #71	@ 0x47
 80016ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	@ (800173c <MX_TIM1_Init+0x98>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	@ (800173c <MX_TIM1_Init+0x98>)
 80016d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016da:	4b18      	ldr	r3, [pc, #96]	@ (800173c <MX_TIM1_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016e0:	4b16      	ldr	r3, [pc, #88]	@ (800173c <MX_TIM1_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <MX_TIM1_Init+0x98>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016ec:	4813      	ldr	r0, [pc, #76]	@ (800173c <MX_TIM1_Init+0x98>)
 80016ee:	f000 fc1d 	bl	8001f2c <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80016f8:	f7ff fe21 	bl	800133e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	@ (800173c <MX_TIM1_Init+0x98>)
 800170a:	f000 fdb9 	bl	8002280 <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001714:	f7ff fe13 	bl	800133e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	@ (800173c <MX_TIM1_Init+0x98>)
 8001726:	f000 ff97 	bl	8002658 <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001730:	f7ff fe05 	bl	800133e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000023c 	.word	0x2000023c
 8001740:	40012c00 	.word	0x40012c00

08001744 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a09      	ldr	r2, [pc, #36]	@ (8001778 <HAL_TIM_Base_MspInit+0x34>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d10b      	bne.n	800176e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001756:	4b09      	ldr	r3, [pc, #36]	@ (800177c <HAL_TIM_Base_MspInit+0x38>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a08      	ldr	r2, [pc, #32]	@ (800177c <HAL_TIM_Base_MspInit+0x38>)
 800175c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_TIM_Base_MspInit+0x38>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800176e:	bf00      	nop
 8001770:	3714      	adds	r7, #20
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr
 8001778:	40012c00 	.word	0x40012c00
 800177c:	40021000 	.word	0x40021000

08001780 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <MX_USART1_UART_Init+0x4c>)
 8001786:	4a12      	ldr	r2, [pc, #72]	@ (80017d0 <MX_USART1_UART_Init+0x50>)
 8001788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <MX_USART1_UART_Init+0x4c>)
 800178c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001792:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <MX_USART1_UART_Init+0x4c>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001798:	4b0c      	ldr	r3, [pc, #48]	@ (80017cc <MX_USART1_UART_Init+0x4c>)
 800179a:	2200      	movs	r2, #0
 800179c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	@ (80017cc <MX_USART1_UART_Init+0x4c>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a4:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <MX_USART1_UART_Init+0x4c>)
 80017a6:	220c      	movs	r2, #12
 80017a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <MX_USART1_UART_Init+0x4c>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b0:	4b06      	ldr	r3, [pc, #24]	@ (80017cc <MX_USART1_UART_Init+0x4c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	@ (80017cc <MX_USART1_UART_Init+0x4c>)
 80017b8:	f000 ffbe 	bl	8002738 <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017c2:	f7ff fdbc 	bl	800133e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	20000284 	.word	0x20000284
 80017d0:	40013800 	.word	0x40013800

080017d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0310 	add.w	r3, r7, #16
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <HAL_UART_MspInit+0x8c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d131      	bne.n	8001858 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <HAL_UART_MspInit+0x90>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001864 <HAL_UART_MspInit+0x90>)
 80017fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017fe:	6193      	str	r3, [r2, #24]
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_UART_MspInit+0x90>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <HAL_UART_MspInit+0x90>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4a14      	ldr	r2, [pc, #80]	@ (8001864 <HAL_UART_MspInit+0x90>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6193      	str	r3, [r2, #24]
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_UART_MspInit+0x90>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	f003 0304 	and.w	r3, r3, #4
 8001820:	60bb      	str	r3, [r7, #8]
 8001822:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001824:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001828:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182a:	2302      	movs	r3, #2
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001832:	f107 0310 	add.w	r3, r7, #16
 8001836:	4619      	mov	r1, r3
 8001838:	480b      	ldr	r0, [pc, #44]	@ (8001868 <HAL_UART_MspInit+0x94>)
 800183a:	f000 f961 	bl	8001b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800183e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001842:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	@ (8001868 <HAL_UART_MspInit+0x94>)
 8001854:	f000 f954 	bl	8001b00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40013800 	.word	0x40013800
 8001864:	40021000 	.word	0x40021000
 8001868:	40010800 	.word	0x40010800

0800186c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800186c:	f7ff ff14 	bl	8001698 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001870:	480b      	ldr	r0, [pc, #44]	@ (80018a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001872:	490c      	ldr	r1, [pc, #48]	@ (80018a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001874:	4a0c      	ldr	r2, [pc, #48]	@ (80018a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800187a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800187c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001880:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001882:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001886:	4a09      	ldr	r2, [pc, #36]	@ (80018ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001888:	4c09      	ldr	r4, [pc, #36]	@ (80018b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800188e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001892:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001896:	f002 f909 	bl	8003aac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800189a:	f7ff fc39 	bl	8001110 <main>
  bx lr
 800189e:	4770      	bx	lr
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80018a8:	08007608 	.word	0x08007608
  ldr r2, =_sbss
 80018ac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80018b0:	2000041c 	.word	0x2000041c

080018b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC1_2_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018bc:	4b08      	ldr	r3, [pc, #32]	@ (80018e0 <HAL_Init+0x28>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	@ (80018e0 <HAL_Init+0x28>)
 80018c2:	f043 0310 	orr.w	r3, r3, #16
 80018c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c8:	2003      	movs	r0, #3
 80018ca:	f000 f8e3 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ce:	200f      	movs	r0, #15
 80018d0:	f7ff fd6c 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d4:	f7ff fd38 	bl	8001348 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40022000 	.word	0x40022000

080018e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return uwTick;
 80018e8:	4b02      	ldr	r3, [pc, #8]	@ (80018f4 <HAL_GetTick+0x10>)
 80018ea:	681b      	ldr	r3, [r3, #0]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	200002cc 	.word	0x200002cc

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff fff0 	bl	80018e4 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffe0 	bl	80018e4 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	bc80      	pop	{r7}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4906      	ldr	r1, [pc, #24]	@ (80019d8 <__NVIC_EnableIRQ+0x34>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	e000e100 	.word	0xe000e100

080019dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	6039      	str	r1, [r7, #0]
 80019e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db0a      	blt.n	8001a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	490c      	ldr	r1, [pc, #48]	@ (8001a28 <__NVIC_SetPriority+0x4c>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	0112      	lsls	r2, r2, #4
 80019fc:	b2d2      	uxtb	r2, r2
 80019fe:	440b      	add	r3, r1
 8001a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a04:	e00a      	b.n	8001a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	b2da      	uxtb	r2, r3
 8001a0a:	4908      	ldr	r1, [pc, #32]	@ (8001a2c <__NVIC_SetPriority+0x50>)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	3b04      	subs	r3, #4
 8001a14:	0112      	lsls	r2, r2, #4
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	440b      	add	r3, r1
 8001a1a:	761a      	strb	r2, [r3, #24]
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bc80      	pop	{r7}
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	e000e100 	.word	0xe000e100
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b089      	sub	sp, #36	@ 0x24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 0307 	and.w	r3, r3, #7
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f1c3 0307 	rsb	r3, r3, #7
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	bf28      	it	cs
 8001a4e:	2304      	movcs	r3, #4
 8001a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3304      	adds	r3, #4
 8001a56:	2b06      	cmp	r3, #6
 8001a58:	d902      	bls.n	8001a60 <NVIC_EncodePriority+0x30>
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	3b03      	subs	r3, #3
 8001a5e:	e000      	b.n	8001a62 <NVIC_EncodePriority+0x32>
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a64:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	401a      	ands	r2, r3
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	43d9      	mvns	r1, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	4313      	orrs	r3, r2
         );
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3724      	adds	r7, #36	@ 0x24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff4f 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff64 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ffb2 	bl	8001a30 <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff81 	bl	80019dc <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff57 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
	...

08001b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b08b      	sub	sp, #44	@ 0x2c
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b12:	e169      	b.n	8001de8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b14:	2201      	movs	r2, #1
 8001b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	69fa      	ldr	r2, [r7, #28]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	f040 8158 	bne.w	8001de2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	4a9a      	ldr	r2, [pc, #616]	@ (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d05e      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b3c:	4a98      	ldr	r2, [pc, #608]	@ (8001da0 <HAL_GPIO_Init+0x2a0>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d875      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b42:	4a98      	ldr	r2, [pc, #608]	@ (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d058      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b48:	4a96      	ldr	r2, [pc, #600]	@ (8001da4 <HAL_GPIO_Init+0x2a4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d86f      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b4e:	4a96      	ldr	r2, [pc, #600]	@ (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d052      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b54:	4a94      	ldr	r2, [pc, #592]	@ (8001da8 <HAL_GPIO_Init+0x2a8>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d869      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b5a:	4a94      	ldr	r2, [pc, #592]	@ (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d04c      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b60:	4a92      	ldr	r2, [pc, #584]	@ (8001dac <HAL_GPIO_Init+0x2ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d863      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b66:	4a92      	ldr	r2, [pc, #584]	@ (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d046      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
 8001b6c:	4a90      	ldr	r2, [pc, #576]	@ (8001db0 <HAL_GPIO_Init+0x2b0>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d85d      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b72:	2b12      	cmp	r3, #18
 8001b74:	d82a      	bhi.n	8001bcc <HAL_GPIO_Init+0xcc>
 8001b76:	2b12      	cmp	r3, #18
 8001b78:	d859      	bhi.n	8001c2e <HAL_GPIO_Init+0x12e>
 8001b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b80 <HAL_GPIO_Init+0x80>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001bfb 	.word	0x08001bfb
 8001b84:	08001bd5 	.word	0x08001bd5
 8001b88:	08001be7 	.word	0x08001be7
 8001b8c:	08001c29 	.word	0x08001c29
 8001b90:	08001c2f 	.word	0x08001c2f
 8001b94:	08001c2f 	.word	0x08001c2f
 8001b98:	08001c2f 	.word	0x08001c2f
 8001b9c:	08001c2f 	.word	0x08001c2f
 8001ba0:	08001c2f 	.word	0x08001c2f
 8001ba4:	08001c2f 	.word	0x08001c2f
 8001ba8:	08001c2f 	.word	0x08001c2f
 8001bac:	08001c2f 	.word	0x08001c2f
 8001bb0:	08001c2f 	.word	0x08001c2f
 8001bb4:	08001c2f 	.word	0x08001c2f
 8001bb8:	08001c2f 	.word	0x08001c2f
 8001bbc:	08001c2f 	.word	0x08001c2f
 8001bc0:	08001c2f 	.word	0x08001c2f
 8001bc4:	08001bdd 	.word	0x08001bdd
 8001bc8:	08001bf1 	.word	0x08001bf1
 8001bcc:	4a79      	ldr	r2, [pc, #484]	@ (8001db4 <HAL_GPIO_Init+0x2b4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bd2:	e02c      	b.n	8001c2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	623b      	str	r3, [r7, #32]
          break;
 8001bda:	e029      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	3304      	adds	r3, #4
 8001be2:	623b      	str	r3, [r7, #32]
          break;
 8001be4:	e024      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	3308      	adds	r3, #8
 8001bec:	623b      	str	r3, [r7, #32]
          break;
 8001bee:	e01f      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	330c      	adds	r3, #12
 8001bf6:	623b      	str	r3, [r7, #32]
          break;
 8001bf8:	e01a      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c02:	2304      	movs	r3, #4
 8001c04:	623b      	str	r3, [r7, #32]
          break;
 8001c06:	e013      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d105      	bne.n	8001c1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c10:	2308      	movs	r3, #8
 8001c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	69fa      	ldr	r2, [r7, #28]
 8001c18:	611a      	str	r2, [r3, #16]
          break;
 8001c1a:	e009      	b.n	8001c30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c1c:	2308      	movs	r3, #8
 8001c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69fa      	ldr	r2, [r7, #28]
 8001c24:	615a      	str	r2, [r3, #20]
          break;
 8001c26:	e003      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e000      	b.n	8001c30 <HAL_GPIO_Init+0x130>
          break;
 8001c2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2bff      	cmp	r3, #255	@ 0xff
 8001c34:	d801      	bhi.n	8001c3a <HAL_GPIO_Init+0x13a>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	e001      	b.n	8001c3e <HAL_GPIO_Init+0x13e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2bff      	cmp	r3, #255	@ 0xff
 8001c44:	d802      	bhi.n	8001c4c <HAL_GPIO_Init+0x14c>
 8001c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	e002      	b.n	8001c52 <HAL_GPIO_Init+0x152>
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4e:	3b08      	subs	r3, #8
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	210f      	movs	r1, #15
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c60:	43db      	mvns	r3, r3
 8001c62:	401a      	ands	r2, r3
 8001c64:	6a39      	ldr	r1, [r7, #32]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80b1 	beq.w	8001de2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c80:	4b4d      	ldr	r3, [pc, #308]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a4c      	ldr	r2, [pc, #304]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c86:	f043 0301 	orr.w	r3, r3, #1
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8001db8 <HAL_GPIO_Init+0x2b8>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c98:	4a48      	ldr	r2, [pc, #288]	@ (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9c:	089b      	lsrs	r3, r3, #2
 8001c9e:	3302      	adds	r3, #2
 8001ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ca4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	f003 0303 	and.w	r3, r3, #3
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	220f      	movs	r2, #15
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a40      	ldr	r2, [pc, #256]	@ (8001dc0 <HAL_GPIO_Init+0x2c0>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d013      	beq.n	8001cec <HAL_GPIO_Init+0x1ec>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8001dc4 <HAL_GPIO_Init+0x2c4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d00d      	beq.n	8001ce8 <HAL_GPIO_Init+0x1e8>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc8 <HAL_GPIO_Init+0x2c8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0x1e4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a3d      	ldr	r2, [pc, #244]	@ (8001dcc <HAL_GPIO_Init+0x2cc>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d101      	bne.n	8001ce0 <HAL_GPIO_Init+0x1e0>
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e006      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	e004      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e002      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_GPIO_Init+0x1ee>
 8001cec:	2300      	movs	r3, #0
 8001cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cf0:	f002 0203 	and.w	r2, r2, #3
 8001cf4:	0092      	lsls	r2, r2, #2
 8001cf6:	4093      	lsls	r3, r2
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cfe:	492f      	ldr	r1, [pc, #188]	@ (8001dbc <HAL_GPIO_Init+0x2bc>)
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	089b      	lsrs	r3, r3, #2
 8001d04:	3302      	adds	r3, #2
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d18:	4b2d      	ldr	r3, [pc, #180]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	492c      	ldr	r1, [pc, #176]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d26:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4928      	ldr	r1, [pc, #160]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d40:	4b23      	ldr	r3, [pc, #140]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	4922      	ldr	r1, [pc, #136]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	60cb      	str	r3, [r1, #12]
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d4e:	4b20      	ldr	r3, [pc, #128]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d50:	68da      	ldr	r2, [r3, #12]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	491e      	ldr	r1, [pc, #120]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4918      	ldr	r1, [pc, #96]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	604b      	str	r3, [r1, #4]
 8001d74:	e006      	b.n	8001d84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d76:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4914      	ldr	r1, [pc, #80]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d80:	4013      	ands	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d021      	beq.n	8001dd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d90:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	490e      	ldr	r1, [pc, #56]	@ (8001dd0 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]
 8001d9c:	e021      	b.n	8001de2 <HAL_GPIO_Init+0x2e2>
 8001d9e:	bf00      	nop
 8001da0:	10320000 	.word	0x10320000
 8001da4:	10310000 	.word	0x10310000
 8001da8:	10220000 	.word	0x10220000
 8001dac:	10210000 	.word	0x10210000
 8001db0:	10120000 	.word	0x10120000
 8001db4:	10110000 	.word	0x10110000
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010000 	.word	0x40010000
 8001dc0:	40010800 	.word	0x40010800
 8001dc4:	40010c00 	.word	0x40010c00
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40011400 	.word	0x40011400
 8001dd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	4909      	ldr	r1, [pc, #36]	@ (8001e04 <HAL_GPIO_Init+0x304>)
 8001dde:	4013      	ands	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	3301      	adds	r3, #1
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dee:	fa22 f303 	lsr.w	r3, r2, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f47f ae8e 	bne.w	8001b14 <HAL_GPIO_Init+0x14>
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	372c      	adds	r7, #44	@ 0x2c
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	40010400 	.word	0x40010400

08001e08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689a      	ldr	r2, [r3, #8]
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e001      	b.n	8001e2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	807b      	strh	r3, [r7, #2]
 8001e42:	4613      	mov	r3, r2
 8001e44:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e46:	787b      	ldrb	r3, [r7, #1]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e4c:	887a      	ldrh	r2, [r7, #2]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e52:	e003      	b.n	8001e5c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e54:	887b      	ldrh	r3, [r7, #2]
 8001e56:	041a      	lsls	r2, r3, #16
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	611a      	str	r2, [r3, #16]
}
 8001e5c:	bf00      	nop
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
	...

08001e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e6c:	4b02      	ldr	r3, [pc, #8]	@ (8001e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bc80      	pop	{r7}
 8001e76:	4770      	bx	lr
 8001e78:	20000000 	.word	0x20000000

08001e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e80:	f7ff fff2 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001e84:	4602      	mov	r2, r0
 8001e86:	4b05      	ldr	r3, [pc, #20]	@ (8001e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	4903      	ldr	r1, [pc, #12]	@ (8001ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e92:	5ccb      	ldrb	r3, [r1, r3]
 8001e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	080071c0 	.word	0x080071c0

08001ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_RCC_GetHCLKFreq>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	0adb      	lsrs	r3, r3, #11
 8001eb4:	f003 0307 	and.w	r3, r3, #7
 8001eb8:	4903      	ldr	r1, [pc, #12]	@ (8001ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eba:	5ccb      	ldrb	r3, [r1, r3]
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	080071c0 	.word	0x080071c0

08001ecc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	220f      	movs	r2, #15
 8001eda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001edc:	4b11      	ldr	r3, [pc, #68]	@ (8001f24 <HAL_RCC_GetClockConfig+0x58>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0203 	and.w	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	@ (8001f24 <HAL_RCC_GetClockConfig+0x58>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f24 <HAL_RCC_GetClockConfig+0x58>)
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f00:	4b08      	ldr	r3, [pc, #32]	@ (8001f24 <HAL_RCC_GetClockConfig+0x58>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <HAL_RCC_GetClockConfig+0x5c>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0207 	and.w	r2, r3, #7
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40022000 	.word	0x40022000

08001f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d101      	bne.n	8001f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e041      	b.n	8001fc2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d106      	bne.n	8001f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7ff fbf6 	bl	8001744 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2202      	movs	r2, #2
 8001f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3304      	adds	r3, #4
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	f000 fa7c 	bl	8002468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
	...

08001fcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d001      	beq.n	8001fe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e03a      	b.n	800205a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68da      	ldr	r2, [r3, #12]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f042 0201 	orr.w	r2, r2, #1
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a18      	ldr	r2, [pc, #96]	@ (8002064 <HAL_TIM_Base_Start_IT+0x98>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00e      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x58>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200e:	d009      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x58>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a14      	ldr	r2, [pc, #80]	@ (8002068 <HAL_TIM_Base_Start_IT+0x9c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d004      	beq.n	8002024 <HAL_TIM_Base_Start_IT+0x58>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a13      	ldr	r2, [pc, #76]	@ (800206c <HAL_TIM_Base_Start_IT+0xa0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d111      	bne.n	8002048 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b06      	cmp	r3, #6
 8002034:	d010      	beq.n	8002058 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0201 	orr.w	r2, r2, #1
 8002044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002046:	e007      	b.n	8002058 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f042 0201 	orr.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	40012c00 	.word	0x40012c00
 8002068:	40000400 	.word	0x40000400
 800206c:	40000800 	.word	0x40000800

08002070 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	2b02      	cmp	r3, #2
 8002084:	d122      	bne.n	80020cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b02      	cmp	r3, #2
 8002092:	d11b      	bne.n	80020cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0202 	mvn.w	r2, #2
 800209c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f9bd 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
 80020b8:	e005      	b.n	80020c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f9b0 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 f9bf 	bl	8002444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d122      	bne.n	8002120 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d11b      	bne.n	8002120 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0204 	mvn.w	r2, #4
 80020f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002102:	2b00      	cmp	r3, #0
 8002104:	d003      	beq.n	800210e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 f993 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
 800210c:	e005      	b.n	800211a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f986 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f995 	bl	8002444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	2b08      	cmp	r3, #8
 800212c:	d122      	bne.n	8002174 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b08      	cmp	r3, #8
 800213a:	d11b      	bne.n	8002174 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0208 	mvn.w	r2, #8
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f969 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f95c 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f96b 	bl	8002444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f003 0310 	and.w	r3, r3, #16
 800217e:	2b10      	cmp	r3, #16
 8002180:	d122      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0310 	and.w	r3, r3, #16
 800218c:	2b10      	cmp	r3, #16
 800218e:	d11b      	bne.n	80021c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f06f 0210 	mvn.w	r2, #16
 8002198:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2208      	movs	r2, #8
 800219e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f93f 	bl	8002432 <HAL_TIM_IC_CaptureCallback>
 80021b4:	e005      	b.n	80021c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f932 	bl	8002420 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 f941 	bl	8002444 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d10e      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0301 	and.w	r3, r3, #1
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d107      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f06f 0201 	mvn.w	r2, #1
 80021ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f000 f90d 	bl	800240e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021fe:	2b80      	cmp	r3, #128	@ 0x80
 8002200:	d10e      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800220c:	2b80      	cmp	r3, #128	@ 0x80
 800220e:	d107      	bne.n	8002220 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 fa83 	bl	8002726 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	691b      	ldr	r3, [r3, #16]
 8002226:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800222a:	2b40      	cmp	r3, #64	@ 0x40
 800222c:	d10e      	bne.n	800224c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002238:	2b40      	cmp	r3, #64	@ 0x40
 800223a:	d107      	bne.n	800224c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 f905 	bl	8002456 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0320 	and.w	r3, r3, #32
 8002256:	2b20      	cmp	r3, #32
 8002258:	d10e      	bne.n	8002278 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0320 	and.w	r3, r3, #32
 8002264:	2b20      	cmp	r3, #32
 8002266:	d107      	bne.n	8002278 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0220 	mvn.w	r2, #32
 8002270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f000 fa4e 	bl	8002714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002278:	bf00      	nop
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_TIM_ConfigClockSource+0x1c>
 8002298:	2302      	movs	r3, #2
 800229a:	e0b4      	b.n	8002406 <HAL_TIM_ConfigClockSource+0x186>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80022ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80022c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022d4:	d03e      	beq.n	8002354 <HAL_TIM_ConfigClockSource+0xd4>
 80022d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022da:	f200 8087 	bhi.w	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 80022de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022e2:	f000 8086 	beq.w	80023f2 <HAL_TIM_ConfigClockSource+0x172>
 80022e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ea:	d87f      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 80022ec:	2b70      	cmp	r3, #112	@ 0x70
 80022ee:	d01a      	beq.n	8002326 <HAL_TIM_ConfigClockSource+0xa6>
 80022f0:	2b70      	cmp	r3, #112	@ 0x70
 80022f2:	d87b      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 80022f4:	2b60      	cmp	r3, #96	@ 0x60
 80022f6:	d050      	beq.n	800239a <HAL_TIM_ConfigClockSource+0x11a>
 80022f8:	2b60      	cmp	r3, #96	@ 0x60
 80022fa:	d877      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 80022fc:	2b50      	cmp	r3, #80	@ 0x50
 80022fe:	d03c      	beq.n	800237a <HAL_TIM_ConfigClockSource+0xfa>
 8002300:	2b50      	cmp	r3, #80	@ 0x50
 8002302:	d873      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 8002304:	2b40      	cmp	r3, #64	@ 0x40
 8002306:	d058      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x13a>
 8002308:	2b40      	cmp	r3, #64	@ 0x40
 800230a:	d86f      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 800230c:	2b30      	cmp	r3, #48	@ 0x30
 800230e:	d064      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x15a>
 8002310:	2b30      	cmp	r3, #48	@ 0x30
 8002312:	d86b      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 8002314:	2b20      	cmp	r3, #32
 8002316:	d060      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x15a>
 8002318:	2b20      	cmp	r3, #32
 800231a:	d867      	bhi.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
 800231c:	2b00      	cmp	r3, #0
 800231e:	d05c      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x15a>
 8002320:	2b10      	cmp	r3, #16
 8002322:	d05a      	beq.n	80023da <HAL_TIM_ConfigClockSource+0x15a>
 8002324:	e062      	b.n	80023ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002336:	f000 f970 	bl	800261a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68ba      	ldr	r2, [r7, #8]
 8002350:	609a      	str	r2, [r3, #8]
      break;
 8002352:	e04f      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002364:	f000 f959 	bl	800261a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002376:	609a      	str	r2, [r3, #8]
      break;
 8002378:	e03c      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002386:	461a      	mov	r2, r3
 8002388:	f000 f8d0 	bl	800252c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2150      	movs	r1, #80	@ 0x50
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f927 	bl	80025e6 <TIM_ITRx_SetConfig>
      break;
 8002398:	e02c      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80023a6:	461a      	mov	r2, r3
 80023a8:	f000 f8ee 	bl	8002588 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2160      	movs	r1, #96	@ 0x60
 80023b2:	4618      	mov	r0, r3
 80023b4:	f000 f917 	bl	80025e6 <TIM_ITRx_SetConfig>
      break;
 80023b8:	e01c      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80023c6:	461a      	mov	r2, r3
 80023c8:	f000 f8b0 	bl	800252c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2140      	movs	r1, #64	@ 0x40
 80023d2:	4618      	mov	r0, r3
 80023d4:	f000 f907 	bl	80025e6 <TIM_ITRx_SetConfig>
      break;
 80023d8:	e00c      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4619      	mov	r1, r3
 80023e4:	4610      	mov	r0, r2
 80023e6:	f000 f8fe 	bl	80025e6 <TIM_ITRx_SetConfig>
      break;
 80023ea:	e003      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e000      	b.n	80023f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80023f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	bc80      	pop	{r7}
 800241e:	4770      	bx	lr

08002420 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002456:	b480      	push	{r7}
 8002458:	b083      	sub	sp, #12
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	4a29      	ldr	r2, [pc, #164]	@ (8002520 <TIM_Base_SetConfig+0xb8>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d00b      	beq.n	8002498 <TIM_Base_SetConfig+0x30>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002486:	d007      	beq.n	8002498 <TIM_Base_SetConfig+0x30>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a26      	ldr	r2, [pc, #152]	@ (8002524 <TIM_Base_SetConfig+0xbc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d003      	beq.n	8002498 <TIM_Base_SetConfig+0x30>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a25      	ldr	r2, [pc, #148]	@ (8002528 <TIM_Base_SetConfig+0xc0>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d108      	bne.n	80024aa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800249e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002520 <TIM_Base_SetConfig+0xb8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00b      	beq.n	80024ca <TIM_Base_SetConfig+0x62>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024b8:	d007      	beq.n	80024ca <TIM_Base_SetConfig+0x62>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a19      	ldr	r2, [pc, #100]	@ (8002524 <TIM_Base_SetConfig+0xbc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d003      	beq.n	80024ca <TIM_Base_SetConfig+0x62>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a18      	ldr	r2, [pc, #96]	@ (8002528 <TIM_Base_SetConfig+0xc0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d108      	bne.n	80024dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	4313      	orrs	r3, r2
 80024da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	695b      	ldr	r3, [r3, #20]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a07      	ldr	r2, [pc, #28]	@ (8002520 <TIM_Base_SetConfig+0xb8>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d103      	bne.n	8002510 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	615a      	str	r2, [r3, #20]
}
 8002516:	bf00      	nop
 8002518:	3714      	adds	r7, #20
 800251a:	46bd      	mov	sp, r7
 800251c:	bc80      	pop	{r7}
 800251e:	4770      	bx	lr
 8002520:	40012c00 	.word	0x40012c00
 8002524:	40000400 	.word	0x40000400
 8002528:	40000800 	.word	0x40000800

0800252c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6a1b      	ldr	r3, [r3, #32]
 8002542:	f023 0201 	bic.w	r2, r3, #1
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002556:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	693a      	ldr	r2, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f023 030a 	bic.w	r3, r3, #10
 8002568:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	621a      	str	r2, [r3, #32]
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	f023 0210 	bic.w	r2, r3, #16
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80025b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	031b      	lsls	r3, r3, #12
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80025c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	621a      	str	r2, [r3, #32]
}
 80025dc:	bf00      	nop
 80025de:	371c      	adds	r7, #28
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bc80      	pop	{r7}
 80025e4:	4770      	bx	lr

080025e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b085      	sub	sp, #20
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	f043 0307 	orr.w	r3, r3, #7
 8002608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	609a      	str	r2, [r3, #8]
}
 8002610:	bf00      	nop
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800261a:	b480      	push	{r7}
 800261c:	b087      	sub	sp, #28
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	607a      	str	r2, [r7, #4]
 8002626:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002634:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	021a      	lsls	r2, r3, #8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	431a      	orrs	r2, r3
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	4313      	orrs	r3, r2
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	4313      	orrs	r3, r2
 8002646:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	609a      	str	r2, [r3, #8]
}
 800264e:	bf00      	nop
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	bc80      	pop	{r7}
 8002656:	4770      	bx	lr

08002658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800266c:	2302      	movs	r3, #2
 800266e:	e046      	b.n	80026fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2202      	movs	r2, #2
 800267c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002696:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68fa      	ldr	r2, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a16      	ldr	r2, [pc, #88]	@ (8002708 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d00e      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026bc:	d009      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a12      	ldr	r2, [pc, #72]	@ (800270c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d004      	beq.n	80026d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a10      	ldr	r2, [pc, #64]	@ (8002710 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d10c      	bne.n	80026ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	68ba      	ldr	r2, [r7, #8]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bc80      	pop	{r7}
 8002706:	4770      	bx	lr
 8002708:	40012c00 	.word	0x40012c00
 800270c:	40000400 	.word	0x40000400
 8002710:	40000800 	.word	0x40000800

08002714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002726:	b480      	push	{r7}
 8002728:	b083      	sub	sp, #12
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e042      	b.n	80027d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff f838 	bl	80017d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2224      	movs	r2, #36	@ 0x24
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800277a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f91d 	bl	80029bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002790:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695a      	ldr	r2, [r3, #20]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	@ 0x28
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	d16d      	bne.n	80028d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d002      	beq.n	8002804 <HAL_UART_Transmit+0x2c>
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d101      	bne.n	8002808 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	e066      	b.n	80028d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2221      	movs	r2, #33	@ 0x21
 8002812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002816:	f7ff f865 	bl	80018e4 <HAL_GetTick>
 800281a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	88fa      	ldrh	r2, [r7, #6]
 8002820:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	88fa      	ldrh	r2, [r7, #6]
 8002826:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002830:	d108      	bne.n	8002844 <HAL_UART_Transmit+0x6c>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d104      	bne.n	8002844 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800283a:	2300      	movs	r3, #0
 800283c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	61bb      	str	r3, [r7, #24]
 8002842:	e003      	b.n	800284c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002848:	2300      	movs	r3, #0
 800284a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800284c:	e02a      	b.n	80028a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	2180      	movs	r1, #128	@ 0x80
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f000 f840 	bl	80028de <UART_WaitOnFlagUntilTimeout>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e036      	b.n	80028d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10b      	bne.n	8002886 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800287c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	3302      	adds	r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
 8002884:	e007      	b.n	8002896 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	3301      	adds	r3, #1
 8002894:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800289a:	b29b      	uxth	r3, r3
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1cf      	bne.n	800284e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	2200      	movs	r2, #0
 80028b6:	2140      	movs	r1, #64	@ 0x40
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f810 	bl	80028de <UART_WaitOnFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d001      	beq.n	80028c8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e006      	b.n	80028d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2220      	movs	r2, #32
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e000      	b.n	80028d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
  }
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3720      	adds	r7, #32
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80028de:	b580      	push	{r7, lr}
 80028e0:	b090      	sub	sp, #64	@ 0x40
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	60f8      	str	r0, [r7, #12]
 80028e6:	60b9      	str	r1, [r7, #8]
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4613      	mov	r3, r2
 80028ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ee:	e050      	b.n	8002992 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028f6:	d04c      	beq.n	8002992 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <UART_WaitOnFlagUntilTimeout+0x30>
 80028fe:	f7fe fff1 	bl	80018e4 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800290a:	429a      	cmp	r2, r3
 800290c:	d241      	bcs.n	8002992 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	330c      	adds	r3, #12
 8002914:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002918:	e853 3f00 	ldrex	r3, [r3]
 800291c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800291e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002920:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8002924:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	330c      	adds	r3, #12
 800292c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800292e:	637a      	str	r2, [r7, #52]	@ 0x34
 8002930:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002932:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002934:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002936:	e841 2300 	strex	r3, r2, [r1]
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800293c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1e5      	bne.n	800290e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	3314      	adds	r3, #20
 8002948:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	e853 3f00 	ldrex	r3, [r3]
 8002950:	613b      	str	r3, [r7, #16]
   return(result);
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f023 0301 	bic.w	r3, r3, #1
 8002958:	63bb      	str	r3, [r7, #56]	@ 0x38
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	3314      	adds	r3, #20
 8002960:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002962:	623a      	str	r2, [r7, #32]
 8002964:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002966:	69f9      	ldr	r1, [r7, #28]
 8002968:	6a3a      	ldr	r2, [r7, #32]
 800296a:	e841 2300 	strex	r3, r2, [r1]
 800296e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e5      	bne.n	8002942 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e00f      	b.n	80029b2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	4013      	ands	r3, r2
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	bf0c      	ite	eq
 80029a2:	2301      	moveq	r3, #1
 80029a4:	2300      	movne	r3, #0
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	461a      	mov	r2, r3
 80029aa:	79fb      	ldrb	r3, [r7, #7]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d09f      	beq.n	80028f0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3740      	adds	r7, #64	@ 0x40
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	430a      	orrs	r2, r1
 80029d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80029f6:	f023 030c 	bic.w	r3, r3, #12
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6812      	ldr	r2, [r2, #0]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	430b      	orrs	r3, r1
 8002a02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ad0 <UART_SetConfig+0x114>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d103      	bne.n	8002a2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a24:	f7ff fa3e 	bl	8001ea4 <HAL_RCC_GetPCLK2Freq>
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	e002      	b.n	8002a32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a2c:	f7ff fa26 	bl	8001e7c <HAL_RCC_GetPCLK1Freq>
 8002a30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a32:	68fa      	ldr	r2, [r7, #12]
 8002a34:	4613      	mov	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4413      	add	r3, r2
 8002a3a:	009a      	lsls	r2, r3, #2
 8002a3c:	441a      	add	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a48:	4a22      	ldr	r2, [pc, #136]	@ (8002ad4 <UART_SetConfig+0x118>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	0119      	lsls	r1, r3, #4
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009a      	lsls	r2, r3, #2
 8002a5c:	441a      	add	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a68:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <UART_SetConfig+0x118>)
 8002a6a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	2064      	movs	r0, #100	@ 0x64
 8002a72:	fb00 f303 	mul.w	r3, r0, r3
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	3332      	adds	r3, #50	@ 0x32
 8002a7c:	4a15      	ldr	r2, [pc, #84]	@ (8002ad4 <UART_SetConfig+0x118>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a88:	4419      	add	r1, r3
 8002a8a:	68fa      	ldr	r2, [r7, #12]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	009a      	lsls	r2, r3, #2
 8002a94:	441a      	add	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ad4 <UART_SetConfig+0x118>)
 8002aa2:	fba3 0302 	umull	r0, r3, r3, r2
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	2064      	movs	r0, #100	@ 0x64
 8002aaa:	fb00 f303 	mul.w	r3, r0, r3
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	011b      	lsls	r3, r3, #4
 8002ab2:	3332      	adds	r3, #50	@ 0x32
 8002ab4:	4a07      	ldr	r2, [pc, #28]	@ (8002ad4 <UART_SetConfig+0x118>)
 8002ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aba:	095b      	lsrs	r3, r3, #5
 8002abc:	f003 020f 	and.w	r2, r3, #15
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	440a      	add	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40013800 	.word	0x40013800
 8002ad4:	51eb851f 	.word	0x51eb851f

08002ad8 <__cvt>:
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ade:	461d      	mov	r5, r3
 8002ae0:	bfbb      	ittet	lt
 8002ae2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8002ae6:	461d      	movlt	r5, r3
 8002ae8:	2300      	movge	r3, #0
 8002aea:	232d      	movlt	r3, #45	@ 0x2d
 8002aec:	b088      	sub	sp, #32
 8002aee:	4614      	mov	r4, r2
 8002af0:	bfb8      	it	lt
 8002af2:	4614      	movlt	r4, r2
 8002af4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002af6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8002af8:	7013      	strb	r3, [r2, #0]
 8002afa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002afc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8002b00:	f023 0820 	bic.w	r8, r3, #32
 8002b04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002b08:	d005      	beq.n	8002b16 <__cvt+0x3e>
 8002b0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002b0e:	d100      	bne.n	8002b12 <__cvt+0x3a>
 8002b10:	3601      	adds	r6, #1
 8002b12:	2302      	movs	r3, #2
 8002b14:	e000      	b.n	8002b18 <__cvt+0x40>
 8002b16:	2303      	movs	r3, #3
 8002b18:	aa07      	add	r2, sp, #28
 8002b1a:	9204      	str	r2, [sp, #16]
 8002b1c:	aa06      	add	r2, sp, #24
 8002b1e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002b22:	e9cd 3600 	strd	r3, r6, [sp]
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	f001 f881 	bl	8003c30 <_dtoa_r>
 8002b2e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002b32:	4607      	mov	r7, r0
 8002b34:	d119      	bne.n	8002b6a <__cvt+0x92>
 8002b36:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002b38:	07db      	lsls	r3, r3, #31
 8002b3a:	d50e      	bpl.n	8002b5a <__cvt+0x82>
 8002b3c:	eb00 0906 	add.w	r9, r0, r6
 8002b40:	2200      	movs	r2, #0
 8002b42:	2300      	movs	r3, #0
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	f7fd ff2e 	bl	80009a8 <__aeabi_dcmpeq>
 8002b4c:	b108      	cbz	r0, 8002b52 <__cvt+0x7a>
 8002b4e:	f8cd 901c 	str.w	r9, [sp, #28]
 8002b52:	2230      	movs	r2, #48	@ 0x30
 8002b54:	9b07      	ldr	r3, [sp, #28]
 8002b56:	454b      	cmp	r3, r9
 8002b58:	d31e      	bcc.n	8002b98 <__cvt+0xc0>
 8002b5a:	4638      	mov	r0, r7
 8002b5c:	9b07      	ldr	r3, [sp, #28]
 8002b5e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8002b60:	1bdb      	subs	r3, r3, r7
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	b008      	add	sp, #32
 8002b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b6a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002b6e:	eb00 0906 	add.w	r9, r0, r6
 8002b72:	d1e5      	bne.n	8002b40 <__cvt+0x68>
 8002b74:	7803      	ldrb	r3, [r0, #0]
 8002b76:	2b30      	cmp	r3, #48	@ 0x30
 8002b78:	d10a      	bne.n	8002b90 <__cvt+0xb8>
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	4620      	mov	r0, r4
 8002b80:	4629      	mov	r1, r5
 8002b82:	f7fd ff11 	bl	80009a8 <__aeabi_dcmpeq>
 8002b86:	b918      	cbnz	r0, 8002b90 <__cvt+0xb8>
 8002b88:	f1c6 0601 	rsb	r6, r6, #1
 8002b8c:	f8ca 6000 	str.w	r6, [sl]
 8002b90:	f8da 3000 	ldr.w	r3, [sl]
 8002b94:	4499      	add	r9, r3
 8002b96:	e7d3      	b.n	8002b40 <__cvt+0x68>
 8002b98:	1c59      	adds	r1, r3, #1
 8002b9a:	9107      	str	r1, [sp, #28]
 8002b9c:	701a      	strb	r2, [r3, #0]
 8002b9e:	e7d9      	b.n	8002b54 <__cvt+0x7c>

08002ba0 <__exponent>:
 8002ba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002ba2:	2900      	cmp	r1, #0
 8002ba4:	bfb6      	itet	lt
 8002ba6:	232d      	movlt	r3, #45	@ 0x2d
 8002ba8:	232b      	movge	r3, #43	@ 0x2b
 8002baa:	4249      	neglt	r1, r1
 8002bac:	2909      	cmp	r1, #9
 8002bae:	7002      	strb	r2, [r0, #0]
 8002bb0:	7043      	strb	r3, [r0, #1]
 8002bb2:	dd29      	ble.n	8002c08 <__exponent+0x68>
 8002bb4:	f10d 0307 	add.w	r3, sp, #7
 8002bb8:	461d      	mov	r5, r3
 8002bba:	270a      	movs	r7, #10
 8002bbc:	fbb1 f6f7 	udiv	r6, r1, r7
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	fb07 1416 	mls	r4, r7, r6, r1
 8002bc6:	3430      	adds	r4, #48	@ 0x30
 8002bc8:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002bcc:	460c      	mov	r4, r1
 8002bce:	2c63      	cmp	r4, #99	@ 0x63
 8002bd0:	4631      	mov	r1, r6
 8002bd2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8002bd6:	dcf1      	bgt.n	8002bbc <__exponent+0x1c>
 8002bd8:	3130      	adds	r1, #48	@ 0x30
 8002bda:	1e94      	subs	r4, r2, #2
 8002bdc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002be0:	4623      	mov	r3, r4
 8002be2:	1c41      	adds	r1, r0, #1
 8002be4:	42ab      	cmp	r3, r5
 8002be6:	d30a      	bcc.n	8002bfe <__exponent+0x5e>
 8002be8:	f10d 0309 	add.w	r3, sp, #9
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	42ac      	cmp	r4, r5
 8002bf0:	bf88      	it	hi
 8002bf2:	2300      	movhi	r3, #0
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	4403      	add	r3, r0
 8002bf8:	1a18      	subs	r0, r3, r0
 8002bfa:	b003      	add	sp, #12
 8002bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bfe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002c02:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002c06:	e7ed      	b.n	8002be4 <__exponent+0x44>
 8002c08:	2330      	movs	r3, #48	@ 0x30
 8002c0a:	3130      	adds	r1, #48	@ 0x30
 8002c0c:	7083      	strb	r3, [r0, #2]
 8002c0e:	70c1      	strb	r1, [r0, #3]
 8002c10:	1d03      	adds	r3, r0, #4
 8002c12:	e7f1      	b.n	8002bf8 <__exponent+0x58>

08002c14 <_printf_float>:
 8002c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c18:	b091      	sub	sp, #68	@ 0x44
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8002c20:	4616      	mov	r6, r2
 8002c22:	461f      	mov	r7, r3
 8002c24:	4605      	mov	r5, r0
 8002c26:	f000 fef1 	bl	8003a0c <_localeconv_r>
 8002c2a:	6803      	ldr	r3, [r0, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	9308      	str	r3, [sp, #32]
 8002c30:	f7fd fa8e 	bl	8000150 <strlen>
 8002c34:	2300      	movs	r3, #0
 8002c36:	930e      	str	r3, [sp, #56]	@ 0x38
 8002c38:	f8d8 3000 	ldr.w	r3, [r8]
 8002c3c:	9009      	str	r0, [sp, #36]	@ 0x24
 8002c3e:	3307      	adds	r3, #7
 8002c40:	f023 0307 	bic.w	r3, r3, #7
 8002c44:	f103 0208 	add.w	r2, r3, #8
 8002c48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002c4c:	f8d4 b000 	ldr.w	fp, [r4]
 8002c50:	f8c8 2000 	str.w	r2, [r8]
 8002c54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002c58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002c5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002c5e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8002c62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002c6a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002c6e:	4b9c      	ldr	r3, [pc, #624]	@ (8002ee0 <_printf_float+0x2cc>)
 8002c70:	f7fd fecc 	bl	8000a0c <__aeabi_dcmpun>
 8002c74:	bb70      	cbnz	r0, 8002cd4 <_printf_float+0xc0>
 8002c76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002c7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c7e:	4b98      	ldr	r3, [pc, #608]	@ (8002ee0 <_printf_float+0x2cc>)
 8002c80:	f7fd fea6 	bl	80009d0 <__aeabi_dcmple>
 8002c84:	bb30      	cbnz	r0, 8002cd4 <_printf_float+0xc0>
 8002c86:	2200      	movs	r2, #0
 8002c88:	2300      	movs	r3, #0
 8002c8a:	4640      	mov	r0, r8
 8002c8c:	4649      	mov	r1, r9
 8002c8e:	f7fd fe95 	bl	80009bc <__aeabi_dcmplt>
 8002c92:	b110      	cbz	r0, 8002c9a <_printf_float+0x86>
 8002c94:	232d      	movs	r3, #45	@ 0x2d
 8002c96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c9a:	4a92      	ldr	r2, [pc, #584]	@ (8002ee4 <_printf_float+0x2d0>)
 8002c9c:	4b92      	ldr	r3, [pc, #584]	@ (8002ee8 <_printf_float+0x2d4>)
 8002c9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002ca2:	bf94      	ite	ls
 8002ca4:	4690      	movls	r8, r2
 8002ca6:	4698      	movhi	r8, r3
 8002ca8:	2303      	movs	r3, #3
 8002caa:	f04f 0900 	mov.w	r9, #0
 8002cae:	6123      	str	r3, [r4, #16]
 8002cb0:	f02b 0304 	bic.w	r3, fp, #4
 8002cb4:	6023      	str	r3, [r4, #0]
 8002cb6:	4633      	mov	r3, r6
 8002cb8:	4621      	mov	r1, r4
 8002cba:	4628      	mov	r0, r5
 8002cbc:	9700      	str	r7, [sp, #0]
 8002cbe:	aa0f      	add	r2, sp, #60	@ 0x3c
 8002cc0:	f000 f9d4 	bl	800306c <_printf_common>
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	f040 8090 	bne.w	8002dea <_printf_float+0x1d6>
 8002cca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002cce:	b011      	add	sp, #68	@ 0x44
 8002cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cd4:	4642      	mov	r2, r8
 8002cd6:	464b      	mov	r3, r9
 8002cd8:	4640      	mov	r0, r8
 8002cda:	4649      	mov	r1, r9
 8002cdc:	f7fd fe96 	bl	8000a0c <__aeabi_dcmpun>
 8002ce0:	b148      	cbz	r0, 8002cf6 <_printf_float+0xe2>
 8002ce2:	464b      	mov	r3, r9
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	bfb8      	it	lt
 8002ce8:	232d      	movlt	r3, #45	@ 0x2d
 8002cea:	4a80      	ldr	r2, [pc, #512]	@ (8002eec <_printf_float+0x2d8>)
 8002cec:	bfb8      	it	lt
 8002cee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ef0 <_printf_float+0x2dc>)
 8002cf4:	e7d3      	b.n	8002c9e <_printf_float+0x8a>
 8002cf6:	6863      	ldr	r3, [r4, #4]
 8002cf8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	d13f      	bne.n	8002d80 <_printf_float+0x16c>
 8002d00:	2306      	movs	r3, #6
 8002d02:	6063      	str	r3, [r4, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8002d0a:	6023      	str	r3, [r4, #0]
 8002d0c:	9206      	str	r2, [sp, #24]
 8002d0e:	aa0e      	add	r2, sp, #56	@ 0x38
 8002d10:	e9cd a204 	strd	sl, r2, [sp, #16]
 8002d14:	aa0d      	add	r2, sp, #52	@ 0x34
 8002d16:	9203      	str	r2, [sp, #12]
 8002d18:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8002d1c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8002d20:	6863      	ldr	r3, [r4, #4]
 8002d22:	4642      	mov	r2, r8
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	4628      	mov	r0, r5
 8002d28:	464b      	mov	r3, r9
 8002d2a:	910a      	str	r1, [sp, #40]	@ 0x28
 8002d2c:	f7ff fed4 	bl	8002ad8 <__cvt>
 8002d30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002d32:	4680      	mov	r8, r0
 8002d34:	2947      	cmp	r1, #71	@ 0x47
 8002d36:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8002d38:	d128      	bne.n	8002d8c <_printf_float+0x178>
 8002d3a:	1cc8      	adds	r0, r1, #3
 8002d3c:	db02      	blt.n	8002d44 <_printf_float+0x130>
 8002d3e:	6863      	ldr	r3, [r4, #4]
 8002d40:	4299      	cmp	r1, r3
 8002d42:	dd40      	ble.n	8002dc6 <_printf_float+0x1b2>
 8002d44:	f1aa 0a02 	sub.w	sl, sl, #2
 8002d48:	fa5f fa8a 	uxtb.w	sl, sl
 8002d4c:	4652      	mov	r2, sl
 8002d4e:	3901      	subs	r1, #1
 8002d50:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002d54:	910d      	str	r1, [sp, #52]	@ 0x34
 8002d56:	f7ff ff23 	bl	8002ba0 <__exponent>
 8002d5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002d5c:	4681      	mov	r9, r0
 8002d5e:	1813      	adds	r3, r2, r0
 8002d60:	2a01      	cmp	r2, #1
 8002d62:	6123      	str	r3, [r4, #16]
 8002d64:	dc02      	bgt.n	8002d6c <_printf_float+0x158>
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	07d2      	lsls	r2, r2, #31
 8002d6a:	d501      	bpl.n	8002d70 <_printf_float+0x15c>
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	6123      	str	r3, [r4, #16]
 8002d70:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d09e      	beq.n	8002cb6 <_printf_float+0xa2>
 8002d78:	232d      	movs	r3, #45	@ 0x2d
 8002d7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d7e:	e79a      	b.n	8002cb6 <_printf_float+0xa2>
 8002d80:	2947      	cmp	r1, #71	@ 0x47
 8002d82:	d1bf      	bne.n	8002d04 <_printf_float+0xf0>
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1bd      	bne.n	8002d04 <_printf_float+0xf0>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e7ba      	b.n	8002d02 <_printf_float+0xee>
 8002d8c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002d90:	d9dc      	bls.n	8002d4c <_printf_float+0x138>
 8002d92:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002d96:	d118      	bne.n	8002dca <_printf_float+0x1b6>
 8002d98:	2900      	cmp	r1, #0
 8002d9a:	6863      	ldr	r3, [r4, #4]
 8002d9c:	dd0b      	ble.n	8002db6 <_printf_float+0x1a2>
 8002d9e:	6121      	str	r1, [r4, #16]
 8002da0:	b913      	cbnz	r3, 8002da8 <_printf_float+0x194>
 8002da2:	6822      	ldr	r2, [r4, #0]
 8002da4:	07d0      	lsls	r0, r2, #31
 8002da6:	d502      	bpl.n	8002dae <_printf_float+0x19a>
 8002da8:	3301      	adds	r3, #1
 8002daa:	440b      	add	r3, r1
 8002dac:	6123      	str	r3, [r4, #16]
 8002dae:	f04f 0900 	mov.w	r9, #0
 8002db2:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002db4:	e7dc      	b.n	8002d70 <_printf_float+0x15c>
 8002db6:	b913      	cbnz	r3, 8002dbe <_printf_float+0x1aa>
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	07d2      	lsls	r2, r2, #31
 8002dbc:	d501      	bpl.n	8002dc2 <_printf_float+0x1ae>
 8002dbe:	3302      	adds	r3, #2
 8002dc0:	e7f4      	b.n	8002dac <_printf_float+0x198>
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e7f2      	b.n	8002dac <_printf_float+0x198>
 8002dc6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002dca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002dcc:	4299      	cmp	r1, r3
 8002dce:	db05      	blt.n	8002ddc <_printf_float+0x1c8>
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	6121      	str	r1, [r4, #16]
 8002dd4:	07d8      	lsls	r0, r3, #31
 8002dd6:	d5ea      	bpl.n	8002dae <_printf_float+0x19a>
 8002dd8:	1c4b      	adds	r3, r1, #1
 8002dda:	e7e7      	b.n	8002dac <_printf_float+0x198>
 8002ddc:	2900      	cmp	r1, #0
 8002dde:	bfcc      	ite	gt
 8002de0:	2201      	movgt	r2, #1
 8002de2:	f1c1 0202 	rsble	r2, r1, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	e7e0      	b.n	8002dac <_printf_float+0x198>
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	055a      	lsls	r2, r3, #21
 8002dee:	d407      	bmi.n	8002e00 <_printf_float+0x1ec>
 8002df0:	6923      	ldr	r3, [r4, #16]
 8002df2:	4642      	mov	r2, r8
 8002df4:	4631      	mov	r1, r6
 8002df6:	4628      	mov	r0, r5
 8002df8:	47b8      	blx	r7
 8002dfa:	3001      	adds	r0, #1
 8002dfc:	d12b      	bne.n	8002e56 <_printf_float+0x242>
 8002dfe:	e764      	b.n	8002cca <_printf_float+0xb6>
 8002e00:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002e04:	f240 80dc 	bls.w	8002fc0 <_printf_float+0x3ac>
 8002e08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2300      	movs	r3, #0
 8002e10:	f7fd fdca 	bl	80009a8 <__aeabi_dcmpeq>
 8002e14:	2800      	cmp	r0, #0
 8002e16:	d033      	beq.n	8002e80 <_printf_float+0x26c>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	4631      	mov	r1, r6
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	4a35      	ldr	r2, [pc, #212]	@ (8002ef4 <_printf_float+0x2e0>)
 8002e20:	47b8      	blx	r7
 8002e22:	3001      	adds	r0, #1
 8002e24:	f43f af51 	beq.w	8002cca <_printf_float+0xb6>
 8002e28:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8002e2c:	4543      	cmp	r3, r8
 8002e2e:	db02      	blt.n	8002e36 <_printf_float+0x222>
 8002e30:	6823      	ldr	r3, [r4, #0]
 8002e32:	07d8      	lsls	r0, r3, #31
 8002e34:	d50f      	bpl.n	8002e56 <_printf_float+0x242>
 8002e36:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002e3a:	4631      	mov	r1, r6
 8002e3c:	4628      	mov	r0, r5
 8002e3e:	47b8      	blx	r7
 8002e40:	3001      	adds	r0, #1
 8002e42:	f43f af42 	beq.w	8002cca <_printf_float+0xb6>
 8002e46:	f04f 0900 	mov.w	r9, #0
 8002e4a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8002e4e:	f104 0a1a 	add.w	sl, r4, #26
 8002e52:	45c8      	cmp	r8, r9
 8002e54:	dc09      	bgt.n	8002e6a <_printf_float+0x256>
 8002e56:	6823      	ldr	r3, [r4, #0]
 8002e58:	079b      	lsls	r3, r3, #30
 8002e5a:	f100 8102 	bmi.w	8003062 <_printf_float+0x44e>
 8002e5e:	68e0      	ldr	r0, [r4, #12]
 8002e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8002e62:	4298      	cmp	r0, r3
 8002e64:	bfb8      	it	lt
 8002e66:	4618      	movlt	r0, r3
 8002e68:	e731      	b.n	8002cce <_printf_float+0xba>
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	4652      	mov	r2, sl
 8002e6e:	4631      	mov	r1, r6
 8002e70:	4628      	mov	r0, r5
 8002e72:	47b8      	blx	r7
 8002e74:	3001      	adds	r0, #1
 8002e76:	f43f af28 	beq.w	8002cca <_printf_float+0xb6>
 8002e7a:	f109 0901 	add.w	r9, r9, #1
 8002e7e:	e7e8      	b.n	8002e52 <_printf_float+0x23e>
 8002e80:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	dc38      	bgt.n	8002ef8 <_printf_float+0x2e4>
 8002e86:	2301      	movs	r3, #1
 8002e88:	4631      	mov	r1, r6
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	4a19      	ldr	r2, [pc, #100]	@ (8002ef4 <_printf_float+0x2e0>)
 8002e8e:	47b8      	blx	r7
 8002e90:	3001      	adds	r0, #1
 8002e92:	f43f af1a 	beq.w	8002cca <_printf_float+0xb6>
 8002e96:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8002e9a:	ea59 0303 	orrs.w	r3, r9, r3
 8002e9e:	d102      	bne.n	8002ea6 <_printf_float+0x292>
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	07d9      	lsls	r1, r3, #31
 8002ea4:	d5d7      	bpl.n	8002e56 <_printf_float+0x242>
 8002ea6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002eaa:	4631      	mov	r1, r6
 8002eac:	4628      	mov	r0, r5
 8002eae:	47b8      	blx	r7
 8002eb0:	3001      	adds	r0, #1
 8002eb2:	f43f af0a 	beq.w	8002cca <_printf_float+0xb6>
 8002eb6:	f04f 0a00 	mov.w	sl, #0
 8002eba:	f104 0b1a 	add.w	fp, r4, #26
 8002ebe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ec0:	425b      	negs	r3, r3
 8002ec2:	4553      	cmp	r3, sl
 8002ec4:	dc01      	bgt.n	8002eca <_printf_float+0x2b6>
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	e793      	b.n	8002df2 <_printf_float+0x1de>
 8002eca:	2301      	movs	r3, #1
 8002ecc:	465a      	mov	r2, fp
 8002ece:	4631      	mov	r1, r6
 8002ed0:	4628      	mov	r0, r5
 8002ed2:	47b8      	blx	r7
 8002ed4:	3001      	adds	r0, #1
 8002ed6:	f43f aef8 	beq.w	8002cca <_printf_float+0xb6>
 8002eda:	f10a 0a01 	add.w	sl, sl, #1
 8002ede:	e7ee      	b.n	8002ebe <_printf_float+0x2aa>
 8002ee0:	7fefffff 	.word	0x7fefffff
 8002ee4:	080071c8 	.word	0x080071c8
 8002ee8:	080071cc 	.word	0x080071cc
 8002eec:	080071d0 	.word	0x080071d0
 8002ef0:	080071d4 	.word	0x080071d4
 8002ef4:	080071d8 	.word	0x080071d8
 8002ef8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002efa:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002efe:	4553      	cmp	r3, sl
 8002f00:	bfa8      	it	ge
 8002f02:	4653      	movge	r3, sl
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	4699      	mov	r9, r3
 8002f08:	dc36      	bgt.n	8002f78 <_printf_float+0x364>
 8002f0a:	f04f 0b00 	mov.w	fp, #0
 8002f0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f12:	f104 021a 	add.w	r2, r4, #26
 8002f16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002f18:	930a      	str	r3, [sp, #40]	@ 0x28
 8002f1a:	eba3 0309 	sub.w	r3, r3, r9
 8002f1e:	455b      	cmp	r3, fp
 8002f20:	dc31      	bgt.n	8002f86 <_printf_float+0x372>
 8002f22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002f24:	459a      	cmp	sl, r3
 8002f26:	dc3a      	bgt.n	8002f9e <_printf_float+0x38a>
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	07da      	lsls	r2, r3, #31
 8002f2c:	d437      	bmi.n	8002f9e <_printf_float+0x38a>
 8002f2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002f30:	ebaa 0903 	sub.w	r9, sl, r3
 8002f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002f36:	ebaa 0303 	sub.w	r3, sl, r3
 8002f3a:	4599      	cmp	r9, r3
 8002f3c:	bfa8      	it	ge
 8002f3e:	4699      	movge	r9, r3
 8002f40:	f1b9 0f00 	cmp.w	r9, #0
 8002f44:	dc33      	bgt.n	8002fae <_printf_float+0x39a>
 8002f46:	f04f 0800 	mov.w	r8, #0
 8002f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002f4e:	f104 0b1a 	add.w	fp, r4, #26
 8002f52:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002f54:	ebaa 0303 	sub.w	r3, sl, r3
 8002f58:	eba3 0309 	sub.w	r3, r3, r9
 8002f5c:	4543      	cmp	r3, r8
 8002f5e:	f77f af7a 	ble.w	8002e56 <_printf_float+0x242>
 8002f62:	2301      	movs	r3, #1
 8002f64:	465a      	mov	r2, fp
 8002f66:	4631      	mov	r1, r6
 8002f68:	4628      	mov	r0, r5
 8002f6a:	47b8      	blx	r7
 8002f6c:	3001      	adds	r0, #1
 8002f6e:	f43f aeac 	beq.w	8002cca <_printf_float+0xb6>
 8002f72:	f108 0801 	add.w	r8, r8, #1
 8002f76:	e7ec      	b.n	8002f52 <_printf_float+0x33e>
 8002f78:	4642      	mov	r2, r8
 8002f7a:	4631      	mov	r1, r6
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	47b8      	blx	r7
 8002f80:	3001      	adds	r0, #1
 8002f82:	d1c2      	bne.n	8002f0a <_printf_float+0x2f6>
 8002f84:	e6a1      	b.n	8002cca <_printf_float+0xb6>
 8002f86:	2301      	movs	r3, #1
 8002f88:	4631      	mov	r1, r6
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	920a      	str	r2, [sp, #40]	@ 0x28
 8002f8e:	47b8      	blx	r7
 8002f90:	3001      	adds	r0, #1
 8002f92:	f43f ae9a 	beq.w	8002cca <_printf_float+0xb6>
 8002f96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f98:	f10b 0b01 	add.w	fp, fp, #1
 8002f9c:	e7bb      	b.n	8002f16 <_printf_float+0x302>
 8002f9e:	4631      	mov	r1, r6
 8002fa0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002fa4:	4628      	mov	r0, r5
 8002fa6:	47b8      	blx	r7
 8002fa8:	3001      	adds	r0, #1
 8002faa:	d1c0      	bne.n	8002f2e <_printf_float+0x31a>
 8002fac:	e68d      	b.n	8002cca <_printf_float+0xb6>
 8002fae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002fb0:	464b      	mov	r3, r9
 8002fb2:	4631      	mov	r1, r6
 8002fb4:	4628      	mov	r0, r5
 8002fb6:	4442      	add	r2, r8
 8002fb8:	47b8      	blx	r7
 8002fba:	3001      	adds	r0, #1
 8002fbc:	d1c3      	bne.n	8002f46 <_printf_float+0x332>
 8002fbe:	e684      	b.n	8002cca <_printf_float+0xb6>
 8002fc0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8002fc4:	f1ba 0f01 	cmp.w	sl, #1
 8002fc8:	dc01      	bgt.n	8002fce <_printf_float+0x3ba>
 8002fca:	07db      	lsls	r3, r3, #31
 8002fcc:	d536      	bpl.n	800303c <_printf_float+0x428>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	4642      	mov	r2, r8
 8002fd2:	4631      	mov	r1, r6
 8002fd4:	4628      	mov	r0, r5
 8002fd6:	47b8      	blx	r7
 8002fd8:	3001      	adds	r0, #1
 8002fda:	f43f ae76 	beq.w	8002cca <_printf_float+0xb6>
 8002fde:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8002fe2:	4631      	mov	r1, r6
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	47b8      	blx	r7
 8002fe8:	3001      	adds	r0, #1
 8002fea:	f43f ae6e 	beq.w	8002cca <_printf_float+0xb6>
 8002fee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8002ffa:	f7fd fcd5 	bl	80009a8 <__aeabi_dcmpeq>
 8002ffe:	b9c0      	cbnz	r0, 8003032 <_printf_float+0x41e>
 8003000:	4653      	mov	r3, sl
 8003002:	f108 0201 	add.w	r2, r8, #1
 8003006:	4631      	mov	r1, r6
 8003008:	4628      	mov	r0, r5
 800300a:	47b8      	blx	r7
 800300c:	3001      	adds	r0, #1
 800300e:	d10c      	bne.n	800302a <_printf_float+0x416>
 8003010:	e65b      	b.n	8002cca <_printf_float+0xb6>
 8003012:	2301      	movs	r3, #1
 8003014:	465a      	mov	r2, fp
 8003016:	4631      	mov	r1, r6
 8003018:	4628      	mov	r0, r5
 800301a:	47b8      	blx	r7
 800301c:	3001      	adds	r0, #1
 800301e:	f43f ae54 	beq.w	8002cca <_printf_float+0xb6>
 8003022:	f108 0801 	add.w	r8, r8, #1
 8003026:	45d0      	cmp	r8, sl
 8003028:	dbf3      	blt.n	8003012 <_printf_float+0x3fe>
 800302a:	464b      	mov	r3, r9
 800302c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003030:	e6e0      	b.n	8002df4 <_printf_float+0x1e0>
 8003032:	f04f 0800 	mov.w	r8, #0
 8003036:	f104 0b1a 	add.w	fp, r4, #26
 800303a:	e7f4      	b.n	8003026 <_printf_float+0x412>
 800303c:	2301      	movs	r3, #1
 800303e:	4642      	mov	r2, r8
 8003040:	e7e1      	b.n	8003006 <_printf_float+0x3f2>
 8003042:	2301      	movs	r3, #1
 8003044:	464a      	mov	r2, r9
 8003046:	4631      	mov	r1, r6
 8003048:	4628      	mov	r0, r5
 800304a:	47b8      	blx	r7
 800304c:	3001      	adds	r0, #1
 800304e:	f43f ae3c 	beq.w	8002cca <_printf_float+0xb6>
 8003052:	f108 0801 	add.w	r8, r8, #1
 8003056:	68e3      	ldr	r3, [r4, #12]
 8003058:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800305a:	1a5b      	subs	r3, r3, r1
 800305c:	4543      	cmp	r3, r8
 800305e:	dcf0      	bgt.n	8003042 <_printf_float+0x42e>
 8003060:	e6fd      	b.n	8002e5e <_printf_float+0x24a>
 8003062:	f04f 0800 	mov.w	r8, #0
 8003066:	f104 0919 	add.w	r9, r4, #25
 800306a:	e7f4      	b.n	8003056 <_printf_float+0x442>

0800306c <_printf_common>:
 800306c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003070:	4616      	mov	r6, r2
 8003072:	4698      	mov	r8, r3
 8003074:	688a      	ldr	r2, [r1, #8]
 8003076:	690b      	ldr	r3, [r1, #16]
 8003078:	4607      	mov	r7, r0
 800307a:	4293      	cmp	r3, r2
 800307c:	bfb8      	it	lt
 800307e:	4613      	movlt	r3, r2
 8003080:	6033      	str	r3, [r6, #0]
 8003082:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003086:	460c      	mov	r4, r1
 8003088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800308c:	b10a      	cbz	r2, 8003092 <_printf_common+0x26>
 800308e:	3301      	adds	r3, #1
 8003090:	6033      	str	r3, [r6, #0]
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	0699      	lsls	r1, r3, #26
 8003096:	bf42      	ittt	mi
 8003098:	6833      	ldrmi	r3, [r6, #0]
 800309a:	3302      	addmi	r3, #2
 800309c:	6033      	strmi	r3, [r6, #0]
 800309e:	6825      	ldr	r5, [r4, #0]
 80030a0:	f015 0506 	ands.w	r5, r5, #6
 80030a4:	d106      	bne.n	80030b4 <_printf_common+0x48>
 80030a6:	f104 0a19 	add.w	sl, r4, #25
 80030aa:	68e3      	ldr	r3, [r4, #12]
 80030ac:	6832      	ldr	r2, [r6, #0]
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	42ab      	cmp	r3, r5
 80030b2:	dc2b      	bgt.n	800310c <_printf_common+0xa0>
 80030b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030b8:	6822      	ldr	r2, [r4, #0]
 80030ba:	3b00      	subs	r3, #0
 80030bc:	bf18      	it	ne
 80030be:	2301      	movne	r3, #1
 80030c0:	0692      	lsls	r2, r2, #26
 80030c2:	d430      	bmi.n	8003126 <_printf_common+0xba>
 80030c4:	4641      	mov	r1, r8
 80030c6:	4638      	mov	r0, r7
 80030c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030cc:	47c8      	blx	r9
 80030ce:	3001      	adds	r0, #1
 80030d0:	d023      	beq.n	800311a <_printf_common+0xae>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	6922      	ldr	r2, [r4, #16]
 80030d6:	f003 0306 	and.w	r3, r3, #6
 80030da:	2b04      	cmp	r3, #4
 80030dc:	bf14      	ite	ne
 80030de:	2500      	movne	r5, #0
 80030e0:	6833      	ldreq	r3, [r6, #0]
 80030e2:	f04f 0600 	mov.w	r6, #0
 80030e6:	bf08      	it	eq
 80030e8:	68e5      	ldreq	r5, [r4, #12]
 80030ea:	f104 041a 	add.w	r4, r4, #26
 80030ee:	bf08      	it	eq
 80030f0:	1aed      	subeq	r5, r5, r3
 80030f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030f6:	bf08      	it	eq
 80030f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030fc:	4293      	cmp	r3, r2
 80030fe:	bfc4      	itt	gt
 8003100:	1a9b      	subgt	r3, r3, r2
 8003102:	18ed      	addgt	r5, r5, r3
 8003104:	42b5      	cmp	r5, r6
 8003106:	d11a      	bne.n	800313e <_printf_common+0xd2>
 8003108:	2000      	movs	r0, #0
 800310a:	e008      	b.n	800311e <_printf_common+0xb2>
 800310c:	2301      	movs	r3, #1
 800310e:	4652      	mov	r2, sl
 8003110:	4641      	mov	r1, r8
 8003112:	4638      	mov	r0, r7
 8003114:	47c8      	blx	r9
 8003116:	3001      	adds	r0, #1
 8003118:	d103      	bne.n	8003122 <_printf_common+0xb6>
 800311a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800311e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003122:	3501      	adds	r5, #1
 8003124:	e7c1      	b.n	80030aa <_printf_common+0x3e>
 8003126:	2030      	movs	r0, #48	@ 0x30
 8003128:	18e1      	adds	r1, r4, r3
 800312a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003134:	4422      	add	r2, r4
 8003136:	3302      	adds	r3, #2
 8003138:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800313c:	e7c2      	b.n	80030c4 <_printf_common+0x58>
 800313e:	2301      	movs	r3, #1
 8003140:	4622      	mov	r2, r4
 8003142:	4641      	mov	r1, r8
 8003144:	4638      	mov	r0, r7
 8003146:	47c8      	blx	r9
 8003148:	3001      	adds	r0, #1
 800314a:	d0e6      	beq.n	800311a <_printf_common+0xae>
 800314c:	3601      	adds	r6, #1
 800314e:	e7d9      	b.n	8003104 <_printf_common+0x98>

08003150 <_printf_i>:
 8003150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003154:	7e0f      	ldrb	r7, [r1, #24]
 8003156:	4691      	mov	r9, r2
 8003158:	2f78      	cmp	r7, #120	@ 0x78
 800315a:	4680      	mov	r8, r0
 800315c:	460c      	mov	r4, r1
 800315e:	469a      	mov	sl, r3
 8003160:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003162:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003166:	d807      	bhi.n	8003178 <_printf_i+0x28>
 8003168:	2f62      	cmp	r7, #98	@ 0x62
 800316a:	d80a      	bhi.n	8003182 <_printf_i+0x32>
 800316c:	2f00      	cmp	r7, #0
 800316e:	f000 80d3 	beq.w	8003318 <_printf_i+0x1c8>
 8003172:	2f58      	cmp	r7, #88	@ 0x58
 8003174:	f000 80ba 	beq.w	80032ec <_printf_i+0x19c>
 8003178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800317c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003180:	e03a      	b.n	80031f8 <_printf_i+0xa8>
 8003182:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003186:	2b15      	cmp	r3, #21
 8003188:	d8f6      	bhi.n	8003178 <_printf_i+0x28>
 800318a:	a101      	add	r1, pc, #4	@ (adr r1, 8003190 <_printf_i+0x40>)
 800318c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003190:	080031e9 	.word	0x080031e9
 8003194:	080031fd 	.word	0x080031fd
 8003198:	08003179 	.word	0x08003179
 800319c:	08003179 	.word	0x08003179
 80031a0:	08003179 	.word	0x08003179
 80031a4:	08003179 	.word	0x08003179
 80031a8:	080031fd 	.word	0x080031fd
 80031ac:	08003179 	.word	0x08003179
 80031b0:	08003179 	.word	0x08003179
 80031b4:	08003179 	.word	0x08003179
 80031b8:	08003179 	.word	0x08003179
 80031bc:	080032ff 	.word	0x080032ff
 80031c0:	08003227 	.word	0x08003227
 80031c4:	080032b9 	.word	0x080032b9
 80031c8:	08003179 	.word	0x08003179
 80031cc:	08003179 	.word	0x08003179
 80031d0:	08003321 	.word	0x08003321
 80031d4:	08003179 	.word	0x08003179
 80031d8:	08003227 	.word	0x08003227
 80031dc:	08003179 	.word	0x08003179
 80031e0:	08003179 	.word	0x08003179
 80031e4:	080032c1 	.word	0x080032c1
 80031e8:	6833      	ldr	r3, [r6, #0]
 80031ea:	1d1a      	adds	r2, r3, #4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6032      	str	r2, [r6, #0]
 80031f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80031f8:	2301      	movs	r3, #1
 80031fa:	e09e      	b.n	800333a <_printf_i+0x1ea>
 80031fc:	6833      	ldr	r3, [r6, #0]
 80031fe:	6820      	ldr	r0, [r4, #0]
 8003200:	1d19      	adds	r1, r3, #4
 8003202:	6031      	str	r1, [r6, #0]
 8003204:	0606      	lsls	r6, r0, #24
 8003206:	d501      	bpl.n	800320c <_printf_i+0xbc>
 8003208:	681d      	ldr	r5, [r3, #0]
 800320a:	e003      	b.n	8003214 <_printf_i+0xc4>
 800320c:	0645      	lsls	r5, r0, #25
 800320e:	d5fb      	bpl.n	8003208 <_printf_i+0xb8>
 8003210:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003214:	2d00      	cmp	r5, #0
 8003216:	da03      	bge.n	8003220 <_printf_i+0xd0>
 8003218:	232d      	movs	r3, #45	@ 0x2d
 800321a:	426d      	negs	r5, r5
 800321c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003220:	230a      	movs	r3, #10
 8003222:	4859      	ldr	r0, [pc, #356]	@ (8003388 <_printf_i+0x238>)
 8003224:	e011      	b.n	800324a <_printf_i+0xfa>
 8003226:	6821      	ldr	r1, [r4, #0]
 8003228:	6833      	ldr	r3, [r6, #0]
 800322a:	0608      	lsls	r0, r1, #24
 800322c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003230:	d402      	bmi.n	8003238 <_printf_i+0xe8>
 8003232:	0649      	lsls	r1, r1, #25
 8003234:	bf48      	it	mi
 8003236:	b2ad      	uxthmi	r5, r5
 8003238:	2f6f      	cmp	r7, #111	@ 0x6f
 800323a:	6033      	str	r3, [r6, #0]
 800323c:	bf14      	ite	ne
 800323e:	230a      	movne	r3, #10
 8003240:	2308      	moveq	r3, #8
 8003242:	4851      	ldr	r0, [pc, #324]	@ (8003388 <_printf_i+0x238>)
 8003244:	2100      	movs	r1, #0
 8003246:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800324a:	6866      	ldr	r6, [r4, #4]
 800324c:	2e00      	cmp	r6, #0
 800324e:	bfa8      	it	ge
 8003250:	6821      	ldrge	r1, [r4, #0]
 8003252:	60a6      	str	r6, [r4, #8]
 8003254:	bfa4      	itt	ge
 8003256:	f021 0104 	bicge.w	r1, r1, #4
 800325a:	6021      	strge	r1, [r4, #0]
 800325c:	b90d      	cbnz	r5, 8003262 <_printf_i+0x112>
 800325e:	2e00      	cmp	r6, #0
 8003260:	d04b      	beq.n	80032fa <_printf_i+0x1aa>
 8003262:	4616      	mov	r6, r2
 8003264:	fbb5 f1f3 	udiv	r1, r5, r3
 8003268:	fb03 5711 	mls	r7, r3, r1, r5
 800326c:	5dc7      	ldrb	r7, [r0, r7]
 800326e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003272:	462f      	mov	r7, r5
 8003274:	42bb      	cmp	r3, r7
 8003276:	460d      	mov	r5, r1
 8003278:	d9f4      	bls.n	8003264 <_printf_i+0x114>
 800327a:	2b08      	cmp	r3, #8
 800327c:	d10b      	bne.n	8003296 <_printf_i+0x146>
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	07df      	lsls	r7, r3, #31
 8003282:	d508      	bpl.n	8003296 <_printf_i+0x146>
 8003284:	6923      	ldr	r3, [r4, #16]
 8003286:	6861      	ldr	r1, [r4, #4]
 8003288:	4299      	cmp	r1, r3
 800328a:	bfde      	ittt	le
 800328c:	2330      	movle	r3, #48	@ 0x30
 800328e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003292:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003296:	1b92      	subs	r2, r2, r6
 8003298:	6122      	str	r2, [r4, #16]
 800329a:	464b      	mov	r3, r9
 800329c:	4621      	mov	r1, r4
 800329e:	4640      	mov	r0, r8
 80032a0:	f8cd a000 	str.w	sl, [sp]
 80032a4:	aa03      	add	r2, sp, #12
 80032a6:	f7ff fee1 	bl	800306c <_printf_common>
 80032aa:	3001      	adds	r0, #1
 80032ac:	d14a      	bne.n	8003344 <_printf_i+0x1f4>
 80032ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80032b2:	b004      	add	sp, #16
 80032b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	f043 0320 	orr.w	r3, r3, #32
 80032be:	6023      	str	r3, [r4, #0]
 80032c0:	2778      	movs	r7, #120	@ 0x78
 80032c2:	4832      	ldr	r0, [pc, #200]	@ (800338c <_printf_i+0x23c>)
 80032c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	6831      	ldr	r1, [r6, #0]
 80032cc:	061f      	lsls	r7, r3, #24
 80032ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80032d2:	d402      	bmi.n	80032da <_printf_i+0x18a>
 80032d4:	065f      	lsls	r7, r3, #25
 80032d6:	bf48      	it	mi
 80032d8:	b2ad      	uxthmi	r5, r5
 80032da:	6031      	str	r1, [r6, #0]
 80032dc:	07d9      	lsls	r1, r3, #31
 80032de:	bf44      	itt	mi
 80032e0:	f043 0320 	orrmi.w	r3, r3, #32
 80032e4:	6023      	strmi	r3, [r4, #0]
 80032e6:	b11d      	cbz	r5, 80032f0 <_printf_i+0x1a0>
 80032e8:	2310      	movs	r3, #16
 80032ea:	e7ab      	b.n	8003244 <_printf_i+0xf4>
 80032ec:	4826      	ldr	r0, [pc, #152]	@ (8003388 <_printf_i+0x238>)
 80032ee:	e7e9      	b.n	80032c4 <_printf_i+0x174>
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	f023 0320 	bic.w	r3, r3, #32
 80032f6:	6023      	str	r3, [r4, #0]
 80032f8:	e7f6      	b.n	80032e8 <_printf_i+0x198>
 80032fa:	4616      	mov	r6, r2
 80032fc:	e7bd      	b.n	800327a <_printf_i+0x12a>
 80032fe:	6833      	ldr	r3, [r6, #0]
 8003300:	6825      	ldr	r5, [r4, #0]
 8003302:	1d18      	adds	r0, r3, #4
 8003304:	6961      	ldr	r1, [r4, #20]
 8003306:	6030      	str	r0, [r6, #0]
 8003308:	062e      	lsls	r6, r5, #24
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	d501      	bpl.n	8003312 <_printf_i+0x1c2>
 800330e:	6019      	str	r1, [r3, #0]
 8003310:	e002      	b.n	8003318 <_printf_i+0x1c8>
 8003312:	0668      	lsls	r0, r5, #25
 8003314:	d5fb      	bpl.n	800330e <_printf_i+0x1be>
 8003316:	8019      	strh	r1, [r3, #0]
 8003318:	2300      	movs	r3, #0
 800331a:	4616      	mov	r6, r2
 800331c:	6123      	str	r3, [r4, #16]
 800331e:	e7bc      	b.n	800329a <_printf_i+0x14a>
 8003320:	6833      	ldr	r3, [r6, #0]
 8003322:	2100      	movs	r1, #0
 8003324:	1d1a      	adds	r2, r3, #4
 8003326:	6032      	str	r2, [r6, #0]
 8003328:	681e      	ldr	r6, [r3, #0]
 800332a:	6862      	ldr	r2, [r4, #4]
 800332c:	4630      	mov	r0, r6
 800332e:	f000 fbe4 	bl	8003afa <memchr>
 8003332:	b108      	cbz	r0, 8003338 <_printf_i+0x1e8>
 8003334:	1b80      	subs	r0, r0, r6
 8003336:	6060      	str	r0, [r4, #4]
 8003338:	6863      	ldr	r3, [r4, #4]
 800333a:	6123      	str	r3, [r4, #16]
 800333c:	2300      	movs	r3, #0
 800333e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003342:	e7aa      	b.n	800329a <_printf_i+0x14a>
 8003344:	4632      	mov	r2, r6
 8003346:	4649      	mov	r1, r9
 8003348:	4640      	mov	r0, r8
 800334a:	6923      	ldr	r3, [r4, #16]
 800334c:	47d0      	blx	sl
 800334e:	3001      	adds	r0, #1
 8003350:	d0ad      	beq.n	80032ae <_printf_i+0x15e>
 8003352:	6823      	ldr	r3, [r4, #0]
 8003354:	079b      	lsls	r3, r3, #30
 8003356:	d413      	bmi.n	8003380 <_printf_i+0x230>
 8003358:	68e0      	ldr	r0, [r4, #12]
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	4298      	cmp	r0, r3
 800335e:	bfb8      	it	lt
 8003360:	4618      	movlt	r0, r3
 8003362:	e7a6      	b.n	80032b2 <_printf_i+0x162>
 8003364:	2301      	movs	r3, #1
 8003366:	4632      	mov	r2, r6
 8003368:	4649      	mov	r1, r9
 800336a:	4640      	mov	r0, r8
 800336c:	47d0      	blx	sl
 800336e:	3001      	adds	r0, #1
 8003370:	d09d      	beq.n	80032ae <_printf_i+0x15e>
 8003372:	3501      	adds	r5, #1
 8003374:	68e3      	ldr	r3, [r4, #12]
 8003376:	9903      	ldr	r1, [sp, #12]
 8003378:	1a5b      	subs	r3, r3, r1
 800337a:	42ab      	cmp	r3, r5
 800337c:	dcf2      	bgt.n	8003364 <_printf_i+0x214>
 800337e:	e7eb      	b.n	8003358 <_printf_i+0x208>
 8003380:	2500      	movs	r5, #0
 8003382:	f104 0619 	add.w	r6, r4, #25
 8003386:	e7f5      	b.n	8003374 <_printf_i+0x224>
 8003388:	080071da 	.word	0x080071da
 800338c:	080071eb 	.word	0x080071eb

08003390 <_scanf_float>:
 8003390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003394:	b087      	sub	sp, #28
 8003396:	9303      	str	r3, [sp, #12]
 8003398:	688b      	ldr	r3, [r1, #8]
 800339a:	4617      	mov	r7, r2
 800339c:	1e5a      	subs	r2, r3, #1
 800339e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80033a2:	bf82      	ittt	hi
 80033a4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80033a8:	eb03 0b05 	addhi.w	fp, r3, r5
 80033ac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80033b0:	460a      	mov	r2, r1
 80033b2:	f04f 0500 	mov.w	r5, #0
 80033b6:	bf88      	it	hi
 80033b8:	608b      	strhi	r3, [r1, #8]
 80033ba:	680b      	ldr	r3, [r1, #0]
 80033bc:	4680      	mov	r8, r0
 80033be:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80033c2:	f842 3b1c 	str.w	r3, [r2], #28
 80033c6:	460c      	mov	r4, r1
 80033c8:	bf98      	it	ls
 80033ca:	f04f 0b00 	movls.w	fp, #0
 80033ce:	4616      	mov	r6, r2
 80033d0:	46aa      	mov	sl, r5
 80033d2:	46a9      	mov	r9, r5
 80033d4:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80033d8:	9201      	str	r2, [sp, #4]
 80033da:	9502      	str	r5, [sp, #8]
 80033dc:	68a2      	ldr	r2, [r4, #8]
 80033de:	b152      	cbz	r2, 80033f6 <_scanf_float+0x66>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b4e      	cmp	r3, #78	@ 0x4e
 80033e6:	d865      	bhi.n	80034b4 <_scanf_float+0x124>
 80033e8:	2b40      	cmp	r3, #64	@ 0x40
 80033ea:	d83d      	bhi.n	8003468 <_scanf_float+0xd8>
 80033ec:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80033f0:	b2c8      	uxtb	r0, r1
 80033f2:	280e      	cmp	r0, #14
 80033f4:	d93b      	bls.n	800346e <_scanf_float+0xde>
 80033f6:	f1b9 0f00 	cmp.w	r9, #0
 80033fa:	d003      	beq.n	8003404 <_scanf_float+0x74>
 80033fc:	6823      	ldr	r3, [r4, #0]
 80033fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003402:	6023      	str	r3, [r4, #0]
 8003404:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003408:	f1ba 0f01 	cmp.w	sl, #1
 800340c:	f200 8118 	bhi.w	8003640 <_scanf_float+0x2b0>
 8003410:	9b01      	ldr	r3, [sp, #4]
 8003412:	429e      	cmp	r6, r3
 8003414:	f200 8109 	bhi.w	800362a <_scanf_float+0x29a>
 8003418:	2001      	movs	r0, #1
 800341a:	b007      	add	sp, #28
 800341c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003420:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003424:	2a0d      	cmp	r2, #13
 8003426:	d8e6      	bhi.n	80033f6 <_scanf_float+0x66>
 8003428:	a101      	add	r1, pc, #4	@ (adr r1, 8003430 <_scanf_float+0xa0>)
 800342a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800342e:	bf00      	nop
 8003430:	08003577 	.word	0x08003577
 8003434:	080033f7 	.word	0x080033f7
 8003438:	080033f7 	.word	0x080033f7
 800343c:	080033f7 	.word	0x080033f7
 8003440:	080035d7 	.word	0x080035d7
 8003444:	080035af 	.word	0x080035af
 8003448:	080033f7 	.word	0x080033f7
 800344c:	080033f7 	.word	0x080033f7
 8003450:	08003585 	.word	0x08003585
 8003454:	080033f7 	.word	0x080033f7
 8003458:	080033f7 	.word	0x080033f7
 800345c:	080033f7 	.word	0x080033f7
 8003460:	080033f7 	.word	0x080033f7
 8003464:	0800353d 	.word	0x0800353d
 8003468:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800346c:	e7da      	b.n	8003424 <_scanf_float+0x94>
 800346e:	290e      	cmp	r1, #14
 8003470:	d8c1      	bhi.n	80033f6 <_scanf_float+0x66>
 8003472:	a001      	add	r0, pc, #4	@ (adr r0, 8003478 <_scanf_float+0xe8>)
 8003474:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003478:	0800352d 	.word	0x0800352d
 800347c:	080033f7 	.word	0x080033f7
 8003480:	0800352d 	.word	0x0800352d
 8003484:	080035c3 	.word	0x080035c3
 8003488:	080033f7 	.word	0x080033f7
 800348c:	080034d5 	.word	0x080034d5
 8003490:	08003513 	.word	0x08003513
 8003494:	08003513 	.word	0x08003513
 8003498:	08003513 	.word	0x08003513
 800349c:	08003513 	.word	0x08003513
 80034a0:	08003513 	.word	0x08003513
 80034a4:	08003513 	.word	0x08003513
 80034a8:	08003513 	.word	0x08003513
 80034ac:	08003513 	.word	0x08003513
 80034b0:	08003513 	.word	0x08003513
 80034b4:	2b6e      	cmp	r3, #110	@ 0x6e
 80034b6:	d809      	bhi.n	80034cc <_scanf_float+0x13c>
 80034b8:	2b60      	cmp	r3, #96	@ 0x60
 80034ba:	d8b1      	bhi.n	8003420 <_scanf_float+0x90>
 80034bc:	2b54      	cmp	r3, #84	@ 0x54
 80034be:	d07b      	beq.n	80035b8 <_scanf_float+0x228>
 80034c0:	2b59      	cmp	r3, #89	@ 0x59
 80034c2:	d198      	bne.n	80033f6 <_scanf_float+0x66>
 80034c4:	2d07      	cmp	r5, #7
 80034c6:	d196      	bne.n	80033f6 <_scanf_float+0x66>
 80034c8:	2508      	movs	r5, #8
 80034ca:	e02c      	b.n	8003526 <_scanf_float+0x196>
 80034cc:	2b74      	cmp	r3, #116	@ 0x74
 80034ce:	d073      	beq.n	80035b8 <_scanf_float+0x228>
 80034d0:	2b79      	cmp	r3, #121	@ 0x79
 80034d2:	e7f6      	b.n	80034c2 <_scanf_float+0x132>
 80034d4:	6821      	ldr	r1, [r4, #0]
 80034d6:	05c8      	lsls	r0, r1, #23
 80034d8:	d51b      	bpl.n	8003512 <_scanf_float+0x182>
 80034da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80034de:	6021      	str	r1, [r4, #0]
 80034e0:	f109 0901 	add.w	r9, r9, #1
 80034e4:	f1bb 0f00 	cmp.w	fp, #0
 80034e8:	d003      	beq.n	80034f2 <_scanf_float+0x162>
 80034ea:	3201      	adds	r2, #1
 80034ec:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80034f0:	60a2      	str	r2, [r4, #8]
 80034f2:	68a3      	ldr	r3, [r4, #8]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	60a3      	str	r3, [r4, #8]
 80034f8:	6923      	ldr	r3, [r4, #16]
 80034fa:	3301      	adds	r3, #1
 80034fc:	6123      	str	r3, [r4, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3b01      	subs	r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	f340 8087 	ble.w	8003618 <_scanf_float+0x288>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	3301      	adds	r3, #1
 800350e:	603b      	str	r3, [r7, #0]
 8003510:	e764      	b.n	80033dc <_scanf_float+0x4c>
 8003512:	eb1a 0105 	adds.w	r1, sl, r5
 8003516:	f47f af6e 	bne.w	80033f6 <_scanf_float+0x66>
 800351a:	460d      	mov	r5, r1
 800351c:	468a      	mov	sl, r1
 800351e:	6822      	ldr	r2, [r4, #0]
 8003520:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003524:	6022      	str	r2, [r4, #0]
 8003526:	f806 3b01 	strb.w	r3, [r6], #1
 800352a:	e7e2      	b.n	80034f2 <_scanf_float+0x162>
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	0610      	lsls	r0, r2, #24
 8003530:	f57f af61 	bpl.w	80033f6 <_scanf_float+0x66>
 8003534:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003538:	6022      	str	r2, [r4, #0]
 800353a:	e7f4      	b.n	8003526 <_scanf_float+0x196>
 800353c:	f1ba 0f00 	cmp.w	sl, #0
 8003540:	d10e      	bne.n	8003560 <_scanf_float+0x1d0>
 8003542:	f1b9 0f00 	cmp.w	r9, #0
 8003546:	d10e      	bne.n	8003566 <_scanf_float+0x1d6>
 8003548:	6822      	ldr	r2, [r4, #0]
 800354a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800354e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003552:	d108      	bne.n	8003566 <_scanf_float+0x1d6>
 8003554:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003558:	f04f 0a01 	mov.w	sl, #1
 800355c:	6022      	str	r2, [r4, #0]
 800355e:	e7e2      	b.n	8003526 <_scanf_float+0x196>
 8003560:	f1ba 0f02 	cmp.w	sl, #2
 8003564:	d055      	beq.n	8003612 <_scanf_float+0x282>
 8003566:	2d01      	cmp	r5, #1
 8003568:	d002      	beq.n	8003570 <_scanf_float+0x1e0>
 800356a:	2d04      	cmp	r5, #4
 800356c:	f47f af43 	bne.w	80033f6 <_scanf_float+0x66>
 8003570:	3501      	adds	r5, #1
 8003572:	b2ed      	uxtb	r5, r5
 8003574:	e7d7      	b.n	8003526 <_scanf_float+0x196>
 8003576:	f1ba 0f01 	cmp.w	sl, #1
 800357a:	f47f af3c 	bne.w	80033f6 <_scanf_float+0x66>
 800357e:	f04f 0a02 	mov.w	sl, #2
 8003582:	e7d0      	b.n	8003526 <_scanf_float+0x196>
 8003584:	b97d      	cbnz	r5, 80035a6 <_scanf_float+0x216>
 8003586:	f1b9 0f00 	cmp.w	r9, #0
 800358a:	f47f af37 	bne.w	80033fc <_scanf_float+0x6c>
 800358e:	6822      	ldr	r2, [r4, #0]
 8003590:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003594:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003598:	f040 8103 	bne.w	80037a2 <_scanf_float+0x412>
 800359c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80035a0:	2501      	movs	r5, #1
 80035a2:	6022      	str	r2, [r4, #0]
 80035a4:	e7bf      	b.n	8003526 <_scanf_float+0x196>
 80035a6:	2d03      	cmp	r5, #3
 80035a8:	d0e2      	beq.n	8003570 <_scanf_float+0x1e0>
 80035aa:	2d05      	cmp	r5, #5
 80035ac:	e7de      	b.n	800356c <_scanf_float+0x1dc>
 80035ae:	2d02      	cmp	r5, #2
 80035b0:	f47f af21 	bne.w	80033f6 <_scanf_float+0x66>
 80035b4:	2503      	movs	r5, #3
 80035b6:	e7b6      	b.n	8003526 <_scanf_float+0x196>
 80035b8:	2d06      	cmp	r5, #6
 80035ba:	f47f af1c 	bne.w	80033f6 <_scanf_float+0x66>
 80035be:	2507      	movs	r5, #7
 80035c0:	e7b1      	b.n	8003526 <_scanf_float+0x196>
 80035c2:	6822      	ldr	r2, [r4, #0]
 80035c4:	0591      	lsls	r1, r2, #22
 80035c6:	f57f af16 	bpl.w	80033f6 <_scanf_float+0x66>
 80035ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80035ce:	6022      	str	r2, [r4, #0]
 80035d0:	f8cd 9008 	str.w	r9, [sp, #8]
 80035d4:	e7a7      	b.n	8003526 <_scanf_float+0x196>
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80035dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80035e0:	d006      	beq.n	80035f0 <_scanf_float+0x260>
 80035e2:	0550      	lsls	r0, r2, #21
 80035e4:	f57f af07 	bpl.w	80033f6 <_scanf_float+0x66>
 80035e8:	f1b9 0f00 	cmp.w	r9, #0
 80035ec:	f000 80d9 	beq.w	80037a2 <_scanf_float+0x412>
 80035f0:	0591      	lsls	r1, r2, #22
 80035f2:	bf58      	it	pl
 80035f4:	9902      	ldrpl	r1, [sp, #8]
 80035f6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80035fa:	bf58      	it	pl
 80035fc:	eba9 0101 	subpl.w	r1, r9, r1
 8003600:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8003604:	f04f 0900 	mov.w	r9, #0
 8003608:	bf58      	it	pl
 800360a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800360e:	6022      	str	r2, [r4, #0]
 8003610:	e789      	b.n	8003526 <_scanf_float+0x196>
 8003612:	f04f 0a03 	mov.w	sl, #3
 8003616:	e786      	b.n	8003526 <_scanf_float+0x196>
 8003618:	4639      	mov	r1, r7
 800361a:	4640      	mov	r0, r8
 800361c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8003620:	4798      	blx	r3
 8003622:	2800      	cmp	r0, #0
 8003624:	f43f aeda 	beq.w	80033dc <_scanf_float+0x4c>
 8003628:	e6e5      	b.n	80033f6 <_scanf_float+0x66>
 800362a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800362e:	463a      	mov	r2, r7
 8003630:	4640      	mov	r0, r8
 8003632:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003636:	4798      	blx	r3
 8003638:	6923      	ldr	r3, [r4, #16]
 800363a:	3b01      	subs	r3, #1
 800363c:	6123      	str	r3, [r4, #16]
 800363e:	e6e7      	b.n	8003410 <_scanf_float+0x80>
 8003640:	1e6b      	subs	r3, r5, #1
 8003642:	2b06      	cmp	r3, #6
 8003644:	d824      	bhi.n	8003690 <_scanf_float+0x300>
 8003646:	2d02      	cmp	r5, #2
 8003648:	d836      	bhi.n	80036b8 <_scanf_float+0x328>
 800364a:	9b01      	ldr	r3, [sp, #4]
 800364c:	429e      	cmp	r6, r3
 800364e:	f67f aee3 	bls.w	8003418 <_scanf_float+0x88>
 8003652:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003656:	463a      	mov	r2, r7
 8003658:	4640      	mov	r0, r8
 800365a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800365e:	4798      	blx	r3
 8003660:	6923      	ldr	r3, [r4, #16]
 8003662:	3b01      	subs	r3, #1
 8003664:	6123      	str	r3, [r4, #16]
 8003666:	e7f0      	b.n	800364a <_scanf_float+0x2ba>
 8003668:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800366c:	463a      	mov	r2, r7
 800366e:	4640      	mov	r0, r8
 8003670:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003674:	4798      	blx	r3
 8003676:	6923      	ldr	r3, [r4, #16]
 8003678:	3b01      	subs	r3, #1
 800367a:	6123      	str	r3, [r4, #16]
 800367c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8003680:	fa5f fa8a 	uxtb.w	sl, sl
 8003684:	f1ba 0f02 	cmp.w	sl, #2
 8003688:	d1ee      	bne.n	8003668 <_scanf_float+0x2d8>
 800368a:	3d03      	subs	r5, #3
 800368c:	b2ed      	uxtb	r5, r5
 800368e:	1b76      	subs	r6, r6, r5
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	05da      	lsls	r2, r3, #23
 8003694:	d530      	bpl.n	80036f8 <_scanf_float+0x368>
 8003696:	055b      	lsls	r3, r3, #21
 8003698:	d511      	bpl.n	80036be <_scanf_float+0x32e>
 800369a:	9b01      	ldr	r3, [sp, #4]
 800369c:	429e      	cmp	r6, r3
 800369e:	f67f aebb 	bls.w	8003418 <_scanf_float+0x88>
 80036a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80036a6:	463a      	mov	r2, r7
 80036a8:	4640      	mov	r0, r8
 80036aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80036ae:	4798      	blx	r3
 80036b0:	6923      	ldr	r3, [r4, #16]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	6123      	str	r3, [r4, #16]
 80036b6:	e7f0      	b.n	800369a <_scanf_float+0x30a>
 80036b8:	46aa      	mov	sl, r5
 80036ba:	46b3      	mov	fp, r6
 80036bc:	e7de      	b.n	800367c <_scanf_float+0x2ec>
 80036be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80036c2:	6923      	ldr	r3, [r4, #16]
 80036c4:	2965      	cmp	r1, #101	@ 0x65
 80036c6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80036ca:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80036ce:	6123      	str	r3, [r4, #16]
 80036d0:	d00c      	beq.n	80036ec <_scanf_float+0x35c>
 80036d2:	2945      	cmp	r1, #69	@ 0x45
 80036d4:	d00a      	beq.n	80036ec <_scanf_float+0x35c>
 80036d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80036da:	463a      	mov	r2, r7
 80036dc:	4640      	mov	r0, r8
 80036de:	4798      	blx	r3
 80036e0:	6923      	ldr	r3, [r4, #16]
 80036e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	1eb5      	subs	r5, r6, #2
 80036ea:	6123      	str	r3, [r4, #16]
 80036ec:	463a      	mov	r2, r7
 80036ee:	4640      	mov	r0, r8
 80036f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80036f4:	4798      	blx	r3
 80036f6:	462e      	mov	r6, r5
 80036f8:	6822      	ldr	r2, [r4, #0]
 80036fa:	f012 0210 	ands.w	r2, r2, #16
 80036fe:	d001      	beq.n	8003704 <_scanf_float+0x374>
 8003700:	2000      	movs	r0, #0
 8003702:	e68a      	b.n	800341a <_scanf_float+0x8a>
 8003704:	7032      	strb	r2, [r6, #0]
 8003706:	6823      	ldr	r3, [r4, #0]
 8003708:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800370c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003710:	d11c      	bne.n	800374c <_scanf_float+0x3bc>
 8003712:	9b02      	ldr	r3, [sp, #8]
 8003714:	454b      	cmp	r3, r9
 8003716:	eba3 0209 	sub.w	r2, r3, r9
 800371a:	d123      	bne.n	8003764 <_scanf_float+0x3d4>
 800371c:	2200      	movs	r2, #0
 800371e:	4640      	mov	r0, r8
 8003720:	9901      	ldr	r1, [sp, #4]
 8003722:	f002 fbed 	bl	8005f00 <_strtod_r>
 8003726:	9b03      	ldr	r3, [sp, #12]
 8003728:	6825      	ldr	r5, [r4, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f015 0f02 	tst.w	r5, #2
 8003730:	4606      	mov	r6, r0
 8003732:	460f      	mov	r7, r1
 8003734:	f103 0204 	add.w	r2, r3, #4
 8003738:	d01f      	beq.n	800377a <_scanf_float+0x3ea>
 800373a:	9903      	ldr	r1, [sp, #12]
 800373c:	600a      	str	r2, [r1, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	e9c3 6700 	strd	r6, r7, [r3]
 8003744:	68e3      	ldr	r3, [r4, #12]
 8003746:	3301      	adds	r3, #1
 8003748:	60e3      	str	r3, [r4, #12]
 800374a:	e7d9      	b.n	8003700 <_scanf_float+0x370>
 800374c:	9b04      	ldr	r3, [sp, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0e4      	beq.n	800371c <_scanf_float+0x38c>
 8003752:	9905      	ldr	r1, [sp, #20]
 8003754:	230a      	movs	r3, #10
 8003756:	4640      	mov	r0, r8
 8003758:	3101      	adds	r1, #1
 800375a:	f002 fc51 	bl	8006000 <_strtol_r>
 800375e:	9b04      	ldr	r3, [sp, #16]
 8003760:	9e05      	ldr	r6, [sp, #20]
 8003762:	1ac2      	subs	r2, r0, r3
 8003764:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8003768:	429e      	cmp	r6, r3
 800376a:	bf28      	it	cs
 800376c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8003770:	4630      	mov	r0, r6
 8003772:	490d      	ldr	r1, [pc, #52]	@ (80037a8 <_scanf_float+0x418>)
 8003774:	f000 f8de 	bl	8003934 <siprintf>
 8003778:	e7d0      	b.n	800371c <_scanf_float+0x38c>
 800377a:	076d      	lsls	r5, r5, #29
 800377c:	d4dd      	bmi.n	800373a <_scanf_float+0x3aa>
 800377e:	9d03      	ldr	r5, [sp, #12]
 8003780:	602a      	str	r2, [r5, #0]
 8003782:	681d      	ldr	r5, [r3, #0]
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	f7fd f940 	bl	8000a0c <__aeabi_dcmpun>
 800378c:	b120      	cbz	r0, 8003798 <_scanf_float+0x408>
 800378e:	4807      	ldr	r0, [pc, #28]	@ (80037ac <_scanf_float+0x41c>)
 8003790:	f000 f9c2 	bl	8003b18 <nanf>
 8003794:	6028      	str	r0, [r5, #0]
 8003796:	e7d5      	b.n	8003744 <_scanf_float+0x3b4>
 8003798:	4630      	mov	r0, r6
 800379a:	4639      	mov	r1, r7
 800379c:	f7fd f994 	bl	8000ac8 <__aeabi_d2f>
 80037a0:	e7f8      	b.n	8003794 <_scanf_float+0x404>
 80037a2:	f04f 0900 	mov.w	r9, #0
 80037a6:	e62d      	b.n	8003404 <_scanf_float+0x74>
 80037a8:	080071fc 	.word	0x080071fc
 80037ac:	08007595 	.word	0x08007595

080037b0 <std>:
 80037b0:	2300      	movs	r3, #0
 80037b2:	b510      	push	{r4, lr}
 80037b4:	4604      	mov	r4, r0
 80037b6:	e9c0 3300 	strd	r3, r3, [r0]
 80037ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037be:	6083      	str	r3, [r0, #8]
 80037c0:	8181      	strh	r1, [r0, #12]
 80037c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80037c4:	81c2      	strh	r2, [r0, #14]
 80037c6:	6183      	str	r3, [r0, #24]
 80037c8:	4619      	mov	r1, r3
 80037ca:	2208      	movs	r2, #8
 80037cc:	305c      	adds	r0, #92	@ 0x5c
 80037ce:	f000 f914 	bl	80039fa <memset>
 80037d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003808 <std+0x58>)
 80037d4:	6224      	str	r4, [r4, #32]
 80037d6:	6263      	str	r3, [r4, #36]	@ 0x24
 80037d8:	4b0c      	ldr	r3, [pc, #48]	@ (800380c <std+0x5c>)
 80037da:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003810 <std+0x60>)
 80037de:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80037e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003814 <std+0x64>)
 80037e2:	6323      	str	r3, [r4, #48]	@ 0x30
 80037e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003818 <std+0x68>)
 80037e6:	429c      	cmp	r4, r3
 80037e8:	d006      	beq.n	80037f8 <std+0x48>
 80037ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80037ee:	4294      	cmp	r4, r2
 80037f0:	d002      	beq.n	80037f8 <std+0x48>
 80037f2:	33d0      	adds	r3, #208	@ 0xd0
 80037f4:	429c      	cmp	r4, r3
 80037f6:	d105      	bne.n	8003804 <std+0x54>
 80037f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003800:	f000 b978 	b.w	8003af4 <__retarget_lock_init_recursive>
 8003804:	bd10      	pop	{r4, pc}
 8003806:	bf00      	nop
 8003808:	08003975 	.word	0x08003975
 800380c:	08003997 	.word	0x08003997
 8003810:	080039cf 	.word	0x080039cf
 8003814:	080039f3 	.word	0x080039f3
 8003818:	200002d0 	.word	0x200002d0

0800381c <stdio_exit_handler>:
 800381c:	4a02      	ldr	r2, [pc, #8]	@ (8003828 <stdio_exit_handler+0xc>)
 800381e:	4903      	ldr	r1, [pc, #12]	@ (800382c <stdio_exit_handler+0x10>)
 8003820:	4803      	ldr	r0, [pc, #12]	@ (8003830 <stdio_exit_handler+0x14>)
 8003822:	f000 b869 	b.w	80038f8 <_fwalk_sglue>
 8003826:	bf00      	nop
 8003828:	2000000c 	.word	0x2000000c
 800382c:	080063b5 	.word	0x080063b5
 8003830:	2000001c 	.word	0x2000001c

08003834 <cleanup_stdio>:
 8003834:	6841      	ldr	r1, [r0, #4]
 8003836:	4b0c      	ldr	r3, [pc, #48]	@ (8003868 <cleanup_stdio+0x34>)
 8003838:	b510      	push	{r4, lr}
 800383a:	4299      	cmp	r1, r3
 800383c:	4604      	mov	r4, r0
 800383e:	d001      	beq.n	8003844 <cleanup_stdio+0x10>
 8003840:	f002 fdb8 	bl	80063b4 <_fflush_r>
 8003844:	68a1      	ldr	r1, [r4, #8]
 8003846:	4b09      	ldr	r3, [pc, #36]	@ (800386c <cleanup_stdio+0x38>)
 8003848:	4299      	cmp	r1, r3
 800384a:	d002      	beq.n	8003852 <cleanup_stdio+0x1e>
 800384c:	4620      	mov	r0, r4
 800384e:	f002 fdb1 	bl	80063b4 <_fflush_r>
 8003852:	68e1      	ldr	r1, [r4, #12]
 8003854:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <cleanup_stdio+0x3c>)
 8003856:	4299      	cmp	r1, r3
 8003858:	d004      	beq.n	8003864 <cleanup_stdio+0x30>
 800385a:	4620      	mov	r0, r4
 800385c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003860:	f002 bda8 	b.w	80063b4 <_fflush_r>
 8003864:	bd10      	pop	{r4, pc}
 8003866:	bf00      	nop
 8003868:	200002d0 	.word	0x200002d0
 800386c:	20000338 	.word	0x20000338
 8003870:	200003a0 	.word	0x200003a0

08003874 <global_stdio_init.part.0>:
 8003874:	b510      	push	{r4, lr}
 8003876:	4b0b      	ldr	r3, [pc, #44]	@ (80038a4 <global_stdio_init.part.0+0x30>)
 8003878:	4c0b      	ldr	r4, [pc, #44]	@ (80038a8 <global_stdio_init.part.0+0x34>)
 800387a:	4a0c      	ldr	r2, [pc, #48]	@ (80038ac <global_stdio_init.part.0+0x38>)
 800387c:	4620      	mov	r0, r4
 800387e:	601a      	str	r2, [r3, #0]
 8003880:	2104      	movs	r1, #4
 8003882:	2200      	movs	r2, #0
 8003884:	f7ff ff94 	bl	80037b0 <std>
 8003888:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800388c:	2201      	movs	r2, #1
 800388e:	2109      	movs	r1, #9
 8003890:	f7ff ff8e 	bl	80037b0 <std>
 8003894:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003898:	2202      	movs	r2, #2
 800389a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800389e:	2112      	movs	r1, #18
 80038a0:	f7ff bf86 	b.w	80037b0 <std>
 80038a4:	20000408 	.word	0x20000408
 80038a8:	200002d0 	.word	0x200002d0
 80038ac:	0800381d 	.word	0x0800381d

080038b0 <__sfp_lock_acquire>:
 80038b0:	4801      	ldr	r0, [pc, #4]	@ (80038b8 <__sfp_lock_acquire+0x8>)
 80038b2:	f000 b920 	b.w	8003af6 <__retarget_lock_acquire_recursive>
 80038b6:	bf00      	nop
 80038b8:	20000411 	.word	0x20000411

080038bc <__sfp_lock_release>:
 80038bc:	4801      	ldr	r0, [pc, #4]	@ (80038c4 <__sfp_lock_release+0x8>)
 80038be:	f000 b91b 	b.w	8003af8 <__retarget_lock_release_recursive>
 80038c2:	bf00      	nop
 80038c4:	20000411 	.word	0x20000411

080038c8 <__sinit>:
 80038c8:	b510      	push	{r4, lr}
 80038ca:	4604      	mov	r4, r0
 80038cc:	f7ff fff0 	bl	80038b0 <__sfp_lock_acquire>
 80038d0:	6a23      	ldr	r3, [r4, #32]
 80038d2:	b11b      	cbz	r3, 80038dc <__sinit+0x14>
 80038d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038d8:	f7ff bff0 	b.w	80038bc <__sfp_lock_release>
 80038dc:	4b04      	ldr	r3, [pc, #16]	@ (80038f0 <__sinit+0x28>)
 80038de:	6223      	str	r3, [r4, #32]
 80038e0:	4b04      	ldr	r3, [pc, #16]	@ (80038f4 <__sinit+0x2c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f5      	bne.n	80038d4 <__sinit+0xc>
 80038e8:	f7ff ffc4 	bl	8003874 <global_stdio_init.part.0>
 80038ec:	e7f2      	b.n	80038d4 <__sinit+0xc>
 80038ee:	bf00      	nop
 80038f0:	08003835 	.word	0x08003835
 80038f4:	20000408 	.word	0x20000408

080038f8 <_fwalk_sglue>:
 80038f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038fc:	4607      	mov	r7, r0
 80038fe:	4688      	mov	r8, r1
 8003900:	4614      	mov	r4, r2
 8003902:	2600      	movs	r6, #0
 8003904:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003908:	f1b9 0901 	subs.w	r9, r9, #1
 800390c:	d505      	bpl.n	800391a <_fwalk_sglue+0x22>
 800390e:	6824      	ldr	r4, [r4, #0]
 8003910:	2c00      	cmp	r4, #0
 8003912:	d1f7      	bne.n	8003904 <_fwalk_sglue+0xc>
 8003914:	4630      	mov	r0, r6
 8003916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800391a:	89ab      	ldrh	r3, [r5, #12]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d907      	bls.n	8003930 <_fwalk_sglue+0x38>
 8003920:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003924:	3301      	adds	r3, #1
 8003926:	d003      	beq.n	8003930 <_fwalk_sglue+0x38>
 8003928:	4629      	mov	r1, r5
 800392a:	4638      	mov	r0, r7
 800392c:	47c0      	blx	r8
 800392e:	4306      	orrs	r6, r0
 8003930:	3568      	adds	r5, #104	@ 0x68
 8003932:	e7e9      	b.n	8003908 <_fwalk_sglue+0x10>

08003934 <siprintf>:
 8003934:	b40e      	push	{r1, r2, r3}
 8003936:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800393a:	b500      	push	{lr}
 800393c:	b09c      	sub	sp, #112	@ 0x70
 800393e:	ab1d      	add	r3, sp, #116	@ 0x74
 8003940:	9002      	str	r0, [sp, #8]
 8003942:	9006      	str	r0, [sp, #24]
 8003944:	9107      	str	r1, [sp, #28]
 8003946:	9104      	str	r1, [sp, #16]
 8003948:	4808      	ldr	r0, [pc, #32]	@ (800396c <siprintf+0x38>)
 800394a:	4909      	ldr	r1, [pc, #36]	@ (8003970 <siprintf+0x3c>)
 800394c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003950:	9105      	str	r1, [sp, #20]
 8003952:	6800      	ldr	r0, [r0, #0]
 8003954:	a902      	add	r1, sp, #8
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	f002 fbb0 	bl	80060bc <_svfiprintf_r>
 800395c:	2200      	movs	r2, #0
 800395e:	9b02      	ldr	r3, [sp, #8]
 8003960:	701a      	strb	r2, [r3, #0]
 8003962:	b01c      	add	sp, #112	@ 0x70
 8003964:	f85d eb04 	ldr.w	lr, [sp], #4
 8003968:	b003      	add	sp, #12
 800396a:	4770      	bx	lr
 800396c:	20000018 	.word	0x20000018
 8003970:	ffff0208 	.word	0xffff0208

08003974 <__sread>:
 8003974:	b510      	push	{r4, lr}
 8003976:	460c      	mov	r4, r1
 8003978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397c:	f000 f86c 	bl	8003a58 <_read_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	bfab      	itete	ge
 8003984:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003986:	89a3      	ldrhlt	r3, [r4, #12]
 8003988:	181b      	addge	r3, r3, r0
 800398a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800398e:	bfac      	ite	ge
 8003990:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003992:	81a3      	strhlt	r3, [r4, #12]
 8003994:	bd10      	pop	{r4, pc}

08003996 <__swrite>:
 8003996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800399a:	461f      	mov	r7, r3
 800399c:	898b      	ldrh	r3, [r1, #12]
 800399e:	4605      	mov	r5, r0
 80039a0:	05db      	lsls	r3, r3, #23
 80039a2:	460c      	mov	r4, r1
 80039a4:	4616      	mov	r6, r2
 80039a6:	d505      	bpl.n	80039b4 <__swrite+0x1e>
 80039a8:	2302      	movs	r3, #2
 80039aa:	2200      	movs	r2, #0
 80039ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b0:	f000 f840 	bl	8003a34 <_lseek_r>
 80039b4:	89a3      	ldrh	r3, [r4, #12]
 80039b6:	4632      	mov	r2, r6
 80039b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80039bc:	81a3      	strh	r3, [r4, #12]
 80039be:	4628      	mov	r0, r5
 80039c0:	463b      	mov	r3, r7
 80039c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ca:	f000 b857 	b.w	8003a7c <_write_r>

080039ce <__sseek>:
 80039ce:	b510      	push	{r4, lr}
 80039d0:	460c      	mov	r4, r1
 80039d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d6:	f000 f82d 	bl	8003a34 <_lseek_r>
 80039da:	1c43      	adds	r3, r0, #1
 80039dc:	89a3      	ldrh	r3, [r4, #12]
 80039de:	bf15      	itete	ne
 80039e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80039e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80039e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80039ea:	81a3      	strheq	r3, [r4, #12]
 80039ec:	bf18      	it	ne
 80039ee:	81a3      	strhne	r3, [r4, #12]
 80039f0:	bd10      	pop	{r4, pc}

080039f2 <__sclose>:
 80039f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f6:	f000 b80d 	b.w	8003a14 <_close_r>

080039fa <memset>:
 80039fa:	4603      	mov	r3, r0
 80039fc:	4402      	add	r2, r0
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d100      	bne.n	8003a04 <memset+0xa>
 8003a02:	4770      	bx	lr
 8003a04:	f803 1b01 	strb.w	r1, [r3], #1
 8003a08:	e7f9      	b.n	80039fe <memset+0x4>
	...

08003a0c <_localeconv_r>:
 8003a0c:	4800      	ldr	r0, [pc, #0]	@ (8003a10 <_localeconv_r+0x4>)
 8003a0e:	4770      	bx	lr
 8003a10:	20000158 	.word	0x20000158

08003a14 <_close_r>:
 8003a14:	b538      	push	{r3, r4, r5, lr}
 8003a16:	2300      	movs	r3, #0
 8003a18:	4d05      	ldr	r5, [pc, #20]	@ (8003a30 <_close_r+0x1c>)
 8003a1a:	4604      	mov	r4, r0
 8003a1c:	4608      	mov	r0, r1
 8003a1e:	602b      	str	r3, [r5, #0]
 8003a20:	f7fd fdd3 	bl	80015ca <_close>
 8003a24:	1c43      	adds	r3, r0, #1
 8003a26:	d102      	bne.n	8003a2e <_close_r+0x1a>
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	b103      	cbz	r3, 8003a2e <_close_r+0x1a>
 8003a2c:	6023      	str	r3, [r4, #0]
 8003a2e:	bd38      	pop	{r3, r4, r5, pc}
 8003a30:	2000040c 	.word	0x2000040c

08003a34 <_lseek_r>:
 8003a34:	b538      	push	{r3, r4, r5, lr}
 8003a36:	4604      	mov	r4, r0
 8003a38:	4608      	mov	r0, r1
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	4d05      	ldr	r5, [pc, #20]	@ (8003a54 <_lseek_r+0x20>)
 8003a40:	602a      	str	r2, [r5, #0]
 8003a42:	461a      	mov	r2, r3
 8003a44:	f7fd fde5 	bl	8001612 <_lseek>
 8003a48:	1c43      	adds	r3, r0, #1
 8003a4a:	d102      	bne.n	8003a52 <_lseek_r+0x1e>
 8003a4c:	682b      	ldr	r3, [r5, #0]
 8003a4e:	b103      	cbz	r3, 8003a52 <_lseek_r+0x1e>
 8003a50:	6023      	str	r3, [r4, #0]
 8003a52:	bd38      	pop	{r3, r4, r5, pc}
 8003a54:	2000040c 	.word	0x2000040c

08003a58 <_read_r>:
 8003a58:	b538      	push	{r3, r4, r5, lr}
 8003a5a:	4604      	mov	r4, r0
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	2200      	movs	r2, #0
 8003a62:	4d05      	ldr	r5, [pc, #20]	@ (8003a78 <_read_r+0x20>)
 8003a64:	602a      	str	r2, [r5, #0]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f7fd fd76 	bl	8001558 <_read>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_read_r+0x1e>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_read_r+0x1e>
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	2000040c 	.word	0x2000040c

08003a7c <_write_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	4611      	mov	r1, r2
 8003a84:	2200      	movs	r2, #0
 8003a86:	4d05      	ldr	r5, [pc, #20]	@ (8003a9c <_write_r+0x20>)
 8003a88:	602a      	str	r2, [r5, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f7fd fd81 	bl	8001592 <_write>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_write_r+0x1e>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_write_r+0x1e>
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	2000040c 	.word	0x2000040c

08003aa0 <__errno>:
 8003aa0:	4b01      	ldr	r3, [pc, #4]	@ (8003aa8 <__errno+0x8>)
 8003aa2:	6818      	ldr	r0, [r3, #0]
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	20000018 	.word	0x20000018

08003aac <__libc_init_array>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	2600      	movs	r6, #0
 8003ab0:	4d0c      	ldr	r5, [pc, #48]	@ (8003ae4 <__libc_init_array+0x38>)
 8003ab2:	4c0d      	ldr	r4, [pc, #52]	@ (8003ae8 <__libc_init_array+0x3c>)
 8003ab4:	1b64      	subs	r4, r4, r5
 8003ab6:	10a4      	asrs	r4, r4, #2
 8003ab8:	42a6      	cmp	r6, r4
 8003aba:	d109      	bne.n	8003ad0 <__libc_init_array+0x24>
 8003abc:	f003 fb66 	bl	800718c <_init>
 8003ac0:	2600      	movs	r6, #0
 8003ac2:	4d0a      	ldr	r5, [pc, #40]	@ (8003aec <__libc_init_array+0x40>)
 8003ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8003af0 <__libc_init_array+0x44>)
 8003ac6:	1b64      	subs	r4, r4, r5
 8003ac8:	10a4      	asrs	r4, r4, #2
 8003aca:	42a6      	cmp	r6, r4
 8003acc:	d105      	bne.n	8003ada <__libc_init_array+0x2e>
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
 8003ad0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad4:	4798      	blx	r3
 8003ad6:	3601      	adds	r6, #1
 8003ad8:	e7ee      	b.n	8003ab8 <__libc_init_array+0xc>
 8003ada:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ade:	4798      	blx	r3
 8003ae0:	3601      	adds	r6, #1
 8003ae2:	e7f2      	b.n	8003aca <__libc_init_array+0x1e>
 8003ae4:	08007600 	.word	0x08007600
 8003ae8:	08007600 	.word	0x08007600
 8003aec:	08007600 	.word	0x08007600
 8003af0:	08007604 	.word	0x08007604

08003af4 <__retarget_lock_init_recursive>:
 8003af4:	4770      	bx	lr

08003af6 <__retarget_lock_acquire_recursive>:
 8003af6:	4770      	bx	lr

08003af8 <__retarget_lock_release_recursive>:
 8003af8:	4770      	bx	lr

08003afa <memchr>:
 8003afa:	4603      	mov	r3, r0
 8003afc:	b510      	push	{r4, lr}
 8003afe:	b2c9      	uxtb	r1, r1
 8003b00:	4402      	add	r2, r0
 8003b02:	4293      	cmp	r3, r2
 8003b04:	4618      	mov	r0, r3
 8003b06:	d101      	bne.n	8003b0c <memchr+0x12>
 8003b08:	2000      	movs	r0, #0
 8003b0a:	e003      	b.n	8003b14 <memchr+0x1a>
 8003b0c:	7804      	ldrb	r4, [r0, #0]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	428c      	cmp	r4, r1
 8003b12:	d1f6      	bne.n	8003b02 <memchr+0x8>
 8003b14:	bd10      	pop	{r4, pc}
	...

08003b18 <nanf>:
 8003b18:	4800      	ldr	r0, [pc, #0]	@ (8003b1c <nanf+0x4>)
 8003b1a:	4770      	bx	lr
 8003b1c:	7fc00000 	.word	0x7fc00000

08003b20 <quorem>:
 8003b20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b24:	6903      	ldr	r3, [r0, #16]
 8003b26:	690c      	ldr	r4, [r1, #16]
 8003b28:	4607      	mov	r7, r0
 8003b2a:	42a3      	cmp	r3, r4
 8003b2c:	db7e      	blt.n	8003c2c <quorem+0x10c>
 8003b2e:	3c01      	subs	r4, #1
 8003b30:	00a3      	lsls	r3, r4, #2
 8003b32:	f100 0514 	add.w	r5, r0, #20
 8003b36:	f101 0814 	add.w	r8, r1, #20
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003b46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8003b52:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003b56:	d32e      	bcc.n	8003bb6 <quorem+0x96>
 8003b58:	f04f 0a00 	mov.w	sl, #0
 8003b5c:	46c4      	mov	ip, r8
 8003b5e:	46ae      	mov	lr, r5
 8003b60:	46d3      	mov	fp, sl
 8003b62:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003b66:	b298      	uxth	r0, r3
 8003b68:	fb06 a000 	mla	r0, r6, r0, sl
 8003b6c:	0c1b      	lsrs	r3, r3, #16
 8003b6e:	0c02      	lsrs	r2, r0, #16
 8003b70:	fb06 2303 	mla	r3, r6, r3, r2
 8003b74:	f8de 2000 	ldr.w	r2, [lr]
 8003b78:	b280      	uxth	r0, r0
 8003b7a:	b292      	uxth	r2, r2
 8003b7c:	1a12      	subs	r2, r2, r0
 8003b7e:	445a      	add	r2, fp
 8003b80:	f8de 0000 	ldr.w	r0, [lr]
 8003b84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003b8e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003b92:	b292      	uxth	r2, r2
 8003b94:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003b98:	45e1      	cmp	r9, ip
 8003b9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003b9e:	f84e 2b04 	str.w	r2, [lr], #4
 8003ba2:	d2de      	bcs.n	8003b62 <quorem+0x42>
 8003ba4:	9b00      	ldr	r3, [sp, #0]
 8003ba6:	58eb      	ldr	r3, [r5, r3]
 8003ba8:	b92b      	cbnz	r3, 8003bb6 <quorem+0x96>
 8003baa:	9b01      	ldr	r3, [sp, #4]
 8003bac:	3b04      	subs	r3, #4
 8003bae:	429d      	cmp	r5, r3
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	d32f      	bcc.n	8003c14 <quorem+0xf4>
 8003bb4:	613c      	str	r4, [r7, #16]
 8003bb6:	4638      	mov	r0, r7
 8003bb8:	f001 f9c2 	bl	8004f40 <__mcmp>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	db25      	blt.n	8003c0c <quorem+0xec>
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8003bc8:	f8d1 c000 	ldr.w	ip, [r1]
 8003bcc:	fa1f fe82 	uxth.w	lr, r2
 8003bd0:	fa1f f38c 	uxth.w	r3, ip
 8003bd4:	eba3 030e 	sub.w	r3, r3, lr
 8003bd8:	4403      	add	r3, r0
 8003bda:	0c12      	lsrs	r2, r2, #16
 8003bdc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003be0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003bea:	45c1      	cmp	r9, r8
 8003bec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003bf0:	f841 3b04 	str.w	r3, [r1], #4
 8003bf4:	d2e6      	bcs.n	8003bc4 <quorem+0xa4>
 8003bf6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003bfe:	b922      	cbnz	r2, 8003c0a <quorem+0xea>
 8003c00:	3b04      	subs	r3, #4
 8003c02:	429d      	cmp	r5, r3
 8003c04:	461a      	mov	r2, r3
 8003c06:	d30b      	bcc.n	8003c20 <quorem+0x100>
 8003c08:	613c      	str	r4, [r7, #16]
 8003c0a:	3601      	adds	r6, #1
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	b003      	add	sp, #12
 8003c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c14:	6812      	ldr	r2, [r2, #0]
 8003c16:	3b04      	subs	r3, #4
 8003c18:	2a00      	cmp	r2, #0
 8003c1a:	d1cb      	bne.n	8003bb4 <quorem+0x94>
 8003c1c:	3c01      	subs	r4, #1
 8003c1e:	e7c6      	b.n	8003bae <quorem+0x8e>
 8003c20:	6812      	ldr	r2, [r2, #0]
 8003c22:	3b04      	subs	r3, #4
 8003c24:	2a00      	cmp	r2, #0
 8003c26:	d1ef      	bne.n	8003c08 <quorem+0xe8>
 8003c28:	3c01      	subs	r4, #1
 8003c2a:	e7ea      	b.n	8003c02 <quorem+0xe2>
 8003c2c:	2000      	movs	r0, #0
 8003c2e:	e7ee      	b.n	8003c0e <quorem+0xee>

08003c30 <_dtoa_r>:
 8003c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c34:	4614      	mov	r4, r2
 8003c36:	461d      	mov	r5, r3
 8003c38:	69c7      	ldr	r7, [r0, #28]
 8003c3a:	b097      	sub	sp, #92	@ 0x5c
 8003c3c:	4683      	mov	fp, r0
 8003c3e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003c42:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8003c44:	b97f      	cbnz	r7, 8003c66 <_dtoa_r+0x36>
 8003c46:	2010      	movs	r0, #16
 8003c48:	f000 fe02 	bl	8004850 <malloc>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	f8cb 001c 	str.w	r0, [fp, #28]
 8003c52:	b920      	cbnz	r0, 8003c5e <_dtoa_r+0x2e>
 8003c54:	21ef      	movs	r1, #239	@ 0xef
 8003c56:	4ba8      	ldr	r3, [pc, #672]	@ (8003ef8 <_dtoa_r+0x2c8>)
 8003c58:	48a8      	ldr	r0, [pc, #672]	@ (8003efc <_dtoa_r+0x2cc>)
 8003c5a:	f002 fc23 	bl	80064a4 <__assert_func>
 8003c5e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8003c62:	6007      	str	r7, [r0, #0]
 8003c64:	60c7      	str	r7, [r0, #12]
 8003c66:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	b159      	cbz	r1, 8003c86 <_dtoa_r+0x56>
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	2301      	movs	r3, #1
 8003c72:	4093      	lsls	r3, r2
 8003c74:	604a      	str	r2, [r1, #4]
 8003c76:	608b      	str	r3, [r1, #8]
 8003c78:	4658      	mov	r0, fp
 8003c7a:	f000 fedf 	bl	8004a3c <_Bfree>
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	1e2b      	subs	r3, r5, #0
 8003c88:	bfaf      	iteee	ge
 8003c8a:	2300      	movge	r3, #0
 8003c8c:	2201      	movlt	r2, #1
 8003c8e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8003c92:	9303      	strlt	r3, [sp, #12]
 8003c94:	bfa8      	it	ge
 8003c96:	6033      	strge	r3, [r6, #0]
 8003c98:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003c9c:	4b98      	ldr	r3, [pc, #608]	@ (8003f00 <_dtoa_r+0x2d0>)
 8003c9e:	bfb8      	it	lt
 8003ca0:	6032      	strlt	r2, [r6, #0]
 8003ca2:	ea33 0308 	bics.w	r3, r3, r8
 8003ca6:	d112      	bne.n	8003cce <_dtoa_r+0x9e>
 8003ca8:	f242 730f 	movw	r3, #9999	@ 0x270f
 8003cac:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8003cb4:	4323      	orrs	r3, r4
 8003cb6:	f000 8550 	beq.w	800475a <_dtoa_r+0xb2a>
 8003cba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003cbc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8003f04 <_dtoa_r+0x2d4>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 8552 	beq.w	800476a <_dtoa_r+0xb3a>
 8003cc6:	f10a 0303 	add.w	r3, sl, #3
 8003cca:	f000 bd4c 	b.w	8004766 <_dtoa_r+0xb36>
 8003cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003cd2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8003cd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f7fc fe63 	bl	80009a8 <__aeabi_dcmpeq>
 8003ce2:	4607      	mov	r7, r0
 8003ce4:	b158      	cbz	r0, 8003cfe <_dtoa_r+0xce>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8003cee:	b113      	cbz	r3, 8003cf6 <_dtoa_r+0xc6>
 8003cf0:	4b85      	ldr	r3, [pc, #532]	@ (8003f08 <_dtoa_r+0x2d8>)
 8003cf2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8003f0c <_dtoa_r+0x2dc>
 8003cfa:	f000 bd36 	b.w	800476a <_dtoa_r+0xb3a>
 8003cfe:	ab14      	add	r3, sp, #80	@ 0x50
 8003d00:	9301      	str	r3, [sp, #4]
 8003d02:	ab15      	add	r3, sp, #84	@ 0x54
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	4658      	mov	r0, fp
 8003d08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8003d0c:	f001 fa30 	bl	8005170 <__d2b>
 8003d10:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8003d14:	4681      	mov	r9, r0
 8003d16:	2e00      	cmp	r6, #0
 8003d18:	d077      	beq.n	8003e0a <_dtoa_r+0x1da>
 8003d1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003d1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d20:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8003d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d28:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8003d2c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8003d30:	9712      	str	r7, [sp, #72]	@ 0x48
 8003d32:	4619      	mov	r1, r3
 8003d34:	2200      	movs	r2, #0
 8003d36:	4b76      	ldr	r3, [pc, #472]	@ (8003f10 <_dtoa_r+0x2e0>)
 8003d38:	f7fc fa16 	bl	8000168 <__aeabi_dsub>
 8003d3c:	a368      	add	r3, pc, #416	@ (adr r3, 8003ee0 <_dtoa_r+0x2b0>)
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f7fc fbc9 	bl	80004d8 <__aeabi_dmul>
 8003d46:	a368      	add	r3, pc, #416	@ (adr r3, 8003ee8 <_dtoa_r+0x2b8>)
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f7fc fa0e 	bl	800016c <__adddf3>
 8003d50:	4604      	mov	r4, r0
 8003d52:	4630      	mov	r0, r6
 8003d54:	460d      	mov	r5, r1
 8003d56:	f7fc fb55 	bl	8000404 <__aeabi_i2d>
 8003d5a:	a365      	add	r3, pc, #404	@ (adr r3, 8003ef0 <_dtoa_r+0x2c0>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	f7fc fbba 	bl	80004d8 <__aeabi_dmul>
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4620      	mov	r0, r4
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	f7fc f9fe 	bl	800016c <__adddf3>
 8003d70:	4604      	mov	r4, r0
 8003d72:	460d      	mov	r5, r1
 8003d74:	f7fc fe60 	bl	8000a38 <__aeabi_d2iz>
 8003d78:	2200      	movs	r2, #0
 8003d7a:	4607      	mov	r7, r0
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	4620      	mov	r0, r4
 8003d80:	4629      	mov	r1, r5
 8003d82:	f7fc fe1b 	bl	80009bc <__aeabi_dcmplt>
 8003d86:	b140      	cbz	r0, 8003d9a <_dtoa_r+0x16a>
 8003d88:	4638      	mov	r0, r7
 8003d8a:	f7fc fb3b 	bl	8000404 <__aeabi_i2d>
 8003d8e:	4622      	mov	r2, r4
 8003d90:	462b      	mov	r3, r5
 8003d92:	f7fc fe09 	bl	80009a8 <__aeabi_dcmpeq>
 8003d96:	b900      	cbnz	r0, 8003d9a <_dtoa_r+0x16a>
 8003d98:	3f01      	subs	r7, #1
 8003d9a:	2f16      	cmp	r7, #22
 8003d9c:	d853      	bhi.n	8003e46 <_dtoa_r+0x216>
 8003d9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003da2:	4b5c      	ldr	r3, [pc, #368]	@ (8003f14 <_dtoa_r+0x2e4>)
 8003da4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8003da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dac:	f7fc fe06 	bl	80009bc <__aeabi_dcmplt>
 8003db0:	2800      	cmp	r0, #0
 8003db2:	d04a      	beq.n	8003e4a <_dtoa_r+0x21a>
 8003db4:	2300      	movs	r3, #0
 8003db6:	3f01      	subs	r7, #1
 8003db8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003dba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003dbc:	1b9b      	subs	r3, r3, r6
 8003dbe:	1e5a      	subs	r2, r3, #1
 8003dc0:	bf46      	itte	mi
 8003dc2:	f1c3 0801 	rsbmi	r8, r3, #1
 8003dc6:	2300      	movmi	r3, #0
 8003dc8:	f04f 0800 	movpl.w	r8, #0
 8003dcc:	9209      	str	r2, [sp, #36]	@ 0x24
 8003dce:	bf48      	it	mi
 8003dd0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8003dd2:	2f00      	cmp	r7, #0
 8003dd4:	db3b      	blt.n	8003e4e <_dtoa_r+0x21e>
 8003dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003dd8:	970e      	str	r7, [sp, #56]	@ 0x38
 8003dda:	443b      	add	r3, r7
 8003ddc:	9309      	str	r3, [sp, #36]	@ 0x24
 8003dde:	2300      	movs	r3, #0
 8003de0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003de2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003de4:	2b09      	cmp	r3, #9
 8003de6:	d866      	bhi.n	8003eb6 <_dtoa_r+0x286>
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	bfc4      	itt	gt
 8003dec:	3b04      	subgt	r3, #4
 8003dee:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8003df0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8003df2:	bfc8      	it	gt
 8003df4:	2400      	movgt	r4, #0
 8003df6:	f1a3 0302 	sub.w	r3, r3, #2
 8003dfa:	bfd8      	it	le
 8003dfc:	2401      	movle	r4, #1
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d864      	bhi.n	8003ecc <_dtoa_r+0x29c>
 8003e02:	e8df f003 	tbb	[pc, r3]
 8003e06:	382b      	.short	0x382b
 8003e08:	5636      	.short	0x5636
 8003e0a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8003e0e:	441e      	add	r6, r3
 8003e10:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8003e14:	2b20      	cmp	r3, #32
 8003e16:	bfc1      	itttt	gt
 8003e18:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8003e1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8003e20:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8003e24:	fa24 f303 	lsrgt.w	r3, r4, r3
 8003e28:	bfd6      	itet	le
 8003e2a:	f1c3 0320 	rsble	r3, r3, #32
 8003e2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8003e32:	fa04 f003 	lslle.w	r0, r4, r3
 8003e36:	f7fc fad5 	bl	80003e4 <__aeabi_ui2d>
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8003e40:	3e01      	subs	r6, #1
 8003e42:	9212      	str	r2, [sp, #72]	@ 0x48
 8003e44:	e775      	b.n	8003d32 <_dtoa_r+0x102>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e7b6      	b.n	8003db8 <_dtoa_r+0x188>
 8003e4a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8003e4c:	e7b5      	b.n	8003dba <_dtoa_r+0x18a>
 8003e4e:	427b      	negs	r3, r7
 8003e50:	930a      	str	r3, [sp, #40]	@ 0x28
 8003e52:	2300      	movs	r3, #0
 8003e54:	eba8 0807 	sub.w	r8, r8, r7
 8003e58:	930e      	str	r3, [sp, #56]	@ 0x38
 8003e5a:	e7c2      	b.n	8003de2 <_dtoa_r+0x1b2>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e60:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	dc35      	bgt.n	8003ed2 <_dtoa_r+0x2a2>
 8003e66:	2301      	movs	r3, #1
 8003e68:	461a      	mov	r2, r3
 8003e6a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003e6e:	9221      	str	r2, [sp, #132]	@ 0x84
 8003e70:	e00b      	b.n	8003e8a <_dtoa_r+0x25a>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e7f3      	b.n	8003e5e <_dtoa_r+0x22e>
 8003e76:	2300      	movs	r3, #0
 8003e78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003e7c:	18fb      	adds	r3, r7, r3
 8003e7e:	9308      	str	r3, [sp, #32]
 8003e80:	3301      	adds	r3, #1
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	9307      	str	r3, [sp, #28]
 8003e86:	bfb8      	it	lt
 8003e88:	2301      	movlt	r3, #1
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8003e92:	f102 0514 	add.w	r5, r2, #20
 8003e96:	429d      	cmp	r5, r3
 8003e98:	d91f      	bls.n	8003eda <_dtoa_r+0x2aa>
 8003e9a:	6041      	str	r1, [r0, #4]
 8003e9c:	4658      	mov	r0, fp
 8003e9e:	f000 fd8d 	bl	80049bc <_Balloc>
 8003ea2:	4682      	mov	sl, r0
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d139      	bne.n	8003f1c <_dtoa_r+0x2ec>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	f240 11af 	movw	r1, #431	@ 0x1af
 8003eae:	4b1a      	ldr	r3, [pc, #104]	@ (8003f18 <_dtoa_r+0x2e8>)
 8003eb0:	e6d2      	b.n	8003c58 <_dtoa_r+0x28>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e7e0      	b.n	8003e78 <_dtoa_r+0x248>
 8003eb6:	2401      	movs	r4, #1
 8003eb8:	2300      	movs	r3, #0
 8003eba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8003ebc:	9320      	str	r3, [sp, #128]	@ 0x80
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ec8:	2312      	movs	r3, #18
 8003eca:	e7d0      	b.n	8003e6e <_dtoa_r+0x23e>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003ed0:	e7f5      	b.n	8003ebe <_dtoa_r+0x28e>
 8003ed2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003ed4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003ed8:	e7d7      	b.n	8003e8a <_dtoa_r+0x25a>
 8003eda:	3101      	adds	r1, #1
 8003edc:	0052      	lsls	r2, r2, #1
 8003ede:	e7d8      	b.n	8003e92 <_dtoa_r+0x262>
 8003ee0:	636f4361 	.word	0x636f4361
 8003ee4:	3fd287a7 	.word	0x3fd287a7
 8003ee8:	8b60c8b3 	.word	0x8b60c8b3
 8003eec:	3fc68a28 	.word	0x3fc68a28
 8003ef0:	509f79fb 	.word	0x509f79fb
 8003ef4:	3fd34413 	.word	0x3fd34413
 8003ef8:	0800720e 	.word	0x0800720e
 8003efc:	08007225 	.word	0x08007225
 8003f00:	7ff00000 	.word	0x7ff00000
 8003f04:	0800720a 	.word	0x0800720a
 8003f08:	080071d9 	.word	0x080071d9
 8003f0c:	080071d8 	.word	0x080071d8
 8003f10:	3ff80000 	.word	0x3ff80000
 8003f14:	08007320 	.word	0x08007320
 8003f18:	0800727d 	.word	0x0800727d
 8003f1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8003f20:	6018      	str	r0, [r3, #0]
 8003f22:	9b07      	ldr	r3, [sp, #28]
 8003f24:	2b0e      	cmp	r3, #14
 8003f26:	f200 80a4 	bhi.w	8004072 <_dtoa_r+0x442>
 8003f2a:	2c00      	cmp	r4, #0
 8003f2c:	f000 80a1 	beq.w	8004072 <_dtoa_r+0x442>
 8003f30:	2f00      	cmp	r7, #0
 8003f32:	dd33      	ble.n	8003f9c <_dtoa_r+0x36c>
 8003f34:	4b86      	ldr	r3, [pc, #536]	@ (8004150 <_dtoa_r+0x520>)
 8003f36:	f007 020f 	and.w	r2, r7, #15
 8003f3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f3e:	05f8      	lsls	r0, r7, #23
 8003f40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f44:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8003f48:	ea4f 1427 	mov.w	r4, r7, asr #4
 8003f4c:	d516      	bpl.n	8003f7c <_dtoa_r+0x34c>
 8003f4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003f52:	4b80      	ldr	r3, [pc, #512]	@ (8004154 <_dtoa_r+0x524>)
 8003f54:	2603      	movs	r6, #3
 8003f56:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003f5a:	f7fc fbe7 	bl	800072c <__aeabi_ddiv>
 8003f5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f62:	f004 040f 	and.w	r4, r4, #15
 8003f66:	4d7b      	ldr	r5, [pc, #492]	@ (8004154 <_dtoa_r+0x524>)
 8003f68:	b954      	cbnz	r4, 8003f80 <_dtoa_r+0x350>
 8003f6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f72:	f7fc fbdb 	bl	800072c <__aeabi_ddiv>
 8003f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f7a:	e028      	b.n	8003fce <_dtoa_r+0x39e>
 8003f7c:	2602      	movs	r6, #2
 8003f7e:	e7f2      	b.n	8003f66 <_dtoa_r+0x336>
 8003f80:	07e1      	lsls	r1, r4, #31
 8003f82:	d508      	bpl.n	8003f96 <_dtoa_r+0x366>
 8003f84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003f88:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f8c:	f7fc faa4 	bl	80004d8 <__aeabi_dmul>
 8003f90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f94:	3601      	adds	r6, #1
 8003f96:	1064      	asrs	r4, r4, #1
 8003f98:	3508      	adds	r5, #8
 8003f9a:	e7e5      	b.n	8003f68 <_dtoa_r+0x338>
 8003f9c:	f000 80d2 	beq.w	8004144 <_dtoa_r+0x514>
 8003fa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8003fa4:	427c      	negs	r4, r7
 8003fa6:	4b6a      	ldr	r3, [pc, #424]	@ (8004150 <_dtoa_r+0x520>)
 8003fa8:	f004 020f 	and.w	r2, r4, #15
 8003fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc fa90 	bl	80004d8 <__aeabi_dmul>
 8003fb8:	2602      	movs	r6, #2
 8003fba:	2300      	movs	r3, #0
 8003fbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fc0:	4d64      	ldr	r5, [pc, #400]	@ (8004154 <_dtoa_r+0x524>)
 8003fc2:	1124      	asrs	r4, r4, #4
 8003fc4:	2c00      	cmp	r4, #0
 8003fc6:	f040 80b2 	bne.w	800412e <_dtoa_r+0x4fe>
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1d3      	bne.n	8003f76 <_dtoa_r+0x346>
 8003fce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8003fd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80b7 	beq.w	8004148 <_dtoa_r+0x518>
 8003fda:	2200      	movs	r2, #0
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	4b5d      	ldr	r3, [pc, #372]	@ (8004158 <_dtoa_r+0x528>)
 8003fe2:	f7fc fceb 	bl	80009bc <__aeabi_dcmplt>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	f000 80ae 	beq.w	8004148 <_dtoa_r+0x518>
 8003fec:	9b07      	ldr	r3, [sp, #28]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 80aa 	beq.w	8004148 <_dtoa_r+0x518>
 8003ff4:	9b08      	ldr	r3, [sp, #32]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	dd37      	ble.n	800406a <_dtoa_r+0x43a>
 8003ffa:	1e7b      	subs	r3, r7, #1
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	9304      	str	r3, [sp, #16]
 8004000:	2200      	movs	r2, #0
 8004002:	4629      	mov	r1, r5
 8004004:	4b55      	ldr	r3, [pc, #340]	@ (800415c <_dtoa_r+0x52c>)
 8004006:	f7fc fa67 	bl	80004d8 <__aeabi_dmul>
 800400a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800400e:	9c08      	ldr	r4, [sp, #32]
 8004010:	3601      	adds	r6, #1
 8004012:	4630      	mov	r0, r6
 8004014:	f7fc f9f6 	bl	8000404 <__aeabi_i2d>
 8004018:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800401c:	f7fc fa5c 	bl	80004d8 <__aeabi_dmul>
 8004020:	2200      	movs	r2, #0
 8004022:	4b4f      	ldr	r3, [pc, #316]	@ (8004160 <_dtoa_r+0x530>)
 8004024:	f7fc f8a2 	bl	800016c <__adddf3>
 8004028:	4605      	mov	r5, r0
 800402a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800402e:	2c00      	cmp	r4, #0
 8004030:	f040 809a 	bne.w	8004168 <_dtoa_r+0x538>
 8004034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004038:	2200      	movs	r2, #0
 800403a:	4b4a      	ldr	r3, [pc, #296]	@ (8004164 <_dtoa_r+0x534>)
 800403c:	f7fc f894 	bl	8000168 <__aeabi_dsub>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004048:	462a      	mov	r2, r5
 800404a:	4633      	mov	r3, r6
 800404c:	f7fc fcd4 	bl	80009f8 <__aeabi_dcmpgt>
 8004050:	2800      	cmp	r0, #0
 8004052:	f040 828e 	bne.w	8004572 <_dtoa_r+0x942>
 8004056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800405a:	462a      	mov	r2, r5
 800405c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004060:	f7fc fcac 	bl	80009bc <__aeabi_dcmplt>
 8004064:	2800      	cmp	r0, #0
 8004066:	f040 8127 	bne.w	80042b8 <_dtoa_r+0x688>
 800406a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800406e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004072:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004074:	2b00      	cmp	r3, #0
 8004076:	f2c0 8163 	blt.w	8004340 <_dtoa_r+0x710>
 800407a:	2f0e      	cmp	r7, #14
 800407c:	f300 8160 	bgt.w	8004340 <_dtoa_r+0x710>
 8004080:	4b33      	ldr	r3, [pc, #204]	@ (8004150 <_dtoa_r+0x520>)
 8004082:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004086:	e9d3 3400 	ldrd	r3, r4, [r3]
 800408a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800408e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004090:	2b00      	cmp	r3, #0
 8004092:	da03      	bge.n	800409c <_dtoa_r+0x46c>
 8004094:	9b07      	ldr	r3, [sp, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	f340 8100 	ble.w	800429c <_dtoa_r+0x66c>
 800409c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80040a0:	4656      	mov	r6, sl
 80040a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040a6:	4620      	mov	r0, r4
 80040a8:	4629      	mov	r1, r5
 80040aa:	f7fc fb3f 	bl	800072c <__aeabi_ddiv>
 80040ae:	f7fc fcc3 	bl	8000a38 <__aeabi_d2iz>
 80040b2:	4680      	mov	r8, r0
 80040b4:	f7fc f9a6 	bl	8000404 <__aeabi_i2d>
 80040b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040bc:	f7fc fa0c 	bl	80004d8 <__aeabi_dmul>
 80040c0:	4602      	mov	r2, r0
 80040c2:	460b      	mov	r3, r1
 80040c4:	4620      	mov	r0, r4
 80040c6:	4629      	mov	r1, r5
 80040c8:	f7fc f84e 	bl	8000168 <__aeabi_dsub>
 80040cc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80040d0:	9d07      	ldr	r5, [sp, #28]
 80040d2:	f806 4b01 	strb.w	r4, [r6], #1
 80040d6:	eba6 040a 	sub.w	r4, r6, sl
 80040da:	42a5      	cmp	r5, r4
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	f040 8116 	bne.w	8004310 <_dtoa_r+0x6e0>
 80040e4:	f7fc f842 	bl	800016c <__adddf3>
 80040e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040ec:	4604      	mov	r4, r0
 80040ee:	460d      	mov	r5, r1
 80040f0:	f7fc fc82 	bl	80009f8 <__aeabi_dcmpgt>
 80040f4:	2800      	cmp	r0, #0
 80040f6:	f040 80f8 	bne.w	80042ea <_dtoa_r+0x6ba>
 80040fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040fe:	4620      	mov	r0, r4
 8004100:	4629      	mov	r1, r5
 8004102:	f7fc fc51 	bl	80009a8 <__aeabi_dcmpeq>
 8004106:	b118      	cbz	r0, 8004110 <_dtoa_r+0x4e0>
 8004108:	f018 0f01 	tst.w	r8, #1
 800410c:	f040 80ed 	bne.w	80042ea <_dtoa_r+0x6ba>
 8004110:	4649      	mov	r1, r9
 8004112:	4658      	mov	r0, fp
 8004114:	f000 fc92 	bl	8004a3c <_Bfree>
 8004118:	2300      	movs	r3, #0
 800411a:	7033      	strb	r3, [r6, #0]
 800411c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800411e:	3701      	adds	r7, #1
 8004120:	601f      	str	r7, [r3, #0]
 8004122:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8320 	beq.w	800476a <_dtoa_r+0xb3a>
 800412a:	601e      	str	r6, [r3, #0]
 800412c:	e31d      	b.n	800476a <_dtoa_r+0xb3a>
 800412e:	07e2      	lsls	r2, r4, #31
 8004130:	d505      	bpl.n	800413e <_dtoa_r+0x50e>
 8004132:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004136:	f7fc f9cf 	bl	80004d8 <__aeabi_dmul>
 800413a:	2301      	movs	r3, #1
 800413c:	3601      	adds	r6, #1
 800413e:	1064      	asrs	r4, r4, #1
 8004140:	3508      	adds	r5, #8
 8004142:	e73f      	b.n	8003fc4 <_dtoa_r+0x394>
 8004144:	2602      	movs	r6, #2
 8004146:	e742      	b.n	8003fce <_dtoa_r+0x39e>
 8004148:	9c07      	ldr	r4, [sp, #28]
 800414a:	9704      	str	r7, [sp, #16]
 800414c:	e761      	b.n	8004012 <_dtoa_r+0x3e2>
 800414e:	bf00      	nop
 8004150:	08007320 	.word	0x08007320
 8004154:	080072f8 	.word	0x080072f8
 8004158:	3ff00000 	.word	0x3ff00000
 800415c:	40240000 	.word	0x40240000
 8004160:	401c0000 	.word	0x401c0000
 8004164:	40140000 	.word	0x40140000
 8004168:	4b70      	ldr	r3, [pc, #448]	@ (800432c <_dtoa_r+0x6fc>)
 800416a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800416c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004170:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004174:	4454      	add	r4, sl
 8004176:	2900      	cmp	r1, #0
 8004178:	d045      	beq.n	8004206 <_dtoa_r+0x5d6>
 800417a:	2000      	movs	r0, #0
 800417c:	496c      	ldr	r1, [pc, #432]	@ (8004330 <_dtoa_r+0x700>)
 800417e:	f7fc fad5 	bl	800072c <__aeabi_ddiv>
 8004182:	4633      	mov	r3, r6
 8004184:	462a      	mov	r2, r5
 8004186:	f7fb ffef 	bl	8000168 <__aeabi_dsub>
 800418a:	4656      	mov	r6, sl
 800418c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004190:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004194:	f7fc fc50 	bl	8000a38 <__aeabi_d2iz>
 8004198:	4605      	mov	r5, r0
 800419a:	f7fc f933 	bl	8000404 <__aeabi_i2d>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041a6:	f7fb ffdf 	bl	8000168 <__aeabi_dsub>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	3530      	adds	r5, #48	@ 0x30
 80041b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80041b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80041b8:	f806 5b01 	strb.w	r5, [r6], #1
 80041bc:	f7fc fbfe 	bl	80009bc <__aeabi_dcmplt>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d163      	bne.n	800428c <_dtoa_r+0x65c>
 80041c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80041c8:	2000      	movs	r0, #0
 80041ca:	495a      	ldr	r1, [pc, #360]	@ (8004334 <_dtoa_r+0x704>)
 80041cc:	f7fb ffcc 	bl	8000168 <__aeabi_dsub>
 80041d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80041d4:	f7fc fbf2 	bl	80009bc <__aeabi_dcmplt>
 80041d8:	2800      	cmp	r0, #0
 80041da:	f040 8087 	bne.w	80042ec <_dtoa_r+0x6bc>
 80041de:	42a6      	cmp	r6, r4
 80041e0:	f43f af43 	beq.w	800406a <_dtoa_r+0x43a>
 80041e4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80041e8:	2200      	movs	r2, #0
 80041ea:	4b53      	ldr	r3, [pc, #332]	@ (8004338 <_dtoa_r+0x708>)
 80041ec:	f7fc f974 	bl	80004d8 <__aeabi_dmul>
 80041f0:	2200      	movs	r2, #0
 80041f2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80041f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004338 <_dtoa_r+0x708>)
 80041fc:	f7fc f96c 	bl	80004d8 <__aeabi_dmul>
 8004200:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004204:	e7c4      	b.n	8004190 <_dtoa_r+0x560>
 8004206:	4631      	mov	r1, r6
 8004208:	4628      	mov	r0, r5
 800420a:	f7fc f965 	bl	80004d8 <__aeabi_dmul>
 800420e:	4656      	mov	r6, sl
 8004210:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004214:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800421a:	f7fc fc0d 	bl	8000a38 <__aeabi_d2iz>
 800421e:	4605      	mov	r5, r0
 8004220:	f7fc f8f0 	bl	8000404 <__aeabi_i2d>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800422c:	f7fb ff9c 	bl	8000168 <__aeabi_dsub>
 8004230:	4602      	mov	r2, r0
 8004232:	460b      	mov	r3, r1
 8004234:	3530      	adds	r5, #48	@ 0x30
 8004236:	f806 5b01 	strb.w	r5, [r6], #1
 800423a:	42a6      	cmp	r6, r4
 800423c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	d124      	bne.n	8004290 <_dtoa_r+0x660>
 8004246:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800424a:	4b39      	ldr	r3, [pc, #228]	@ (8004330 <_dtoa_r+0x700>)
 800424c:	f7fb ff8e 	bl	800016c <__adddf3>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004258:	f7fc fbce 	bl	80009f8 <__aeabi_dcmpgt>
 800425c:	2800      	cmp	r0, #0
 800425e:	d145      	bne.n	80042ec <_dtoa_r+0x6bc>
 8004260:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004264:	2000      	movs	r0, #0
 8004266:	4932      	ldr	r1, [pc, #200]	@ (8004330 <_dtoa_r+0x700>)
 8004268:	f7fb ff7e 	bl	8000168 <__aeabi_dsub>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004274:	f7fc fba2 	bl	80009bc <__aeabi_dcmplt>
 8004278:	2800      	cmp	r0, #0
 800427a:	f43f aef6 	beq.w	800406a <_dtoa_r+0x43a>
 800427e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004280:	1e73      	subs	r3, r6, #1
 8004282:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004284:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004288:	2b30      	cmp	r3, #48	@ 0x30
 800428a:	d0f8      	beq.n	800427e <_dtoa_r+0x64e>
 800428c:	9f04      	ldr	r7, [sp, #16]
 800428e:	e73f      	b.n	8004110 <_dtoa_r+0x4e0>
 8004290:	4b29      	ldr	r3, [pc, #164]	@ (8004338 <_dtoa_r+0x708>)
 8004292:	f7fc f921 	bl	80004d8 <__aeabi_dmul>
 8004296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800429a:	e7bc      	b.n	8004216 <_dtoa_r+0x5e6>
 800429c:	d10c      	bne.n	80042b8 <_dtoa_r+0x688>
 800429e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042a2:	2200      	movs	r2, #0
 80042a4:	4b25      	ldr	r3, [pc, #148]	@ (800433c <_dtoa_r+0x70c>)
 80042a6:	f7fc f917 	bl	80004d8 <__aeabi_dmul>
 80042aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80042ae:	f7fc fb99 	bl	80009e4 <__aeabi_dcmpge>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	f000 815b 	beq.w	800456e <_dtoa_r+0x93e>
 80042b8:	2400      	movs	r4, #0
 80042ba:	4625      	mov	r5, r4
 80042bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80042be:	4656      	mov	r6, sl
 80042c0:	43db      	mvns	r3, r3
 80042c2:	9304      	str	r3, [sp, #16]
 80042c4:	2700      	movs	r7, #0
 80042c6:	4621      	mov	r1, r4
 80042c8:	4658      	mov	r0, fp
 80042ca:	f000 fbb7 	bl	8004a3c <_Bfree>
 80042ce:	2d00      	cmp	r5, #0
 80042d0:	d0dc      	beq.n	800428c <_dtoa_r+0x65c>
 80042d2:	b12f      	cbz	r7, 80042e0 <_dtoa_r+0x6b0>
 80042d4:	42af      	cmp	r7, r5
 80042d6:	d003      	beq.n	80042e0 <_dtoa_r+0x6b0>
 80042d8:	4639      	mov	r1, r7
 80042da:	4658      	mov	r0, fp
 80042dc:	f000 fbae 	bl	8004a3c <_Bfree>
 80042e0:	4629      	mov	r1, r5
 80042e2:	4658      	mov	r0, fp
 80042e4:	f000 fbaa 	bl	8004a3c <_Bfree>
 80042e8:	e7d0      	b.n	800428c <_dtoa_r+0x65c>
 80042ea:	9704      	str	r7, [sp, #16]
 80042ec:	4633      	mov	r3, r6
 80042ee:	461e      	mov	r6, r3
 80042f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80042f4:	2a39      	cmp	r2, #57	@ 0x39
 80042f6:	d107      	bne.n	8004308 <_dtoa_r+0x6d8>
 80042f8:	459a      	cmp	sl, r3
 80042fa:	d1f8      	bne.n	80042ee <_dtoa_r+0x6be>
 80042fc:	9a04      	ldr	r2, [sp, #16]
 80042fe:	3201      	adds	r2, #1
 8004300:	9204      	str	r2, [sp, #16]
 8004302:	2230      	movs	r2, #48	@ 0x30
 8004304:	f88a 2000 	strb.w	r2, [sl]
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	3201      	adds	r2, #1
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	e7bd      	b.n	800428c <_dtoa_r+0x65c>
 8004310:	2200      	movs	r2, #0
 8004312:	4b09      	ldr	r3, [pc, #36]	@ (8004338 <_dtoa_r+0x708>)
 8004314:	f7fc f8e0 	bl	80004d8 <__aeabi_dmul>
 8004318:	2200      	movs	r2, #0
 800431a:	2300      	movs	r3, #0
 800431c:	4604      	mov	r4, r0
 800431e:	460d      	mov	r5, r1
 8004320:	f7fc fb42 	bl	80009a8 <__aeabi_dcmpeq>
 8004324:	2800      	cmp	r0, #0
 8004326:	f43f aebc 	beq.w	80040a2 <_dtoa_r+0x472>
 800432a:	e6f1      	b.n	8004110 <_dtoa_r+0x4e0>
 800432c:	08007320 	.word	0x08007320
 8004330:	3fe00000 	.word	0x3fe00000
 8004334:	3ff00000 	.word	0x3ff00000
 8004338:	40240000 	.word	0x40240000
 800433c:	40140000 	.word	0x40140000
 8004340:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004342:	2a00      	cmp	r2, #0
 8004344:	f000 80db 	beq.w	80044fe <_dtoa_r+0x8ce>
 8004348:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800434a:	2a01      	cmp	r2, #1
 800434c:	f300 80bf 	bgt.w	80044ce <_dtoa_r+0x89e>
 8004350:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004352:	2a00      	cmp	r2, #0
 8004354:	f000 80b7 	beq.w	80044c6 <_dtoa_r+0x896>
 8004358:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800435c:	4646      	mov	r6, r8
 800435e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004360:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004362:	2101      	movs	r1, #1
 8004364:	441a      	add	r2, r3
 8004366:	4658      	mov	r0, fp
 8004368:	4498      	add	r8, r3
 800436a:	9209      	str	r2, [sp, #36]	@ 0x24
 800436c:	f000 fc64 	bl	8004c38 <__i2b>
 8004370:	4605      	mov	r5, r0
 8004372:	b15e      	cbz	r6, 800438c <_dtoa_r+0x75c>
 8004374:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	dd08      	ble.n	800438c <_dtoa_r+0x75c>
 800437a:	42b3      	cmp	r3, r6
 800437c:	bfa8      	it	ge
 800437e:	4633      	movge	r3, r6
 8004380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004382:	eba8 0803 	sub.w	r8, r8, r3
 8004386:	1af6      	subs	r6, r6, r3
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	9309      	str	r3, [sp, #36]	@ 0x24
 800438c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800438e:	b1f3      	cbz	r3, 80043ce <_dtoa_r+0x79e>
 8004390:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80b7 	beq.w	8004506 <_dtoa_r+0x8d6>
 8004398:	b18c      	cbz	r4, 80043be <_dtoa_r+0x78e>
 800439a:	4629      	mov	r1, r5
 800439c:	4622      	mov	r2, r4
 800439e:	4658      	mov	r0, fp
 80043a0:	f000 fd08 	bl	8004db4 <__pow5mult>
 80043a4:	464a      	mov	r2, r9
 80043a6:	4601      	mov	r1, r0
 80043a8:	4605      	mov	r5, r0
 80043aa:	4658      	mov	r0, fp
 80043ac:	f000 fc5a 	bl	8004c64 <__multiply>
 80043b0:	4649      	mov	r1, r9
 80043b2:	9004      	str	r0, [sp, #16]
 80043b4:	4658      	mov	r0, fp
 80043b6:	f000 fb41 	bl	8004a3c <_Bfree>
 80043ba:	9b04      	ldr	r3, [sp, #16]
 80043bc:	4699      	mov	r9, r3
 80043be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80043c0:	1b1a      	subs	r2, r3, r4
 80043c2:	d004      	beq.n	80043ce <_dtoa_r+0x79e>
 80043c4:	4649      	mov	r1, r9
 80043c6:	4658      	mov	r0, fp
 80043c8:	f000 fcf4 	bl	8004db4 <__pow5mult>
 80043cc:	4681      	mov	r9, r0
 80043ce:	2101      	movs	r1, #1
 80043d0:	4658      	mov	r0, fp
 80043d2:	f000 fc31 	bl	8004c38 <__i2b>
 80043d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80043d8:	4604      	mov	r4, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 81c9 	beq.w	8004772 <_dtoa_r+0xb42>
 80043e0:	461a      	mov	r2, r3
 80043e2:	4601      	mov	r1, r0
 80043e4:	4658      	mov	r0, fp
 80043e6:	f000 fce5 	bl	8004db4 <__pow5mult>
 80043ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80043ec:	4604      	mov	r4, r0
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	f300 808f 	bgt.w	8004512 <_dtoa_r+0x8e2>
 80043f4:	9b02      	ldr	r3, [sp, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f040 8087 	bne.w	800450a <_dtoa_r+0x8da>
 80043fc:	9b03      	ldr	r3, [sp, #12]
 80043fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004402:	2b00      	cmp	r3, #0
 8004404:	f040 8083 	bne.w	800450e <_dtoa_r+0x8de>
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800440e:	0d1b      	lsrs	r3, r3, #20
 8004410:	051b      	lsls	r3, r3, #20
 8004412:	b12b      	cbz	r3, 8004420 <_dtoa_r+0x7f0>
 8004414:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004416:	f108 0801 	add.w	r8, r8, #1
 800441a:	3301      	adds	r3, #1
 800441c:	9309      	str	r3, [sp, #36]	@ 0x24
 800441e:	2301      	movs	r3, #1
 8004420:	930a      	str	r3, [sp, #40]	@ 0x28
 8004422:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 81aa 	beq.w	800477e <_dtoa_r+0xb4e>
 800442a:	6923      	ldr	r3, [r4, #16]
 800442c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004430:	6918      	ldr	r0, [r3, #16]
 8004432:	f000 fbb5 	bl	8004ba0 <__hi0bits>
 8004436:	f1c0 0020 	rsb	r0, r0, #32
 800443a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800443c:	4418      	add	r0, r3
 800443e:	f010 001f 	ands.w	r0, r0, #31
 8004442:	d071      	beq.n	8004528 <_dtoa_r+0x8f8>
 8004444:	f1c0 0320 	rsb	r3, r0, #32
 8004448:	2b04      	cmp	r3, #4
 800444a:	dd65      	ble.n	8004518 <_dtoa_r+0x8e8>
 800444c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800444e:	f1c0 001c 	rsb	r0, r0, #28
 8004452:	4403      	add	r3, r0
 8004454:	4480      	add	r8, r0
 8004456:	4406      	add	r6, r0
 8004458:	9309      	str	r3, [sp, #36]	@ 0x24
 800445a:	f1b8 0f00 	cmp.w	r8, #0
 800445e:	dd05      	ble.n	800446c <_dtoa_r+0x83c>
 8004460:	4649      	mov	r1, r9
 8004462:	4642      	mov	r2, r8
 8004464:	4658      	mov	r0, fp
 8004466:	f000 fcff 	bl	8004e68 <__lshift>
 800446a:	4681      	mov	r9, r0
 800446c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800446e:	2b00      	cmp	r3, #0
 8004470:	dd05      	ble.n	800447e <_dtoa_r+0x84e>
 8004472:	4621      	mov	r1, r4
 8004474:	461a      	mov	r2, r3
 8004476:	4658      	mov	r0, fp
 8004478:	f000 fcf6 	bl	8004e68 <__lshift>
 800447c:	4604      	mov	r4, r0
 800447e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004480:	2b00      	cmp	r3, #0
 8004482:	d053      	beq.n	800452c <_dtoa_r+0x8fc>
 8004484:	4621      	mov	r1, r4
 8004486:	4648      	mov	r0, r9
 8004488:	f000 fd5a 	bl	8004f40 <__mcmp>
 800448c:	2800      	cmp	r0, #0
 800448e:	da4d      	bge.n	800452c <_dtoa_r+0x8fc>
 8004490:	1e7b      	subs	r3, r7, #1
 8004492:	4649      	mov	r1, r9
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	220a      	movs	r2, #10
 8004498:	2300      	movs	r3, #0
 800449a:	4658      	mov	r0, fp
 800449c:	f000 faf0 	bl	8004a80 <__multadd>
 80044a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80044a2:	4681      	mov	r9, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 816c 	beq.w	8004782 <_dtoa_r+0xb52>
 80044aa:	2300      	movs	r3, #0
 80044ac:	4629      	mov	r1, r5
 80044ae:	220a      	movs	r2, #10
 80044b0:	4658      	mov	r0, fp
 80044b2:	f000 fae5 	bl	8004a80 <__multadd>
 80044b6:	9b08      	ldr	r3, [sp, #32]
 80044b8:	4605      	mov	r5, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	dc61      	bgt.n	8004582 <_dtoa_r+0x952>
 80044be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	dc3b      	bgt.n	800453c <_dtoa_r+0x90c>
 80044c4:	e05d      	b.n	8004582 <_dtoa_r+0x952>
 80044c6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80044c8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80044cc:	e746      	b.n	800435c <_dtoa_r+0x72c>
 80044ce:	9b07      	ldr	r3, [sp, #28]
 80044d0:	1e5c      	subs	r4, r3, #1
 80044d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80044d4:	42a3      	cmp	r3, r4
 80044d6:	bfbf      	itttt	lt
 80044d8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80044da:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80044dc:	1ae3      	sublt	r3, r4, r3
 80044de:	18d2      	addlt	r2, r2, r3
 80044e0:	bfa8      	it	ge
 80044e2:	1b1c      	subge	r4, r3, r4
 80044e4:	9b07      	ldr	r3, [sp, #28]
 80044e6:	bfbe      	ittt	lt
 80044e8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80044ea:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80044ec:	2400      	movlt	r4, #0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	bfb5      	itete	lt
 80044f2:	eba8 0603 	sublt.w	r6, r8, r3
 80044f6:	4646      	movge	r6, r8
 80044f8:	2300      	movlt	r3, #0
 80044fa:	9b07      	ldrge	r3, [sp, #28]
 80044fc:	e730      	b.n	8004360 <_dtoa_r+0x730>
 80044fe:	4646      	mov	r6, r8
 8004500:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004502:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8004504:	e735      	b.n	8004372 <_dtoa_r+0x742>
 8004506:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004508:	e75c      	b.n	80043c4 <_dtoa_r+0x794>
 800450a:	2300      	movs	r3, #0
 800450c:	e788      	b.n	8004420 <_dtoa_r+0x7f0>
 800450e:	9b02      	ldr	r3, [sp, #8]
 8004510:	e786      	b.n	8004420 <_dtoa_r+0x7f0>
 8004512:	2300      	movs	r3, #0
 8004514:	930a      	str	r3, [sp, #40]	@ 0x28
 8004516:	e788      	b.n	800442a <_dtoa_r+0x7fa>
 8004518:	d09f      	beq.n	800445a <_dtoa_r+0x82a>
 800451a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800451c:	331c      	adds	r3, #28
 800451e:	441a      	add	r2, r3
 8004520:	4498      	add	r8, r3
 8004522:	441e      	add	r6, r3
 8004524:	9209      	str	r2, [sp, #36]	@ 0x24
 8004526:	e798      	b.n	800445a <_dtoa_r+0x82a>
 8004528:	4603      	mov	r3, r0
 800452a:	e7f6      	b.n	800451a <_dtoa_r+0x8ea>
 800452c:	9b07      	ldr	r3, [sp, #28]
 800452e:	9704      	str	r7, [sp, #16]
 8004530:	2b00      	cmp	r3, #0
 8004532:	dc20      	bgt.n	8004576 <_dtoa_r+0x946>
 8004534:	9308      	str	r3, [sp, #32]
 8004536:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004538:	2b02      	cmp	r3, #2
 800453a:	dd1e      	ble.n	800457a <_dtoa_r+0x94a>
 800453c:	9b08      	ldr	r3, [sp, #32]
 800453e:	2b00      	cmp	r3, #0
 8004540:	f47f aebc 	bne.w	80042bc <_dtoa_r+0x68c>
 8004544:	4621      	mov	r1, r4
 8004546:	2205      	movs	r2, #5
 8004548:	4658      	mov	r0, fp
 800454a:	f000 fa99 	bl	8004a80 <__multadd>
 800454e:	4601      	mov	r1, r0
 8004550:	4604      	mov	r4, r0
 8004552:	4648      	mov	r0, r9
 8004554:	f000 fcf4 	bl	8004f40 <__mcmp>
 8004558:	2800      	cmp	r0, #0
 800455a:	f77f aeaf 	ble.w	80042bc <_dtoa_r+0x68c>
 800455e:	2331      	movs	r3, #49	@ 0x31
 8004560:	4656      	mov	r6, sl
 8004562:	f806 3b01 	strb.w	r3, [r6], #1
 8004566:	9b04      	ldr	r3, [sp, #16]
 8004568:	3301      	adds	r3, #1
 800456a:	9304      	str	r3, [sp, #16]
 800456c:	e6aa      	b.n	80042c4 <_dtoa_r+0x694>
 800456e:	9c07      	ldr	r4, [sp, #28]
 8004570:	9704      	str	r7, [sp, #16]
 8004572:	4625      	mov	r5, r4
 8004574:	e7f3      	b.n	800455e <_dtoa_r+0x92e>
 8004576:	9b07      	ldr	r3, [sp, #28]
 8004578:	9308      	str	r3, [sp, #32]
 800457a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 8104 	beq.w	800478a <_dtoa_r+0xb5a>
 8004582:	2e00      	cmp	r6, #0
 8004584:	dd05      	ble.n	8004592 <_dtoa_r+0x962>
 8004586:	4629      	mov	r1, r5
 8004588:	4632      	mov	r2, r6
 800458a:	4658      	mov	r0, fp
 800458c:	f000 fc6c 	bl	8004e68 <__lshift>
 8004590:	4605      	mov	r5, r0
 8004592:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d05a      	beq.n	800464e <_dtoa_r+0xa1e>
 8004598:	4658      	mov	r0, fp
 800459a:	6869      	ldr	r1, [r5, #4]
 800459c:	f000 fa0e 	bl	80049bc <_Balloc>
 80045a0:	4606      	mov	r6, r0
 80045a2:	b928      	cbnz	r0, 80045b0 <_dtoa_r+0x980>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80045aa:	4b83      	ldr	r3, [pc, #524]	@ (80047b8 <_dtoa_r+0xb88>)
 80045ac:	f7ff bb54 	b.w	8003c58 <_dtoa_r+0x28>
 80045b0:	692a      	ldr	r2, [r5, #16]
 80045b2:	f105 010c 	add.w	r1, r5, #12
 80045b6:	3202      	adds	r2, #2
 80045b8:	0092      	lsls	r2, r2, #2
 80045ba:	300c      	adds	r0, #12
 80045bc:	f001 ff5e 	bl	800647c <memcpy>
 80045c0:	2201      	movs	r2, #1
 80045c2:	4631      	mov	r1, r6
 80045c4:	4658      	mov	r0, fp
 80045c6:	f000 fc4f 	bl	8004e68 <__lshift>
 80045ca:	462f      	mov	r7, r5
 80045cc:	4605      	mov	r5, r0
 80045ce:	f10a 0301 	add.w	r3, sl, #1
 80045d2:	9307      	str	r3, [sp, #28]
 80045d4:	9b08      	ldr	r3, [sp, #32]
 80045d6:	4453      	add	r3, sl
 80045d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045da:	9b02      	ldr	r3, [sp, #8]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80045e2:	9b07      	ldr	r3, [sp, #28]
 80045e4:	4621      	mov	r1, r4
 80045e6:	3b01      	subs	r3, #1
 80045e8:	4648      	mov	r0, r9
 80045ea:	9302      	str	r3, [sp, #8]
 80045ec:	f7ff fa98 	bl	8003b20 <quorem>
 80045f0:	4639      	mov	r1, r7
 80045f2:	9008      	str	r0, [sp, #32]
 80045f4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80045f8:	4648      	mov	r0, r9
 80045fa:	f000 fca1 	bl	8004f40 <__mcmp>
 80045fe:	462a      	mov	r2, r5
 8004600:	9009      	str	r0, [sp, #36]	@ 0x24
 8004602:	4621      	mov	r1, r4
 8004604:	4658      	mov	r0, fp
 8004606:	f000 fcb7 	bl	8004f78 <__mdiff>
 800460a:	68c2      	ldr	r2, [r0, #12]
 800460c:	4606      	mov	r6, r0
 800460e:	bb02      	cbnz	r2, 8004652 <_dtoa_r+0xa22>
 8004610:	4601      	mov	r1, r0
 8004612:	4648      	mov	r0, r9
 8004614:	f000 fc94 	bl	8004f40 <__mcmp>
 8004618:	4602      	mov	r2, r0
 800461a:	4631      	mov	r1, r6
 800461c:	4658      	mov	r0, fp
 800461e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004620:	f000 fa0c 	bl	8004a3c <_Bfree>
 8004624:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004626:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004628:	9e07      	ldr	r6, [sp, #28]
 800462a:	ea43 0102 	orr.w	r1, r3, r2
 800462e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004630:	4319      	orrs	r1, r3
 8004632:	d110      	bne.n	8004656 <_dtoa_r+0xa26>
 8004634:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8004638:	d029      	beq.n	800468e <_dtoa_r+0xa5e>
 800463a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800463c:	2b00      	cmp	r3, #0
 800463e:	dd02      	ble.n	8004646 <_dtoa_r+0xa16>
 8004640:	9b08      	ldr	r3, [sp, #32]
 8004642:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8004646:	9b02      	ldr	r3, [sp, #8]
 8004648:	f883 8000 	strb.w	r8, [r3]
 800464c:	e63b      	b.n	80042c6 <_dtoa_r+0x696>
 800464e:	4628      	mov	r0, r5
 8004650:	e7bb      	b.n	80045ca <_dtoa_r+0x99a>
 8004652:	2201      	movs	r2, #1
 8004654:	e7e1      	b.n	800461a <_dtoa_r+0x9ea>
 8004656:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004658:	2b00      	cmp	r3, #0
 800465a:	db04      	blt.n	8004666 <_dtoa_r+0xa36>
 800465c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800465e:	430b      	orrs	r3, r1
 8004660:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004662:	430b      	orrs	r3, r1
 8004664:	d120      	bne.n	80046a8 <_dtoa_r+0xa78>
 8004666:	2a00      	cmp	r2, #0
 8004668:	dded      	ble.n	8004646 <_dtoa_r+0xa16>
 800466a:	4649      	mov	r1, r9
 800466c:	2201      	movs	r2, #1
 800466e:	4658      	mov	r0, fp
 8004670:	f000 fbfa 	bl	8004e68 <__lshift>
 8004674:	4621      	mov	r1, r4
 8004676:	4681      	mov	r9, r0
 8004678:	f000 fc62 	bl	8004f40 <__mcmp>
 800467c:	2800      	cmp	r0, #0
 800467e:	dc03      	bgt.n	8004688 <_dtoa_r+0xa58>
 8004680:	d1e1      	bne.n	8004646 <_dtoa_r+0xa16>
 8004682:	f018 0f01 	tst.w	r8, #1
 8004686:	d0de      	beq.n	8004646 <_dtoa_r+0xa16>
 8004688:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800468c:	d1d8      	bne.n	8004640 <_dtoa_r+0xa10>
 800468e:	2339      	movs	r3, #57	@ 0x39
 8004690:	9a02      	ldr	r2, [sp, #8]
 8004692:	7013      	strb	r3, [r2, #0]
 8004694:	4633      	mov	r3, r6
 8004696:	461e      	mov	r6, r3
 8004698:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800469c:	3b01      	subs	r3, #1
 800469e:	2a39      	cmp	r2, #57	@ 0x39
 80046a0:	d052      	beq.n	8004748 <_dtoa_r+0xb18>
 80046a2:	3201      	adds	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
 80046a6:	e60e      	b.n	80042c6 <_dtoa_r+0x696>
 80046a8:	2a00      	cmp	r2, #0
 80046aa:	dd07      	ble.n	80046bc <_dtoa_r+0xa8c>
 80046ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80046b0:	d0ed      	beq.n	800468e <_dtoa_r+0xa5e>
 80046b2:	9a02      	ldr	r2, [sp, #8]
 80046b4:	f108 0301 	add.w	r3, r8, #1
 80046b8:	7013      	strb	r3, [r2, #0]
 80046ba:	e604      	b.n	80042c6 <_dtoa_r+0x696>
 80046bc:	9b07      	ldr	r3, [sp, #28]
 80046be:	9a07      	ldr	r2, [sp, #28]
 80046c0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80046c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d028      	beq.n	800471c <_dtoa_r+0xaec>
 80046ca:	4649      	mov	r1, r9
 80046cc:	2300      	movs	r3, #0
 80046ce:	220a      	movs	r2, #10
 80046d0:	4658      	mov	r0, fp
 80046d2:	f000 f9d5 	bl	8004a80 <__multadd>
 80046d6:	42af      	cmp	r7, r5
 80046d8:	4681      	mov	r9, r0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	f04f 020a 	mov.w	r2, #10
 80046e2:	4639      	mov	r1, r7
 80046e4:	4658      	mov	r0, fp
 80046e6:	d107      	bne.n	80046f8 <_dtoa_r+0xac8>
 80046e8:	f000 f9ca 	bl	8004a80 <__multadd>
 80046ec:	4607      	mov	r7, r0
 80046ee:	4605      	mov	r5, r0
 80046f0:	9b07      	ldr	r3, [sp, #28]
 80046f2:	3301      	adds	r3, #1
 80046f4:	9307      	str	r3, [sp, #28]
 80046f6:	e774      	b.n	80045e2 <_dtoa_r+0x9b2>
 80046f8:	f000 f9c2 	bl	8004a80 <__multadd>
 80046fc:	4629      	mov	r1, r5
 80046fe:	4607      	mov	r7, r0
 8004700:	2300      	movs	r3, #0
 8004702:	220a      	movs	r2, #10
 8004704:	4658      	mov	r0, fp
 8004706:	f000 f9bb 	bl	8004a80 <__multadd>
 800470a:	4605      	mov	r5, r0
 800470c:	e7f0      	b.n	80046f0 <_dtoa_r+0xac0>
 800470e:	9b08      	ldr	r3, [sp, #32]
 8004710:	2700      	movs	r7, #0
 8004712:	2b00      	cmp	r3, #0
 8004714:	bfcc      	ite	gt
 8004716:	461e      	movgt	r6, r3
 8004718:	2601      	movle	r6, #1
 800471a:	4456      	add	r6, sl
 800471c:	4649      	mov	r1, r9
 800471e:	2201      	movs	r2, #1
 8004720:	4658      	mov	r0, fp
 8004722:	f000 fba1 	bl	8004e68 <__lshift>
 8004726:	4621      	mov	r1, r4
 8004728:	4681      	mov	r9, r0
 800472a:	f000 fc09 	bl	8004f40 <__mcmp>
 800472e:	2800      	cmp	r0, #0
 8004730:	dcb0      	bgt.n	8004694 <_dtoa_r+0xa64>
 8004732:	d102      	bne.n	800473a <_dtoa_r+0xb0a>
 8004734:	f018 0f01 	tst.w	r8, #1
 8004738:	d1ac      	bne.n	8004694 <_dtoa_r+0xa64>
 800473a:	4633      	mov	r3, r6
 800473c:	461e      	mov	r6, r3
 800473e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004742:	2a30      	cmp	r2, #48	@ 0x30
 8004744:	d0fa      	beq.n	800473c <_dtoa_r+0xb0c>
 8004746:	e5be      	b.n	80042c6 <_dtoa_r+0x696>
 8004748:	459a      	cmp	sl, r3
 800474a:	d1a4      	bne.n	8004696 <_dtoa_r+0xa66>
 800474c:	9b04      	ldr	r3, [sp, #16]
 800474e:	3301      	adds	r3, #1
 8004750:	9304      	str	r3, [sp, #16]
 8004752:	2331      	movs	r3, #49	@ 0x31
 8004754:	f88a 3000 	strb.w	r3, [sl]
 8004758:	e5b5      	b.n	80042c6 <_dtoa_r+0x696>
 800475a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800475c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80047bc <_dtoa_r+0xb8c>
 8004760:	b11b      	cbz	r3, 800476a <_dtoa_r+0xb3a>
 8004762:	f10a 0308 	add.w	r3, sl, #8
 8004766:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	4650      	mov	r0, sl
 800476c:	b017      	add	sp, #92	@ 0x5c
 800476e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004772:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004774:	2b01      	cmp	r3, #1
 8004776:	f77f ae3d 	ble.w	80043f4 <_dtoa_r+0x7c4>
 800477a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800477c:	930a      	str	r3, [sp, #40]	@ 0x28
 800477e:	2001      	movs	r0, #1
 8004780:	e65b      	b.n	800443a <_dtoa_r+0x80a>
 8004782:	9b08      	ldr	r3, [sp, #32]
 8004784:	2b00      	cmp	r3, #0
 8004786:	f77f aed6 	ble.w	8004536 <_dtoa_r+0x906>
 800478a:	4656      	mov	r6, sl
 800478c:	4621      	mov	r1, r4
 800478e:	4648      	mov	r0, r9
 8004790:	f7ff f9c6 	bl	8003b20 <quorem>
 8004794:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8004798:	9b08      	ldr	r3, [sp, #32]
 800479a:	f806 8b01 	strb.w	r8, [r6], #1
 800479e:	eba6 020a 	sub.w	r2, r6, sl
 80047a2:	4293      	cmp	r3, r2
 80047a4:	ddb3      	ble.n	800470e <_dtoa_r+0xade>
 80047a6:	4649      	mov	r1, r9
 80047a8:	2300      	movs	r3, #0
 80047aa:	220a      	movs	r2, #10
 80047ac:	4658      	mov	r0, fp
 80047ae:	f000 f967 	bl	8004a80 <__multadd>
 80047b2:	4681      	mov	r9, r0
 80047b4:	e7ea      	b.n	800478c <_dtoa_r+0xb5c>
 80047b6:	bf00      	nop
 80047b8:	0800727d 	.word	0x0800727d
 80047bc:	08007201 	.word	0x08007201

080047c0 <_free_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4605      	mov	r5, r0
 80047c4:	2900      	cmp	r1, #0
 80047c6:	d040      	beq.n	800484a <_free_r+0x8a>
 80047c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047cc:	1f0c      	subs	r4, r1, #4
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	bfb8      	it	lt
 80047d2:	18e4      	addlt	r4, r4, r3
 80047d4:	f000 f8e6 	bl	80049a4 <__malloc_lock>
 80047d8:	4a1c      	ldr	r2, [pc, #112]	@ (800484c <_free_r+0x8c>)
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	b933      	cbnz	r3, 80047ec <_free_r+0x2c>
 80047de:	6063      	str	r3, [r4, #4]
 80047e0:	6014      	str	r4, [r2, #0]
 80047e2:	4628      	mov	r0, r5
 80047e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047e8:	f000 b8e2 	b.w	80049b0 <__malloc_unlock>
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	d908      	bls.n	8004802 <_free_r+0x42>
 80047f0:	6820      	ldr	r0, [r4, #0]
 80047f2:	1821      	adds	r1, r4, r0
 80047f4:	428b      	cmp	r3, r1
 80047f6:	bf01      	itttt	eq
 80047f8:	6819      	ldreq	r1, [r3, #0]
 80047fa:	685b      	ldreq	r3, [r3, #4]
 80047fc:	1809      	addeq	r1, r1, r0
 80047fe:	6021      	streq	r1, [r4, #0]
 8004800:	e7ed      	b.n	80047de <_free_r+0x1e>
 8004802:	461a      	mov	r2, r3
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	b10b      	cbz	r3, 800480c <_free_r+0x4c>
 8004808:	42a3      	cmp	r3, r4
 800480a:	d9fa      	bls.n	8004802 <_free_r+0x42>
 800480c:	6811      	ldr	r1, [r2, #0]
 800480e:	1850      	adds	r0, r2, r1
 8004810:	42a0      	cmp	r0, r4
 8004812:	d10b      	bne.n	800482c <_free_r+0x6c>
 8004814:	6820      	ldr	r0, [r4, #0]
 8004816:	4401      	add	r1, r0
 8004818:	1850      	adds	r0, r2, r1
 800481a:	4283      	cmp	r3, r0
 800481c:	6011      	str	r1, [r2, #0]
 800481e:	d1e0      	bne.n	80047e2 <_free_r+0x22>
 8004820:	6818      	ldr	r0, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4408      	add	r0, r1
 8004826:	6010      	str	r0, [r2, #0]
 8004828:	6053      	str	r3, [r2, #4]
 800482a:	e7da      	b.n	80047e2 <_free_r+0x22>
 800482c:	d902      	bls.n	8004834 <_free_r+0x74>
 800482e:	230c      	movs	r3, #12
 8004830:	602b      	str	r3, [r5, #0]
 8004832:	e7d6      	b.n	80047e2 <_free_r+0x22>
 8004834:	6820      	ldr	r0, [r4, #0]
 8004836:	1821      	adds	r1, r4, r0
 8004838:	428b      	cmp	r3, r1
 800483a:	bf01      	itttt	eq
 800483c:	6819      	ldreq	r1, [r3, #0]
 800483e:	685b      	ldreq	r3, [r3, #4]
 8004840:	1809      	addeq	r1, r1, r0
 8004842:	6021      	streq	r1, [r4, #0]
 8004844:	6063      	str	r3, [r4, #4]
 8004846:	6054      	str	r4, [r2, #4]
 8004848:	e7cb      	b.n	80047e2 <_free_r+0x22>
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	20000418 	.word	0x20000418

08004850 <malloc>:
 8004850:	4b02      	ldr	r3, [pc, #8]	@ (800485c <malloc+0xc>)
 8004852:	4601      	mov	r1, r0
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	f000 b825 	b.w	80048a4 <_malloc_r>
 800485a:	bf00      	nop
 800485c:	20000018 	.word	0x20000018

08004860 <sbrk_aligned>:
 8004860:	b570      	push	{r4, r5, r6, lr}
 8004862:	4e0f      	ldr	r6, [pc, #60]	@ (80048a0 <sbrk_aligned+0x40>)
 8004864:	460c      	mov	r4, r1
 8004866:	6831      	ldr	r1, [r6, #0]
 8004868:	4605      	mov	r5, r0
 800486a:	b911      	cbnz	r1, 8004872 <sbrk_aligned+0x12>
 800486c:	f001 fdf6 	bl	800645c <_sbrk_r>
 8004870:	6030      	str	r0, [r6, #0]
 8004872:	4621      	mov	r1, r4
 8004874:	4628      	mov	r0, r5
 8004876:	f001 fdf1 	bl	800645c <_sbrk_r>
 800487a:	1c43      	adds	r3, r0, #1
 800487c:	d103      	bne.n	8004886 <sbrk_aligned+0x26>
 800487e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004882:	4620      	mov	r0, r4
 8004884:	bd70      	pop	{r4, r5, r6, pc}
 8004886:	1cc4      	adds	r4, r0, #3
 8004888:	f024 0403 	bic.w	r4, r4, #3
 800488c:	42a0      	cmp	r0, r4
 800488e:	d0f8      	beq.n	8004882 <sbrk_aligned+0x22>
 8004890:	1a21      	subs	r1, r4, r0
 8004892:	4628      	mov	r0, r5
 8004894:	f001 fde2 	bl	800645c <_sbrk_r>
 8004898:	3001      	adds	r0, #1
 800489a:	d1f2      	bne.n	8004882 <sbrk_aligned+0x22>
 800489c:	e7ef      	b.n	800487e <sbrk_aligned+0x1e>
 800489e:	bf00      	nop
 80048a0:	20000414 	.word	0x20000414

080048a4 <_malloc_r>:
 80048a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048a8:	1ccd      	adds	r5, r1, #3
 80048aa:	f025 0503 	bic.w	r5, r5, #3
 80048ae:	3508      	adds	r5, #8
 80048b0:	2d0c      	cmp	r5, #12
 80048b2:	bf38      	it	cc
 80048b4:	250c      	movcc	r5, #12
 80048b6:	2d00      	cmp	r5, #0
 80048b8:	4606      	mov	r6, r0
 80048ba:	db01      	blt.n	80048c0 <_malloc_r+0x1c>
 80048bc:	42a9      	cmp	r1, r5
 80048be:	d904      	bls.n	80048ca <_malloc_r+0x26>
 80048c0:	230c      	movs	r3, #12
 80048c2:	6033      	str	r3, [r6, #0]
 80048c4:	2000      	movs	r0, #0
 80048c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049a0 <_malloc_r+0xfc>
 80048ce:	f000 f869 	bl	80049a4 <__malloc_lock>
 80048d2:	f8d8 3000 	ldr.w	r3, [r8]
 80048d6:	461c      	mov	r4, r3
 80048d8:	bb44      	cbnz	r4, 800492c <_malloc_r+0x88>
 80048da:	4629      	mov	r1, r5
 80048dc:	4630      	mov	r0, r6
 80048de:	f7ff ffbf 	bl	8004860 <sbrk_aligned>
 80048e2:	1c43      	adds	r3, r0, #1
 80048e4:	4604      	mov	r4, r0
 80048e6:	d158      	bne.n	800499a <_malloc_r+0xf6>
 80048e8:	f8d8 4000 	ldr.w	r4, [r8]
 80048ec:	4627      	mov	r7, r4
 80048ee:	2f00      	cmp	r7, #0
 80048f0:	d143      	bne.n	800497a <_malloc_r+0xd6>
 80048f2:	2c00      	cmp	r4, #0
 80048f4:	d04b      	beq.n	800498e <_malloc_r+0xea>
 80048f6:	6823      	ldr	r3, [r4, #0]
 80048f8:	4639      	mov	r1, r7
 80048fa:	4630      	mov	r0, r6
 80048fc:	eb04 0903 	add.w	r9, r4, r3
 8004900:	f001 fdac 	bl	800645c <_sbrk_r>
 8004904:	4581      	cmp	r9, r0
 8004906:	d142      	bne.n	800498e <_malloc_r+0xea>
 8004908:	6821      	ldr	r1, [r4, #0]
 800490a:	4630      	mov	r0, r6
 800490c:	1a6d      	subs	r5, r5, r1
 800490e:	4629      	mov	r1, r5
 8004910:	f7ff ffa6 	bl	8004860 <sbrk_aligned>
 8004914:	3001      	adds	r0, #1
 8004916:	d03a      	beq.n	800498e <_malloc_r+0xea>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	442b      	add	r3, r5
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	f8d8 3000 	ldr.w	r3, [r8]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	bb62      	cbnz	r2, 8004980 <_malloc_r+0xdc>
 8004926:	f8c8 7000 	str.w	r7, [r8]
 800492a:	e00f      	b.n	800494c <_malloc_r+0xa8>
 800492c:	6822      	ldr	r2, [r4, #0]
 800492e:	1b52      	subs	r2, r2, r5
 8004930:	d420      	bmi.n	8004974 <_malloc_r+0xd0>
 8004932:	2a0b      	cmp	r2, #11
 8004934:	d917      	bls.n	8004966 <_malloc_r+0xc2>
 8004936:	1961      	adds	r1, r4, r5
 8004938:	42a3      	cmp	r3, r4
 800493a:	6025      	str	r5, [r4, #0]
 800493c:	bf18      	it	ne
 800493e:	6059      	strne	r1, [r3, #4]
 8004940:	6863      	ldr	r3, [r4, #4]
 8004942:	bf08      	it	eq
 8004944:	f8c8 1000 	streq.w	r1, [r8]
 8004948:	5162      	str	r2, [r4, r5]
 800494a:	604b      	str	r3, [r1, #4]
 800494c:	4630      	mov	r0, r6
 800494e:	f000 f82f 	bl	80049b0 <__malloc_unlock>
 8004952:	f104 000b 	add.w	r0, r4, #11
 8004956:	1d23      	adds	r3, r4, #4
 8004958:	f020 0007 	bic.w	r0, r0, #7
 800495c:	1ac2      	subs	r2, r0, r3
 800495e:	bf1c      	itt	ne
 8004960:	1a1b      	subne	r3, r3, r0
 8004962:	50a3      	strne	r3, [r4, r2]
 8004964:	e7af      	b.n	80048c6 <_malloc_r+0x22>
 8004966:	6862      	ldr	r2, [r4, #4]
 8004968:	42a3      	cmp	r3, r4
 800496a:	bf0c      	ite	eq
 800496c:	f8c8 2000 	streq.w	r2, [r8]
 8004970:	605a      	strne	r2, [r3, #4]
 8004972:	e7eb      	b.n	800494c <_malloc_r+0xa8>
 8004974:	4623      	mov	r3, r4
 8004976:	6864      	ldr	r4, [r4, #4]
 8004978:	e7ae      	b.n	80048d8 <_malloc_r+0x34>
 800497a:	463c      	mov	r4, r7
 800497c:	687f      	ldr	r7, [r7, #4]
 800497e:	e7b6      	b.n	80048ee <_malloc_r+0x4a>
 8004980:	461a      	mov	r2, r3
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	42a3      	cmp	r3, r4
 8004986:	d1fb      	bne.n	8004980 <_malloc_r+0xdc>
 8004988:	2300      	movs	r3, #0
 800498a:	6053      	str	r3, [r2, #4]
 800498c:	e7de      	b.n	800494c <_malloc_r+0xa8>
 800498e:	230c      	movs	r3, #12
 8004990:	4630      	mov	r0, r6
 8004992:	6033      	str	r3, [r6, #0]
 8004994:	f000 f80c 	bl	80049b0 <__malloc_unlock>
 8004998:	e794      	b.n	80048c4 <_malloc_r+0x20>
 800499a:	6005      	str	r5, [r0, #0]
 800499c:	e7d6      	b.n	800494c <_malloc_r+0xa8>
 800499e:	bf00      	nop
 80049a0:	20000418 	.word	0x20000418

080049a4 <__malloc_lock>:
 80049a4:	4801      	ldr	r0, [pc, #4]	@ (80049ac <__malloc_lock+0x8>)
 80049a6:	f7ff b8a6 	b.w	8003af6 <__retarget_lock_acquire_recursive>
 80049aa:	bf00      	nop
 80049ac:	20000410 	.word	0x20000410

080049b0 <__malloc_unlock>:
 80049b0:	4801      	ldr	r0, [pc, #4]	@ (80049b8 <__malloc_unlock+0x8>)
 80049b2:	f7ff b8a1 	b.w	8003af8 <__retarget_lock_release_recursive>
 80049b6:	bf00      	nop
 80049b8:	20000410 	.word	0x20000410

080049bc <_Balloc>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	69c6      	ldr	r6, [r0, #28]
 80049c0:	4604      	mov	r4, r0
 80049c2:	460d      	mov	r5, r1
 80049c4:	b976      	cbnz	r6, 80049e4 <_Balloc+0x28>
 80049c6:	2010      	movs	r0, #16
 80049c8:	f7ff ff42 	bl	8004850 <malloc>
 80049cc:	4602      	mov	r2, r0
 80049ce:	61e0      	str	r0, [r4, #28]
 80049d0:	b920      	cbnz	r0, 80049dc <_Balloc+0x20>
 80049d2:	216b      	movs	r1, #107	@ 0x6b
 80049d4:	4b17      	ldr	r3, [pc, #92]	@ (8004a34 <_Balloc+0x78>)
 80049d6:	4818      	ldr	r0, [pc, #96]	@ (8004a38 <_Balloc+0x7c>)
 80049d8:	f001 fd64 	bl	80064a4 <__assert_func>
 80049dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80049e0:	6006      	str	r6, [r0, #0]
 80049e2:	60c6      	str	r6, [r0, #12]
 80049e4:	69e6      	ldr	r6, [r4, #28]
 80049e6:	68f3      	ldr	r3, [r6, #12]
 80049e8:	b183      	cbz	r3, 8004a0c <_Balloc+0x50>
 80049ea:	69e3      	ldr	r3, [r4, #28]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80049f2:	b9b8      	cbnz	r0, 8004a24 <_Balloc+0x68>
 80049f4:	2101      	movs	r1, #1
 80049f6:	fa01 f605 	lsl.w	r6, r1, r5
 80049fa:	1d72      	adds	r2, r6, #5
 80049fc:	4620      	mov	r0, r4
 80049fe:	0092      	lsls	r2, r2, #2
 8004a00:	f001 fd6e 	bl	80064e0 <_calloc_r>
 8004a04:	b160      	cbz	r0, 8004a20 <_Balloc+0x64>
 8004a06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004a0a:	e00e      	b.n	8004a2a <_Balloc+0x6e>
 8004a0c:	2221      	movs	r2, #33	@ 0x21
 8004a0e:	2104      	movs	r1, #4
 8004a10:	4620      	mov	r0, r4
 8004a12:	f001 fd65 	bl	80064e0 <_calloc_r>
 8004a16:	69e3      	ldr	r3, [r4, #28]
 8004a18:	60f0      	str	r0, [r6, #12]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e4      	bne.n	80049ea <_Balloc+0x2e>
 8004a20:	2000      	movs	r0, #0
 8004a22:	bd70      	pop	{r4, r5, r6, pc}
 8004a24:	6802      	ldr	r2, [r0, #0]
 8004a26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004a30:	e7f7      	b.n	8004a22 <_Balloc+0x66>
 8004a32:	bf00      	nop
 8004a34:	0800720e 	.word	0x0800720e
 8004a38:	0800728e 	.word	0x0800728e

08004a3c <_Bfree>:
 8004a3c:	b570      	push	{r4, r5, r6, lr}
 8004a3e:	69c6      	ldr	r6, [r0, #28]
 8004a40:	4605      	mov	r5, r0
 8004a42:	460c      	mov	r4, r1
 8004a44:	b976      	cbnz	r6, 8004a64 <_Bfree+0x28>
 8004a46:	2010      	movs	r0, #16
 8004a48:	f7ff ff02 	bl	8004850 <malloc>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	61e8      	str	r0, [r5, #28]
 8004a50:	b920      	cbnz	r0, 8004a5c <_Bfree+0x20>
 8004a52:	218f      	movs	r1, #143	@ 0x8f
 8004a54:	4b08      	ldr	r3, [pc, #32]	@ (8004a78 <_Bfree+0x3c>)
 8004a56:	4809      	ldr	r0, [pc, #36]	@ (8004a7c <_Bfree+0x40>)
 8004a58:	f001 fd24 	bl	80064a4 <__assert_func>
 8004a5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a60:	6006      	str	r6, [r0, #0]
 8004a62:	60c6      	str	r6, [r0, #12]
 8004a64:	b13c      	cbz	r4, 8004a76 <_Bfree+0x3a>
 8004a66:	69eb      	ldr	r3, [r5, #28]
 8004a68:	6862      	ldr	r2, [r4, #4]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a70:	6021      	str	r1, [r4, #0]
 8004a72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004a76:	bd70      	pop	{r4, r5, r6, pc}
 8004a78:	0800720e 	.word	0x0800720e
 8004a7c:	0800728e 	.word	0x0800728e

08004a80 <__multadd>:
 8004a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a84:	4607      	mov	r7, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	461e      	mov	r6, r3
 8004a8a:	2000      	movs	r0, #0
 8004a8c:	690d      	ldr	r5, [r1, #16]
 8004a8e:	f101 0c14 	add.w	ip, r1, #20
 8004a92:	f8dc 3000 	ldr.w	r3, [ip]
 8004a96:	3001      	adds	r0, #1
 8004a98:	b299      	uxth	r1, r3
 8004a9a:	fb02 6101 	mla	r1, r2, r1, r6
 8004a9e:	0c1e      	lsrs	r6, r3, #16
 8004aa0:	0c0b      	lsrs	r3, r1, #16
 8004aa2:	fb02 3306 	mla	r3, r2, r6, r3
 8004aa6:	b289      	uxth	r1, r1
 8004aa8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004aac:	4285      	cmp	r5, r0
 8004aae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004ab2:	f84c 1b04 	str.w	r1, [ip], #4
 8004ab6:	dcec      	bgt.n	8004a92 <__multadd+0x12>
 8004ab8:	b30e      	cbz	r6, 8004afe <__multadd+0x7e>
 8004aba:	68a3      	ldr	r3, [r4, #8]
 8004abc:	42ab      	cmp	r3, r5
 8004abe:	dc19      	bgt.n	8004af4 <__multadd+0x74>
 8004ac0:	6861      	ldr	r1, [r4, #4]
 8004ac2:	4638      	mov	r0, r7
 8004ac4:	3101      	adds	r1, #1
 8004ac6:	f7ff ff79 	bl	80049bc <_Balloc>
 8004aca:	4680      	mov	r8, r0
 8004acc:	b928      	cbnz	r0, 8004ada <__multadd+0x5a>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	21ba      	movs	r1, #186	@ 0xba
 8004ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <__multadd+0x84>)
 8004ad4:	480c      	ldr	r0, [pc, #48]	@ (8004b08 <__multadd+0x88>)
 8004ad6:	f001 fce5 	bl	80064a4 <__assert_func>
 8004ada:	6922      	ldr	r2, [r4, #16]
 8004adc:	f104 010c 	add.w	r1, r4, #12
 8004ae0:	3202      	adds	r2, #2
 8004ae2:	0092      	lsls	r2, r2, #2
 8004ae4:	300c      	adds	r0, #12
 8004ae6:	f001 fcc9 	bl	800647c <memcpy>
 8004aea:	4621      	mov	r1, r4
 8004aec:	4638      	mov	r0, r7
 8004aee:	f7ff ffa5 	bl	8004a3c <_Bfree>
 8004af2:	4644      	mov	r4, r8
 8004af4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004af8:	3501      	adds	r5, #1
 8004afa:	615e      	str	r6, [r3, #20]
 8004afc:	6125      	str	r5, [r4, #16]
 8004afe:	4620      	mov	r0, r4
 8004b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b04:	0800727d 	.word	0x0800727d
 8004b08:	0800728e 	.word	0x0800728e

08004b0c <__s2b>:
 8004b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b10:	4615      	mov	r5, r2
 8004b12:	2209      	movs	r2, #9
 8004b14:	461f      	mov	r7, r3
 8004b16:	3308      	adds	r3, #8
 8004b18:	460c      	mov	r4, r1
 8004b1a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b1e:	4606      	mov	r6, r0
 8004b20:	2201      	movs	r2, #1
 8004b22:	2100      	movs	r1, #0
 8004b24:	429a      	cmp	r2, r3
 8004b26:	db09      	blt.n	8004b3c <__s2b+0x30>
 8004b28:	4630      	mov	r0, r6
 8004b2a:	f7ff ff47 	bl	80049bc <_Balloc>
 8004b2e:	b940      	cbnz	r0, 8004b42 <__s2b+0x36>
 8004b30:	4602      	mov	r2, r0
 8004b32:	21d3      	movs	r1, #211	@ 0xd3
 8004b34:	4b18      	ldr	r3, [pc, #96]	@ (8004b98 <__s2b+0x8c>)
 8004b36:	4819      	ldr	r0, [pc, #100]	@ (8004b9c <__s2b+0x90>)
 8004b38:	f001 fcb4 	bl	80064a4 <__assert_func>
 8004b3c:	0052      	lsls	r2, r2, #1
 8004b3e:	3101      	adds	r1, #1
 8004b40:	e7f0      	b.n	8004b24 <__s2b+0x18>
 8004b42:	9b08      	ldr	r3, [sp, #32]
 8004b44:	2d09      	cmp	r5, #9
 8004b46:	6143      	str	r3, [r0, #20]
 8004b48:	f04f 0301 	mov.w	r3, #1
 8004b4c:	6103      	str	r3, [r0, #16]
 8004b4e:	dd16      	ble.n	8004b7e <__s2b+0x72>
 8004b50:	f104 0909 	add.w	r9, r4, #9
 8004b54:	46c8      	mov	r8, r9
 8004b56:	442c      	add	r4, r5
 8004b58:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004b5c:	4601      	mov	r1, r0
 8004b5e:	220a      	movs	r2, #10
 8004b60:	4630      	mov	r0, r6
 8004b62:	3b30      	subs	r3, #48	@ 0x30
 8004b64:	f7ff ff8c 	bl	8004a80 <__multadd>
 8004b68:	45a0      	cmp	r8, r4
 8004b6a:	d1f5      	bne.n	8004b58 <__s2b+0x4c>
 8004b6c:	f1a5 0408 	sub.w	r4, r5, #8
 8004b70:	444c      	add	r4, r9
 8004b72:	1b2d      	subs	r5, r5, r4
 8004b74:	1963      	adds	r3, r4, r5
 8004b76:	42bb      	cmp	r3, r7
 8004b78:	db04      	blt.n	8004b84 <__s2b+0x78>
 8004b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b7e:	2509      	movs	r5, #9
 8004b80:	340a      	adds	r4, #10
 8004b82:	e7f6      	b.n	8004b72 <__s2b+0x66>
 8004b84:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004b88:	4601      	mov	r1, r0
 8004b8a:	220a      	movs	r2, #10
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	3b30      	subs	r3, #48	@ 0x30
 8004b90:	f7ff ff76 	bl	8004a80 <__multadd>
 8004b94:	e7ee      	b.n	8004b74 <__s2b+0x68>
 8004b96:	bf00      	nop
 8004b98:	0800727d 	.word	0x0800727d
 8004b9c:	0800728e 	.word	0x0800728e

08004ba0 <__hi0bits>:
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004ba6:	bf3a      	itte	cc
 8004ba8:	0403      	lslcc	r3, r0, #16
 8004baa:	2010      	movcc	r0, #16
 8004bac:	2000      	movcs	r0, #0
 8004bae:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bb2:	bf3c      	itt	cc
 8004bb4:	021b      	lslcc	r3, r3, #8
 8004bb6:	3008      	addcc	r0, #8
 8004bb8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004bbc:	bf3c      	itt	cc
 8004bbe:	011b      	lslcc	r3, r3, #4
 8004bc0:	3004      	addcc	r0, #4
 8004bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bc6:	bf3c      	itt	cc
 8004bc8:	009b      	lslcc	r3, r3, #2
 8004bca:	3002      	addcc	r0, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	db05      	blt.n	8004bdc <__hi0bits+0x3c>
 8004bd0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004bd4:	f100 0001 	add.w	r0, r0, #1
 8004bd8:	bf08      	it	eq
 8004bda:	2020      	moveq	r0, #32
 8004bdc:	4770      	bx	lr

08004bde <__lo0bits>:
 8004bde:	6803      	ldr	r3, [r0, #0]
 8004be0:	4602      	mov	r2, r0
 8004be2:	f013 0007 	ands.w	r0, r3, #7
 8004be6:	d00b      	beq.n	8004c00 <__lo0bits+0x22>
 8004be8:	07d9      	lsls	r1, r3, #31
 8004bea:	d421      	bmi.n	8004c30 <__lo0bits+0x52>
 8004bec:	0798      	lsls	r0, r3, #30
 8004bee:	bf49      	itett	mi
 8004bf0:	085b      	lsrmi	r3, r3, #1
 8004bf2:	089b      	lsrpl	r3, r3, #2
 8004bf4:	2001      	movmi	r0, #1
 8004bf6:	6013      	strmi	r3, [r2, #0]
 8004bf8:	bf5c      	itt	pl
 8004bfa:	2002      	movpl	r0, #2
 8004bfc:	6013      	strpl	r3, [r2, #0]
 8004bfe:	4770      	bx	lr
 8004c00:	b299      	uxth	r1, r3
 8004c02:	b909      	cbnz	r1, 8004c08 <__lo0bits+0x2a>
 8004c04:	2010      	movs	r0, #16
 8004c06:	0c1b      	lsrs	r3, r3, #16
 8004c08:	b2d9      	uxtb	r1, r3
 8004c0a:	b909      	cbnz	r1, 8004c10 <__lo0bits+0x32>
 8004c0c:	3008      	adds	r0, #8
 8004c0e:	0a1b      	lsrs	r3, r3, #8
 8004c10:	0719      	lsls	r1, r3, #28
 8004c12:	bf04      	itt	eq
 8004c14:	091b      	lsreq	r3, r3, #4
 8004c16:	3004      	addeq	r0, #4
 8004c18:	0799      	lsls	r1, r3, #30
 8004c1a:	bf04      	itt	eq
 8004c1c:	089b      	lsreq	r3, r3, #2
 8004c1e:	3002      	addeq	r0, #2
 8004c20:	07d9      	lsls	r1, r3, #31
 8004c22:	d403      	bmi.n	8004c2c <__lo0bits+0x4e>
 8004c24:	085b      	lsrs	r3, r3, #1
 8004c26:	f100 0001 	add.w	r0, r0, #1
 8004c2a:	d003      	beq.n	8004c34 <__lo0bits+0x56>
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	4770      	bx	lr
 8004c30:	2000      	movs	r0, #0
 8004c32:	4770      	bx	lr
 8004c34:	2020      	movs	r0, #32
 8004c36:	4770      	bx	lr

08004c38 <__i2b>:
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	f7ff febd 	bl	80049bc <_Balloc>
 8004c42:	4602      	mov	r2, r0
 8004c44:	b928      	cbnz	r0, 8004c52 <__i2b+0x1a>
 8004c46:	f240 1145 	movw	r1, #325	@ 0x145
 8004c4a:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <__i2b+0x24>)
 8004c4c:	4804      	ldr	r0, [pc, #16]	@ (8004c60 <__i2b+0x28>)
 8004c4e:	f001 fc29 	bl	80064a4 <__assert_func>
 8004c52:	2301      	movs	r3, #1
 8004c54:	6144      	str	r4, [r0, #20]
 8004c56:	6103      	str	r3, [r0, #16]
 8004c58:	bd10      	pop	{r4, pc}
 8004c5a:	bf00      	nop
 8004c5c:	0800727d 	.word	0x0800727d
 8004c60:	0800728e 	.word	0x0800728e

08004c64 <__multiply>:
 8004c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c68:	4614      	mov	r4, r2
 8004c6a:	690a      	ldr	r2, [r1, #16]
 8004c6c:	6923      	ldr	r3, [r4, #16]
 8004c6e:	460f      	mov	r7, r1
 8004c70:	429a      	cmp	r2, r3
 8004c72:	bfa2      	ittt	ge
 8004c74:	4623      	movge	r3, r4
 8004c76:	460c      	movge	r4, r1
 8004c78:	461f      	movge	r7, r3
 8004c7a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004c7e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8004c82:	68a3      	ldr	r3, [r4, #8]
 8004c84:	6861      	ldr	r1, [r4, #4]
 8004c86:	eb0a 0609 	add.w	r6, sl, r9
 8004c8a:	42b3      	cmp	r3, r6
 8004c8c:	b085      	sub	sp, #20
 8004c8e:	bfb8      	it	lt
 8004c90:	3101      	addlt	r1, #1
 8004c92:	f7ff fe93 	bl	80049bc <_Balloc>
 8004c96:	b930      	cbnz	r0, 8004ca6 <__multiply+0x42>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8004c9e:	4b43      	ldr	r3, [pc, #268]	@ (8004dac <__multiply+0x148>)
 8004ca0:	4843      	ldr	r0, [pc, #268]	@ (8004db0 <__multiply+0x14c>)
 8004ca2:	f001 fbff 	bl	80064a4 <__assert_func>
 8004ca6:	f100 0514 	add.w	r5, r0, #20
 8004caa:	462b      	mov	r3, r5
 8004cac:	2200      	movs	r2, #0
 8004cae:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004cb2:	4543      	cmp	r3, r8
 8004cb4:	d321      	bcc.n	8004cfa <__multiply+0x96>
 8004cb6:	f107 0114 	add.w	r1, r7, #20
 8004cba:	f104 0214 	add.w	r2, r4, #20
 8004cbe:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8004cc2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8004cc6:	9302      	str	r3, [sp, #8]
 8004cc8:	1b13      	subs	r3, r2, r4
 8004cca:	3b15      	subs	r3, #21
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	f104 0715 	add.w	r7, r4, #21
 8004cd6:	42ba      	cmp	r2, r7
 8004cd8:	bf38      	it	cc
 8004cda:	2304      	movcc	r3, #4
 8004cdc:	9301      	str	r3, [sp, #4]
 8004cde:	9b02      	ldr	r3, [sp, #8]
 8004ce0:	9103      	str	r1, [sp, #12]
 8004ce2:	428b      	cmp	r3, r1
 8004ce4:	d80c      	bhi.n	8004d00 <__multiply+0x9c>
 8004ce6:	2e00      	cmp	r6, #0
 8004ce8:	dd03      	ble.n	8004cf2 <__multiply+0x8e>
 8004cea:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d05a      	beq.n	8004da8 <__multiply+0x144>
 8004cf2:	6106      	str	r6, [r0, #16]
 8004cf4:	b005      	add	sp, #20
 8004cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cfa:	f843 2b04 	str.w	r2, [r3], #4
 8004cfe:	e7d8      	b.n	8004cb2 <__multiply+0x4e>
 8004d00:	f8b1 a000 	ldrh.w	sl, [r1]
 8004d04:	f1ba 0f00 	cmp.w	sl, #0
 8004d08:	d023      	beq.n	8004d52 <__multiply+0xee>
 8004d0a:	46a9      	mov	r9, r5
 8004d0c:	f04f 0c00 	mov.w	ip, #0
 8004d10:	f104 0e14 	add.w	lr, r4, #20
 8004d14:	f85e 7b04 	ldr.w	r7, [lr], #4
 8004d18:	f8d9 3000 	ldr.w	r3, [r9]
 8004d1c:	fa1f fb87 	uxth.w	fp, r7
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	fb0a 330b 	mla	r3, sl, fp, r3
 8004d26:	4463      	add	r3, ip
 8004d28:	f8d9 c000 	ldr.w	ip, [r9]
 8004d2c:	0c3f      	lsrs	r7, r7, #16
 8004d2e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004d32:	fb0a c707 	mla	r7, sl, r7, ip
 8004d36:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004d40:	4572      	cmp	r2, lr
 8004d42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8004d46:	f849 3b04 	str.w	r3, [r9], #4
 8004d4a:	d8e3      	bhi.n	8004d14 <__multiply+0xb0>
 8004d4c:	9b01      	ldr	r3, [sp, #4]
 8004d4e:	f845 c003 	str.w	ip, [r5, r3]
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	3104      	adds	r1, #4
 8004d56:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8004d5a:	f1b9 0f00 	cmp.w	r9, #0
 8004d5e:	d021      	beq.n	8004da4 <__multiply+0x140>
 8004d60:	46ae      	mov	lr, r5
 8004d62:	f04f 0a00 	mov.w	sl, #0
 8004d66:	682b      	ldr	r3, [r5, #0]
 8004d68:	f104 0c14 	add.w	ip, r4, #20
 8004d6c:	f8bc b000 	ldrh.w	fp, [ip]
 8004d70:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	fb09 770b 	mla	r7, r9, fp, r7
 8004d7a:	4457      	add	r7, sl
 8004d7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8004d80:	f84e 3b04 	str.w	r3, [lr], #4
 8004d84:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d8c:	f8be 3000 	ldrh.w	r3, [lr]
 8004d90:	4562      	cmp	r2, ip
 8004d92:	fb09 330a 	mla	r3, r9, sl, r3
 8004d96:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8004d9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d9e:	d8e5      	bhi.n	8004d6c <__multiply+0x108>
 8004da0:	9f01      	ldr	r7, [sp, #4]
 8004da2:	51eb      	str	r3, [r5, r7]
 8004da4:	3504      	adds	r5, #4
 8004da6:	e79a      	b.n	8004cde <__multiply+0x7a>
 8004da8:	3e01      	subs	r6, #1
 8004daa:	e79c      	b.n	8004ce6 <__multiply+0x82>
 8004dac:	0800727d 	.word	0x0800727d
 8004db0:	0800728e 	.word	0x0800728e

08004db4 <__pow5mult>:
 8004db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004db8:	4615      	mov	r5, r2
 8004dba:	f012 0203 	ands.w	r2, r2, #3
 8004dbe:	4607      	mov	r7, r0
 8004dc0:	460e      	mov	r6, r1
 8004dc2:	d007      	beq.n	8004dd4 <__pow5mult+0x20>
 8004dc4:	4c25      	ldr	r4, [pc, #148]	@ (8004e5c <__pow5mult+0xa8>)
 8004dc6:	3a01      	subs	r2, #1
 8004dc8:	2300      	movs	r3, #0
 8004dca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004dce:	f7ff fe57 	bl	8004a80 <__multadd>
 8004dd2:	4606      	mov	r6, r0
 8004dd4:	10ad      	asrs	r5, r5, #2
 8004dd6:	d03d      	beq.n	8004e54 <__pow5mult+0xa0>
 8004dd8:	69fc      	ldr	r4, [r7, #28]
 8004dda:	b97c      	cbnz	r4, 8004dfc <__pow5mult+0x48>
 8004ddc:	2010      	movs	r0, #16
 8004dde:	f7ff fd37 	bl	8004850 <malloc>
 8004de2:	4602      	mov	r2, r0
 8004de4:	61f8      	str	r0, [r7, #28]
 8004de6:	b928      	cbnz	r0, 8004df4 <__pow5mult+0x40>
 8004de8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8004dec:	4b1c      	ldr	r3, [pc, #112]	@ (8004e60 <__pow5mult+0xac>)
 8004dee:	481d      	ldr	r0, [pc, #116]	@ (8004e64 <__pow5mult+0xb0>)
 8004df0:	f001 fb58 	bl	80064a4 <__assert_func>
 8004df4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004df8:	6004      	str	r4, [r0, #0]
 8004dfa:	60c4      	str	r4, [r0, #12]
 8004dfc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8004e00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e04:	b94c      	cbnz	r4, 8004e1a <__pow5mult+0x66>
 8004e06:	f240 2171 	movw	r1, #625	@ 0x271
 8004e0a:	4638      	mov	r0, r7
 8004e0c:	f7ff ff14 	bl	8004c38 <__i2b>
 8004e10:	2300      	movs	r3, #0
 8004e12:	4604      	mov	r4, r0
 8004e14:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e18:	6003      	str	r3, [r0, #0]
 8004e1a:	f04f 0900 	mov.w	r9, #0
 8004e1e:	07eb      	lsls	r3, r5, #31
 8004e20:	d50a      	bpl.n	8004e38 <__pow5mult+0x84>
 8004e22:	4631      	mov	r1, r6
 8004e24:	4622      	mov	r2, r4
 8004e26:	4638      	mov	r0, r7
 8004e28:	f7ff ff1c 	bl	8004c64 <__multiply>
 8004e2c:	4680      	mov	r8, r0
 8004e2e:	4631      	mov	r1, r6
 8004e30:	4638      	mov	r0, r7
 8004e32:	f7ff fe03 	bl	8004a3c <_Bfree>
 8004e36:	4646      	mov	r6, r8
 8004e38:	106d      	asrs	r5, r5, #1
 8004e3a:	d00b      	beq.n	8004e54 <__pow5mult+0xa0>
 8004e3c:	6820      	ldr	r0, [r4, #0]
 8004e3e:	b938      	cbnz	r0, 8004e50 <__pow5mult+0x9c>
 8004e40:	4622      	mov	r2, r4
 8004e42:	4621      	mov	r1, r4
 8004e44:	4638      	mov	r0, r7
 8004e46:	f7ff ff0d 	bl	8004c64 <__multiply>
 8004e4a:	6020      	str	r0, [r4, #0]
 8004e4c:	f8c0 9000 	str.w	r9, [r0]
 8004e50:	4604      	mov	r4, r0
 8004e52:	e7e4      	b.n	8004e1e <__pow5mult+0x6a>
 8004e54:	4630      	mov	r0, r6
 8004e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e5a:	bf00      	nop
 8004e5c:	080072e8 	.word	0x080072e8
 8004e60:	0800720e 	.word	0x0800720e
 8004e64:	0800728e 	.word	0x0800728e

08004e68 <__lshift>:
 8004e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	4607      	mov	r7, r0
 8004e70:	4691      	mov	r9, r2
 8004e72:	6923      	ldr	r3, [r4, #16]
 8004e74:	6849      	ldr	r1, [r1, #4]
 8004e76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e7a:	68a3      	ldr	r3, [r4, #8]
 8004e7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004e80:	f108 0601 	add.w	r6, r8, #1
 8004e84:	42b3      	cmp	r3, r6
 8004e86:	db0b      	blt.n	8004ea0 <__lshift+0x38>
 8004e88:	4638      	mov	r0, r7
 8004e8a:	f7ff fd97 	bl	80049bc <_Balloc>
 8004e8e:	4605      	mov	r5, r0
 8004e90:	b948      	cbnz	r0, 8004ea6 <__lshift+0x3e>
 8004e92:	4602      	mov	r2, r0
 8004e94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8004e98:	4b27      	ldr	r3, [pc, #156]	@ (8004f38 <__lshift+0xd0>)
 8004e9a:	4828      	ldr	r0, [pc, #160]	@ (8004f3c <__lshift+0xd4>)
 8004e9c:	f001 fb02 	bl	80064a4 <__assert_func>
 8004ea0:	3101      	adds	r1, #1
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	e7ee      	b.n	8004e84 <__lshift+0x1c>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	f100 0114 	add.w	r1, r0, #20
 8004eac:	f100 0210 	add.w	r2, r0, #16
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	4553      	cmp	r3, sl
 8004eb4:	db33      	blt.n	8004f1e <__lshift+0xb6>
 8004eb6:	6920      	ldr	r0, [r4, #16]
 8004eb8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ebc:	f104 0314 	add.w	r3, r4, #20
 8004ec0:	f019 091f 	ands.w	r9, r9, #31
 8004ec4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ec8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ecc:	d02b      	beq.n	8004f26 <__lshift+0xbe>
 8004ece:	468a      	mov	sl, r1
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f1c9 0e20 	rsb	lr, r9, #32
 8004ed6:	6818      	ldr	r0, [r3, #0]
 8004ed8:	fa00 f009 	lsl.w	r0, r0, r9
 8004edc:	4310      	orrs	r0, r2
 8004ede:	f84a 0b04 	str.w	r0, [sl], #4
 8004ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ee6:	459c      	cmp	ip, r3
 8004ee8:	fa22 f20e 	lsr.w	r2, r2, lr
 8004eec:	d8f3      	bhi.n	8004ed6 <__lshift+0x6e>
 8004eee:	ebac 0304 	sub.w	r3, ip, r4
 8004ef2:	3b15      	subs	r3, #21
 8004ef4:	f023 0303 	bic.w	r3, r3, #3
 8004ef8:	3304      	adds	r3, #4
 8004efa:	f104 0015 	add.w	r0, r4, #21
 8004efe:	4584      	cmp	ip, r0
 8004f00:	bf38      	it	cc
 8004f02:	2304      	movcc	r3, #4
 8004f04:	50ca      	str	r2, [r1, r3]
 8004f06:	b10a      	cbz	r2, 8004f0c <__lshift+0xa4>
 8004f08:	f108 0602 	add.w	r6, r8, #2
 8004f0c:	3e01      	subs	r6, #1
 8004f0e:	4638      	mov	r0, r7
 8004f10:	4621      	mov	r1, r4
 8004f12:	612e      	str	r6, [r5, #16]
 8004f14:	f7ff fd92 	bl	8004a3c <_Bfree>
 8004f18:	4628      	mov	r0, r5
 8004f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f22:	3301      	adds	r3, #1
 8004f24:	e7c5      	b.n	8004eb2 <__lshift+0x4a>
 8004f26:	3904      	subs	r1, #4
 8004f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f2c:	459c      	cmp	ip, r3
 8004f2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f32:	d8f9      	bhi.n	8004f28 <__lshift+0xc0>
 8004f34:	e7ea      	b.n	8004f0c <__lshift+0xa4>
 8004f36:	bf00      	nop
 8004f38:	0800727d 	.word	0x0800727d
 8004f3c:	0800728e 	.word	0x0800728e

08004f40 <__mcmp>:
 8004f40:	4603      	mov	r3, r0
 8004f42:	690a      	ldr	r2, [r1, #16]
 8004f44:	6900      	ldr	r0, [r0, #16]
 8004f46:	b530      	push	{r4, r5, lr}
 8004f48:	1a80      	subs	r0, r0, r2
 8004f4a:	d10e      	bne.n	8004f6a <__mcmp+0x2a>
 8004f4c:	3314      	adds	r3, #20
 8004f4e:	3114      	adds	r1, #20
 8004f50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8004f54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8004f58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004f5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004f60:	4295      	cmp	r5, r2
 8004f62:	d003      	beq.n	8004f6c <__mcmp+0x2c>
 8004f64:	d205      	bcs.n	8004f72 <__mcmp+0x32>
 8004f66:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004f6a:	bd30      	pop	{r4, r5, pc}
 8004f6c:	42a3      	cmp	r3, r4
 8004f6e:	d3f3      	bcc.n	8004f58 <__mcmp+0x18>
 8004f70:	e7fb      	b.n	8004f6a <__mcmp+0x2a>
 8004f72:	2001      	movs	r0, #1
 8004f74:	e7f9      	b.n	8004f6a <__mcmp+0x2a>
	...

08004f78 <__mdiff>:
 8004f78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7c:	4689      	mov	r9, r1
 8004f7e:	4606      	mov	r6, r0
 8004f80:	4611      	mov	r1, r2
 8004f82:	4648      	mov	r0, r9
 8004f84:	4614      	mov	r4, r2
 8004f86:	f7ff ffdb 	bl	8004f40 <__mcmp>
 8004f8a:	1e05      	subs	r5, r0, #0
 8004f8c:	d112      	bne.n	8004fb4 <__mdiff+0x3c>
 8004f8e:	4629      	mov	r1, r5
 8004f90:	4630      	mov	r0, r6
 8004f92:	f7ff fd13 	bl	80049bc <_Balloc>
 8004f96:	4602      	mov	r2, r0
 8004f98:	b928      	cbnz	r0, 8004fa6 <__mdiff+0x2e>
 8004f9a:	f240 2137 	movw	r1, #567	@ 0x237
 8004f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005098 <__mdiff+0x120>)
 8004fa0:	483e      	ldr	r0, [pc, #248]	@ (800509c <__mdiff+0x124>)
 8004fa2:	f001 fa7f 	bl	80064a4 <__assert_func>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fac:	4610      	mov	r0, r2
 8004fae:	b003      	add	sp, #12
 8004fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb4:	bfbc      	itt	lt
 8004fb6:	464b      	movlt	r3, r9
 8004fb8:	46a1      	movlt	r9, r4
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004fc0:	bfba      	itte	lt
 8004fc2:	461c      	movlt	r4, r3
 8004fc4:	2501      	movlt	r5, #1
 8004fc6:	2500      	movge	r5, #0
 8004fc8:	f7ff fcf8 	bl	80049bc <_Balloc>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	b918      	cbnz	r0, 8004fd8 <__mdiff+0x60>
 8004fd0:	f240 2145 	movw	r1, #581	@ 0x245
 8004fd4:	4b30      	ldr	r3, [pc, #192]	@ (8005098 <__mdiff+0x120>)
 8004fd6:	e7e3      	b.n	8004fa0 <__mdiff+0x28>
 8004fd8:	f100 0b14 	add.w	fp, r0, #20
 8004fdc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004fe0:	f109 0310 	add.w	r3, r9, #16
 8004fe4:	60c5      	str	r5, [r0, #12]
 8004fe6:	f04f 0c00 	mov.w	ip, #0
 8004fea:	f109 0514 	add.w	r5, r9, #20
 8004fee:	46d9      	mov	r9, fp
 8004ff0:	6926      	ldr	r6, [r4, #16]
 8004ff2:	f104 0e14 	add.w	lr, r4, #20
 8004ff6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8004ffa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8004ffe:	9301      	str	r3, [sp, #4]
 8005000:	9b01      	ldr	r3, [sp, #4]
 8005002:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005006:	f853 af04 	ldr.w	sl, [r3, #4]!
 800500a:	b281      	uxth	r1, r0
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	fa1f f38a 	uxth.w	r3, sl
 8005012:	1a5b      	subs	r3, r3, r1
 8005014:	0c00      	lsrs	r0, r0, #16
 8005016:	4463      	add	r3, ip
 8005018:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800501c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005020:	b29b      	uxth	r3, r3
 8005022:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005026:	4576      	cmp	r6, lr
 8005028:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800502c:	f849 3b04 	str.w	r3, [r9], #4
 8005030:	d8e6      	bhi.n	8005000 <__mdiff+0x88>
 8005032:	1b33      	subs	r3, r6, r4
 8005034:	3b15      	subs	r3, #21
 8005036:	f023 0303 	bic.w	r3, r3, #3
 800503a:	3415      	adds	r4, #21
 800503c:	3304      	adds	r3, #4
 800503e:	42a6      	cmp	r6, r4
 8005040:	bf38      	it	cc
 8005042:	2304      	movcc	r3, #4
 8005044:	441d      	add	r5, r3
 8005046:	445b      	add	r3, fp
 8005048:	461e      	mov	r6, r3
 800504a:	462c      	mov	r4, r5
 800504c:	4544      	cmp	r4, r8
 800504e:	d30e      	bcc.n	800506e <__mdiff+0xf6>
 8005050:	f108 0103 	add.w	r1, r8, #3
 8005054:	1b49      	subs	r1, r1, r5
 8005056:	f021 0103 	bic.w	r1, r1, #3
 800505a:	3d03      	subs	r5, #3
 800505c:	45a8      	cmp	r8, r5
 800505e:	bf38      	it	cc
 8005060:	2100      	movcc	r1, #0
 8005062:	440b      	add	r3, r1
 8005064:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005068:	b199      	cbz	r1, 8005092 <__mdiff+0x11a>
 800506a:	6117      	str	r7, [r2, #16]
 800506c:	e79e      	b.n	8004fac <__mdiff+0x34>
 800506e:	46e6      	mov	lr, ip
 8005070:	f854 1b04 	ldr.w	r1, [r4], #4
 8005074:	fa1f fc81 	uxth.w	ip, r1
 8005078:	44f4      	add	ip, lr
 800507a:	0c08      	lsrs	r0, r1, #16
 800507c:	4471      	add	r1, lr
 800507e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005082:	b289      	uxth	r1, r1
 8005084:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005088:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800508c:	f846 1b04 	str.w	r1, [r6], #4
 8005090:	e7dc      	b.n	800504c <__mdiff+0xd4>
 8005092:	3f01      	subs	r7, #1
 8005094:	e7e6      	b.n	8005064 <__mdiff+0xec>
 8005096:	bf00      	nop
 8005098:	0800727d 	.word	0x0800727d
 800509c:	0800728e 	.word	0x0800728e

080050a0 <__ulp>:
 80050a0:	4b0e      	ldr	r3, [pc, #56]	@ (80050dc <__ulp+0x3c>)
 80050a2:	400b      	ands	r3, r1
 80050a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	dc08      	bgt.n	80050be <__ulp+0x1e>
 80050ac:	425b      	negs	r3, r3
 80050ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80050b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80050b6:	da04      	bge.n	80050c2 <__ulp+0x22>
 80050b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80050bc:	4113      	asrs	r3, r2
 80050be:	2200      	movs	r2, #0
 80050c0:	e008      	b.n	80050d4 <__ulp+0x34>
 80050c2:	f1a2 0314 	sub.w	r3, r2, #20
 80050c6:	2b1e      	cmp	r3, #30
 80050c8:	bfd6      	itet	le
 80050ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80050ce:	2201      	movgt	r2, #1
 80050d0:	40da      	lsrle	r2, r3
 80050d2:	2300      	movs	r3, #0
 80050d4:	4619      	mov	r1, r3
 80050d6:	4610      	mov	r0, r2
 80050d8:	4770      	bx	lr
 80050da:	bf00      	nop
 80050dc:	7ff00000 	.word	0x7ff00000

080050e0 <__b2d>:
 80050e0:	6902      	ldr	r2, [r0, #16]
 80050e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e4:	f100 0614 	add.w	r6, r0, #20
 80050e8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80050ec:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80050f0:	4f1e      	ldr	r7, [pc, #120]	@ (800516c <__b2d+0x8c>)
 80050f2:	4620      	mov	r0, r4
 80050f4:	f7ff fd54 	bl	8004ba0 <__hi0bits>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f1c0 0020 	rsb	r0, r0, #32
 80050fe:	2b0a      	cmp	r3, #10
 8005100:	f1a2 0504 	sub.w	r5, r2, #4
 8005104:	6008      	str	r0, [r1, #0]
 8005106:	dc12      	bgt.n	800512e <__b2d+0x4e>
 8005108:	42ae      	cmp	r6, r5
 800510a:	bf2c      	ite	cs
 800510c:	2200      	movcs	r2, #0
 800510e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8005112:	f1c3 0c0b 	rsb	ip, r3, #11
 8005116:	3315      	adds	r3, #21
 8005118:	fa24 fe0c 	lsr.w	lr, r4, ip
 800511c:	fa04 f303 	lsl.w	r3, r4, r3
 8005120:	fa22 f20c 	lsr.w	r2, r2, ip
 8005124:	ea4e 0107 	orr.w	r1, lr, r7
 8005128:	431a      	orrs	r2, r3
 800512a:	4610      	mov	r0, r2
 800512c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800512e:	42ae      	cmp	r6, r5
 8005130:	bf36      	itet	cc
 8005132:	f1a2 0508 	subcc.w	r5, r2, #8
 8005136:	2200      	movcs	r2, #0
 8005138:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800513c:	3b0b      	subs	r3, #11
 800513e:	d012      	beq.n	8005166 <__b2d+0x86>
 8005140:	f1c3 0720 	rsb	r7, r3, #32
 8005144:	fa22 f107 	lsr.w	r1, r2, r7
 8005148:	409c      	lsls	r4, r3
 800514a:	430c      	orrs	r4, r1
 800514c:	42b5      	cmp	r5, r6
 800514e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8005152:	bf94      	ite	ls
 8005154:	2400      	movls	r4, #0
 8005156:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800515a:	409a      	lsls	r2, r3
 800515c:	40fc      	lsrs	r4, r7
 800515e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8005162:	4322      	orrs	r2, r4
 8005164:	e7e1      	b.n	800512a <__b2d+0x4a>
 8005166:	ea44 0107 	orr.w	r1, r4, r7
 800516a:	e7de      	b.n	800512a <__b2d+0x4a>
 800516c:	3ff00000 	.word	0x3ff00000

08005170 <__d2b>:
 8005170:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005174:	2101      	movs	r1, #1
 8005176:	4690      	mov	r8, r2
 8005178:	4699      	mov	r9, r3
 800517a:	9e08      	ldr	r6, [sp, #32]
 800517c:	f7ff fc1e 	bl	80049bc <_Balloc>
 8005180:	4604      	mov	r4, r0
 8005182:	b930      	cbnz	r0, 8005192 <__d2b+0x22>
 8005184:	4602      	mov	r2, r0
 8005186:	f240 310f 	movw	r1, #783	@ 0x30f
 800518a:	4b23      	ldr	r3, [pc, #140]	@ (8005218 <__d2b+0xa8>)
 800518c:	4823      	ldr	r0, [pc, #140]	@ (800521c <__d2b+0xac>)
 800518e:	f001 f989 	bl	80064a4 <__assert_func>
 8005192:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005196:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800519a:	b10d      	cbz	r5, 80051a0 <__d2b+0x30>
 800519c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051a0:	9301      	str	r3, [sp, #4]
 80051a2:	f1b8 0300 	subs.w	r3, r8, #0
 80051a6:	d024      	beq.n	80051f2 <__d2b+0x82>
 80051a8:	4668      	mov	r0, sp
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	f7ff fd17 	bl	8004bde <__lo0bits>
 80051b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80051b4:	b1d8      	cbz	r0, 80051ee <__d2b+0x7e>
 80051b6:	f1c0 0320 	rsb	r3, r0, #32
 80051ba:	fa02 f303 	lsl.w	r3, r2, r3
 80051be:	430b      	orrs	r3, r1
 80051c0:	40c2      	lsrs	r2, r0
 80051c2:	6163      	str	r3, [r4, #20]
 80051c4:	9201      	str	r2, [sp, #4]
 80051c6:	9b01      	ldr	r3, [sp, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf0c      	ite	eq
 80051cc:	2201      	moveq	r2, #1
 80051ce:	2202      	movne	r2, #2
 80051d0:	61a3      	str	r3, [r4, #24]
 80051d2:	6122      	str	r2, [r4, #16]
 80051d4:	b1ad      	cbz	r5, 8005202 <__d2b+0x92>
 80051d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80051da:	4405      	add	r5, r0
 80051dc:	6035      	str	r5, [r6, #0]
 80051de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80051e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051e4:	6018      	str	r0, [r3, #0]
 80051e6:	4620      	mov	r0, r4
 80051e8:	b002      	add	sp, #8
 80051ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80051ee:	6161      	str	r1, [r4, #20]
 80051f0:	e7e9      	b.n	80051c6 <__d2b+0x56>
 80051f2:	a801      	add	r0, sp, #4
 80051f4:	f7ff fcf3 	bl	8004bde <__lo0bits>
 80051f8:	9b01      	ldr	r3, [sp, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	6163      	str	r3, [r4, #20]
 80051fe:	3020      	adds	r0, #32
 8005200:	e7e7      	b.n	80051d2 <__d2b+0x62>
 8005202:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005206:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800520a:	6030      	str	r0, [r6, #0]
 800520c:	6918      	ldr	r0, [r3, #16]
 800520e:	f7ff fcc7 	bl	8004ba0 <__hi0bits>
 8005212:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005216:	e7e4      	b.n	80051e2 <__d2b+0x72>
 8005218:	0800727d 	.word	0x0800727d
 800521c:	0800728e 	.word	0x0800728e

08005220 <__ratio>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	b085      	sub	sp, #20
 8005226:	e9cd 1000 	strd	r1, r0, [sp]
 800522a:	a902      	add	r1, sp, #8
 800522c:	f7ff ff58 	bl	80050e0 <__b2d>
 8005230:	468b      	mov	fp, r1
 8005232:	4606      	mov	r6, r0
 8005234:	460f      	mov	r7, r1
 8005236:	9800      	ldr	r0, [sp, #0]
 8005238:	a903      	add	r1, sp, #12
 800523a:	f7ff ff51 	bl	80050e0 <__b2d>
 800523e:	460d      	mov	r5, r1
 8005240:	9b01      	ldr	r3, [sp, #4]
 8005242:	4689      	mov	r9, r1
 8005244:	6919      	ldr	r1, [r3, #16]
 8005246:	9b00      	ldr	r3, [sp, #0]
 8005248:	4604      	mov	r4, r0
 800524a:	691b      	ldr	r3, [r3, #16]
 800524c:	4630      	mov	r0, r6
 800524e:	1ac9      	subs	r1, r1, r3
 8005250:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800525a:	2b00      	cmp	r3, #0
 800525c:	bfcd      	iteet	gt
 800525e:	463a      	movgt	r2, r7
 8005260:	462a      	movle	r2, r5
 8005262:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005266:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800526a:	bfd8      	it	le
 800526c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005270:	464b      	mov	r3, r9
 8005272:	4622      	mov	r2, r4
 8005274:	4659      	mov	r1, fp
 8005276:	f7fb fa59 	bl	800072c <__aeabi_ddiv>
 800527a:	b005      	add	sp, #20
 800527c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005280 <__copybits>:
 8005280:	3901      	subs	r1, #1
 8005282:	b570      	push	{r4, r5, r6, lr}
 8005284:	1149      	asrs	r1, r1, #5
 8005286:	6914      	ldr	r4, [r2, #16]
 8005288:	3101      	adds	r1, #1
 800528a:	f102 0314 	add.w	r3, r2, #20
 800528e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005292:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005296:	1f05      	subs	r5, r0, #4
 8005298:	42a3      	cmp	r3, r4
 800529a:	d30c      	bcc.n	80052b6 <__copybits+0x36>
 800529c:	1aa3      	subs	r3, r4, r2
 800529e:	3b11      	subs	r3, #17
 80052a0:	f023 0303 	bic.w	r3, r3, #3
 80052a4:	3211      	adds	r2, #17
 80052a6:	42a2      	cmp	r2, r4
 80052a8:	bf88      	it	hi
 80052aa:	2300      	movhi	r3, #0
 80052ac:	4418      	add	r0, r3
 80052ae:	2300      	movs	r3, #0
 80052b0:	4288      	cmp	r0, r1
 80052b2:	d305      	bcc.n	80052c0 <__copybits+0x40>
 80052b4:	bd70      	pop	{r4, r5, r6, pc}
 80052b6:	f853 6b04 	ldr.w	r6, [r3], #4
 80052ba:	f845 6f04 	str.w	r6, [r5, #4]!
 80052be:	e7eb      	b.n	8005298 <__copybits+0x18>
 80052c0:	f840 3b04 	str.w	r3, [r0], #4
 80052c4:	e7f4      	b.n	80052b0 <__copybits+0x30>

080052c6 <__any_on>:
 80052c6:	f100 0214 	add.w	r2, r0, #20
 80052ca:	6900      	ldr	r0, [r0, #16]
 80052cc:	114b      	asrs	r3, r1, #5
 80052ce:	4298      	cmp	r0, r3
 80052d0:	b510      	push	{r4, lr}
 80052d2:	db11      	blt.n	80052f8 <__any_on+0x32>
 80052d4:	dd0a      	ble.n	80052ec <__any_on+0x26>
 80052d6:	f011 011f 	ands.w	r1, r1, #31
 80052da:	d007      	beq.n	80052ec <__any_on+0x26>
 80052dc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80052e0:	fa24 f001 	lsr.w	r0, r4, r1
 80052e4:	fa00 f101 	lsl.w	r1, r0, r1
 80052e8:	428c      	cmp	r4, r1
 80052ea:	d10b      	bne.n	8005304 <__any_on+0x3e>
 80052ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d803      	bhi.n	80052fc <__any_on+0x36>
 80052f4:	2000      	movs	r0, #0
 80052f6:	bd10      	pop	{r4, pc}
 80052f8:	4603      	mov	r3, r0
 80052fa:	e7f7      	b.n	80052ec <__any_on+0x26>
 80052fc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005300:	2900      	cmp	r1, #0
 8005302:	d0f5      	beq.n	80052f0 <__any_on+0x2a>
 8005304:	2001      	movs	r0, #1
 8005306:	e7f6      	b.n	80052f6 <__any_on+0x30>

08005308 <sulp>:
 8005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530c:	460f      	mov	r7, r1
 800530e:	4690      	mov	r8, r2
 8005310:	f7ff fec6 	bl	80050a0 <__ulp>
 8005314:	4604      	mov	r4, r0
 8005316:	460d      	mov	r5, r1
 8005318:	f1b8 0f00 	cmp.w	r8, #0
 800531c:	d011      	beq.n	8005342 <sulp+0x3a>
 800531e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005322:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005326:	2b00      	cmp	r3, #0
 8005328:	dd0b      	ble.n	8005342 <sulp+0x3a>
 800532a:	2400      	movs	r4, #0
 800532c:	051b      	lsls	r3, r3, #20
 800532e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005332:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005336:	4622      	mov	r2, r4
 8005338:	462b      	mov	r3, r5
 800533a:	f7fb f8cd 	bl	80004d8 <__aeabi_dmul>
 800533e:	4604      	mov	r4, r0
 8005340:	460d      	mov	r5, r1
 8005342:	4620      	mov	r0, r4
 8005344:	4629      	mov	r1, r5
 8005346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800534a:	0000      	movs	r0, r0
 800534c:	0000      	movs	r0, r0
	...

08005350 <_strtod_l>:
 8005350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	b09f      	sub	sp, #124	@ 0x7c
 8005356:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005358:	2200      	movs	r2, #0
 800535a:	460c      	mov	r4, r1
 800535c:	921a      	str	r2, [sp, #104]	@ 0x68
 800535e:	f04f 0a00 	mov.w	sl, #0
 8005362:	f04f 0b00 	mov.w	fp, #0
 8005366:	460a      	mov	r2, r1
 8005368:	9005      	str	r0, [sp, #20]
 800536a:	9219      	str	r2, [sp, #100]	@ 0x64
 800536c:	7811      	ldrb	r1, [r2, #0]
 800536e:	292b      	cmp	r1, #43	@ 0x2b
 8005370:	d048      	beq.n	8005404 <_strtod_l+0xb4>
 8005372:	d836      	bhi.n	80053e2 <_strtod_l+0x92>
 8005374:	290d      	cmp	r1, #13
 8005376:	d830      	bhi.n	80053da <_strtod_l+0x8a>
 8005378:	2908      	cmp	r1, #8
 800537a:	d830      	bhi.n	80053de <_strtod_l+0x8e>
 800537c:	2900      	cmp	r1, #0
 800537e:	d039      	beq.n	80053f4 <_strtod_l+0xa4>
 8005380:	2200      	movs	r2, #0
 8005382:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005384:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005386:	782a      	ldrb	r2, [r5, #0]
 8005388:	2a30      	cmp	r2, #48	@ 0x30
 800538a:	f040 80b1 	bne.w	80054f0 <_strtod_l+0x1a0>
 800538e:	786a      	ldrb	r2, [r5, #1]
 8005390:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005394:	2a58      	cmp	r2, #88	@ 0x58
 8005396:	d16c      	bne.n	8005472 <_strtod_l+0x122>
 8005398:	9302      	str	r3, [sp, #8]
 800539a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800539c:	4a8e      	ldr	r2, [pc, #568]	@ (80055d8 <_strtod_l+0x288>)
 800539e:	9301      	str	r3, [sp, #4]
 80053a0:	ab1a      	add	r3, sp, #104	@ 0x68
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	9805      	ldr	r0, [sp, #20]
 80053a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80053a8:	a919      	add	r1, sp, #100	@ 0x64
 80053aa:	f001 f915 	bl	80065d8 <__gethex>
 80053ae:	f010 060f 	ands.w	r6, r0, #15
 80053b2:	4604      	mov	r4, r0
 80053b4:	d005      	beq.n	80053c2 <_strtod_l+0x72>
 80053b6:	2e06      	cmp	r6, #6
 80053b8:	d126      	bne.n	8005408 <_strtod_l+0xb8>
 80053ba:	2300      	movs	r3, #0
 80053bc:	3501      	adds	r5, #1
 80053be:	9519      	str	r5, [sp, #100]	@ 0x64
 80053c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80053c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f040 8584 	bne.w	8005ed2 <_strtod_l+0xb82>
 80053ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80053cc:	b1bb      	cbz	r3, 80053fe <_strtod_l+0xae>
 80053ce:	4650      	mov	r0, sl
 80053d0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80053d4:	b01f      	add	sp, #124	@ 0x7c
 80053d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053da:	2920      	cmp	r1, #32
 80053dc:	d1d0      	bne.n	8005380 <_strtod_l+0x30>
 80053de:	3201      	adds	r2, #1
 80053e0:	e7c3      	b.n	800536a <_strtod_l+0x1a>
 80053e2:	292d      	cmp	r1, #45	@ 0x2d
 80053e4:	d1cc      	bne.n	8005380 <_strtod_l+0x30>
 80053e6:	2101      	movs	r1, #1
 80053e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80053ea:	1c51      	adds	r1, r2, #1
 80053ec:	9119      	str	r1, [sp, #100]	@ 0x64
 80053ee:	7852      	ldrb	r2, [r2, #1]
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d1c7      	bne.n	8005384 <_strtod_l+0x34>
 80053f4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80053f6:	9419      	str	r4, [sp, #100]	@ 0x64
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	f040 8568 	bne.w	8005ece <_strtod_l+0xb7e>
 80053fe:	4650      	mov	r0, sl
 8005400:	4659      	mov	r1, fp
 8005402:	e7e7      	b.n	80053d4 <_strtod_l+0x84>
 8005404:	2100      	movs	r1, #0
 8005406:	e7ef      	b.n	80053e8 <_strtod_l+0x98>
 8005408:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800540a:	b13a      	cbz	r2, 800541c <_strtod_l+0xcc>
 800540c:	2135      	movs	r1, #53	@ 0x35
 800540e:	a81c      	add	r0, sp, #112	@ 0x70
 8005410:	f7ff ff36 	bl	8005280 <__copybits>
 8005414:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005416:	9805      	ldr	r0, [sp, #20]
 8005418:	f7ff fb10 	bl	8004a3c <_Bfree>
 800541c:	3e01      	subs	r6, #1
 800541e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005420:	2e04      	cmp	r6, #4
 8005422:	d806      	bhi.n	8005432 <_strtod_l+0xe2>
 8005424:	e8df f006 	tbb	[pc, r6]
 8005428:	201d0314 	.word	0x201d0314
 800542c:	14          	.byte	0x14
 800542d:	00          	.byte	0x00
 800542e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005432:	05e1      	lsls	r1, r4, #23
 8005434:	bf48      	it	mi
 8005436:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800543a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800543e:	0d1b      	lsrs	r3, r3, #20
 8005440:	051b      	lsls	r3, r3, #20
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1bd      	bne.n	80053c2 <_strtod_l+0x72>
 8005446:	f7fe fb2b 	bl	8003aa0 <__errno>
 800544a:	2322      	movs	r3, #34	@ 0x22
 800544c:	6003      	str	r3, [r0, #0]
 800544e:	e7b8      	b.n	80053c2 <_strtod_l+0x72>
 8005450:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005454:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005458:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800545c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005460:	e7e7      	b.n	8005432 <_strtod_l+0xe2>
 8005462:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80055dc <_strtod_l+0x28c>
 8005466:	e7e4      	b.n	8005432 <_strtod_l+0xe2>
 8005468:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800546c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005470:	e7df      	b.n	8005432 <_strtod_l+0xe2>
 8005472:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005474:	1c5a      	adds	r2, r3, #1
 8005476:	9219      	str	r2, [sp, #100]	@ 0x64
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	2b30      	cmp	r3, #48	@ 0x30
 800547c:	d0f9      	beq.n	8005472 <_strtod_l+0x122>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d09f      	beq.n	80053c2 <_strtod_l+0x72>
 8005482:	2301      	movs	r3, #1
 8005484:	9309      	str	r3, [sp, #36]	@ 0x24
 8005486:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005488:	220a      	movs	r2, #10
 800548a:	930c      	str	r3, [sp, #48]	@ 0x30
 800548c:	2300      	movs	r3, #0
 800548e:	461f      	mov	r7, r3
 8005490:	9308      	str	r3, [sp, #32]
 8005492:	930a      	str	r3, [sp, #40]	@ 0x28
 8005494:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005496:	7805      	ldrb	r5, [r0, #0]
 8005498:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800549c:	b2d9      	uxtb	r1, r3
 800549e:	2909      	cmp	r1, #9
 80054a0:	d928      	bls.n	80054f4 <_strtod_l+0x1a4>
 80054a2:	2201      	movs	r2, #1
 80054a4:	494e      	ldr	r1, [pc, #312]	@ (80055e0 <_strtod_l+0x290>)
 80054a6:	f000 ffc7 	bl	8006438 <strncmp>
 80054aa:	2800      	cmp	r0, #0
 80054ac:	d032      	beq.n	8005514 <_strtod_l+0x1c4>
 80054ae:	2000      	movs	r0, #0
 80054b0:	462a      	mov	r2, r5
 80054b2:	4681      	mov	r9, r0
 80054b4:	463d      	mov	r5, r7
 80054b6:	4603      	mov	r3, r0
 80054b8:	2a65      	cmp	r2, #101	@ 0x65
 80054ba:	d001      	beq.n	80054c0 <_strtod_l+0x170>
 80054bc:	2a45      	cmp	r2, #69	@ 0x45
 80054be:	d114      	bne.n	80054ea <_strtod_l+0x19a>
 80054c0:	b91d      	cbnz	r5, 80054ca <_strtod_l+0x17a>
 80054c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054c4:	4302      	orrs	r2, r0
 80054c6:	d095      	beq.n	80053f4 <_strtod_l+0xa4>
 80054c8:	2500      	movs	r5, #0
 80054ca:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80054cc:	1c62      	adds	r2, r4, #1
 80054ce:	9219      	str	r2, [sp, #100]	@ 0x64
 80054d0:	7862      	ldrb	r2, [r4, #1]
 80054d2:	2a2b      	cmp	r2, #43	@ 0x2b
 80054d4:	d077      	beq.n	80055c6 <_strtod_l+0x276>
 80054d6:	2a2d      	cmp	r2, #45	@ 0x2d
 80054d8:	d07b      	beq.n	80055d2 <_strtod_l+0x282>
 80054da:	f04f 0c00 	mov.w	ip, #0
 80054de:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80054e2:	2909      	cmp	r1, #9
 80054e4:	f240 8082 	bls.w	80055ec <_strtod_l+0x29c>
 80054e8:	9419      	str	r4, [sp, #100]	@ 0x64
 80054ea:	f04f 0800 	mov.w	r8, #0
 80054ee:	e0a2      	b.n	8005636 <_strtod_l+0x2e6>
 80054f0:	2300      	movs	r3, #0
 80054f2:	e7c7      	b.n	8005484 <_strtod_l+0x134>
 80054f4:	2f08      	cmp	r7, #8
 80054f6:	bfd5      	itete	le
 80054f8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80054fa:	9908      	ldrgt	r1, [sp, #32]
 80054fc:	fb02 3301 	mlale	r3, r2, r1, r3
 8005500:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005504:	f100 0001 	add.w	r0, r0, #1
 8005508:	bfd4      	ite	le
 800550a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800550c:	9308      	strgt	r3, [sp, #32]
 800550e:	3701      	adds	r7, #1
 8005510:	9019      	str	r0, [sp, #100]	@ 0x64
 8005512:	e7bf      	b.n	8005494 <_strtod_l+0x144>
 8005514:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005516:	1c5a      	adds	r2, r3, #1
 8005518:	9219      	str	r2, [sp, #100]	@ 0x64
 800551a:	785a      	ldrb	r2, [r3, #1]
 800551c:	b37f      	cbz	r7, 800557e <_strtod_l+0x22e>
 800551e:	4681      	mov	r9, r0
 8005520:	463d      	mov	r5, r7
 8005522:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005526:	2b09      	cmp	r3, #9
 8005528:	d912      	bls.n	8005550 <_strtod_l+0x200>
 800552a:	2301      	movs	r3, #1
 800552c:	e7c4      	b.n	80054b8 <_strtod_l+0x168>
 800552e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005530:	3001      	adds	r0, #1
 8005532:	1c5a      	adds	r2, r3, #1
 8005534:	9219      	str	r2, [sp, #100]	@ 0x64
 8005536:	785a      	ldrb	r2, [r3, #1]
 8005538:	2a30      	cmp	r2, #48	@ 0x30
 800553a:	d0f8      	beq.n	800552e <_strtod_l+0x1de>
 800553c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005540:	2b08      	cmp	r3, #8
 8005542:	f200 84cb 	bhi.w	8005edc <_strtod_l+0xb8c>
 8005546:	4681      	mov	r9, r0
 8005548:	2000      	movs	r0, #0
 800554a:	4605      	mov	r5, r0
 800554c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800554e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005550:	3a30      	subs	r2, #48	@ 0x30
 8005552:	f100 0301 	add.w	r3, r0, #1
 8005556:	d02a      	beq.n	80055ae <_strtod_l+0x25e>
 8005558:	4499      	add	r9, r3
 800555a:	210a      	movs	r1, #10
 800555c:	462b      	mov	r3, r5
 800555e:	eb00 0c05 	add.w	ip, r0, r5
 8005562:	4563      	cmp	r3, ip
 8005564:	d10d      	bne.n	8005582 <_strtod_l+0x232>
 8005566:	1c69      	adds	r1, r5, #1
 8005568:	4401      	add	r1, r0
 800556a:	4428      	add	r0, r5
 800556c:	2808      	cmp	r0, #8
 800556e:	dc16      	bgt.n	800559e <_strtod_l+0x24e>
 8005570:	230a      	movs	r3, #10
 8005572:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005574:	fb03 2300 	mla	r3, r3, r0, r2
 8005578:	930a      	str	r3, [sp, #40]	@ 0x28
 800557a:	2300      	movs	r3, #0
 800557c:	e018      	b.n	80055b0 <_strtod_l+0x260>
 800557e:	4638      	mov	r0, r7
 8005580:	e7da      	b.n	8005538 <_strtod_l+0x1e8>
 8005582:	2b08      	cmp	r3, #8
 8005584:	f103 0301 	add.w	r3, r3, #1
 8005588:	dc03      	bgt.n	8005592 <_strtod_l+0x242>
 800558a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800558c:	434e      	muls	r6, r1
 800558e:	960a      	str	r6, [sp, #40]	@ 0x28
 8005590:	e7e7      	b.n	8005562 <_strtod_l+0x212>
 8005592:	2b10      	cmp	r3, #16
 8005594:	bfde      	ittt	le
 8005596:	9e08      	ldrle	r6, [sp, #32]
 8005598:	434e      	mulle	r6, r1
 800559a:	9608      	strle	r6, [sp, #32]
 800559c:	e7e1      	b.n	8005562 <_strtod_l+0x212>
 800559e:	280f      	cmp	r0, #15
 80055a0:	dceb      	bgt.n	800557a <_strtod_l+0x22a>
 80055a2:	230a      	movs	r3, #10
 80055a4:	9808      	ldr	r0, [sp, #32]
 80055a6:	fb03 2300 	mla	r3, r3, r0, r2
 80055aa:	9308      	str	r3, [sp, #32]
 80055ac:	e7e5      	b.n	800557a <_strtod_l+0x22a>
 80055ae:	4629      	mov	r1, r5
 80055b0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80055b2:	460d      	mov	r5, r1
 80055b4:	1c50      	adds	r0, r2, #1
 80055b6:	9019      	str	r0, [sp, #100]	@ 0x64
 80055b8:	7852      	ldrb	r2, [r2, #1]
 80055ba:	4618      	mov	r0, r3
 80055bc:	e7b1      	b.n	8005522 <_strtod_l+0x1d2>
 80055be:	f04f 0900 	mov.w	r9, #0
 80055c2:	2301      	movs	r3, #1
 80055c4:	e77d      	b.n	80054c2 <_strtod_l+0x172>
 80055c6:	f04f 0c00 	mov.w	ip, #0
 80055ca:	1ca2      	adds	r2, r4, #2
 80055cc:	9219      	str	r2, [sp, #100]	@ 0x64
 80055ce:	78a2      	ldrb	r2, [r4, #2]
 80055d0:	e785      	b.n	80054de <_strtod_l+0x18e>
 80055d2:	f04f 0c01 	mov.w	ip, #1
 80055d6:	e7f8      	b.n	80055ca <_strtod_l+0x27a>
 80055d8:	08007400 	.word	0x08007400
 80055dc:	7ff00000 	.word	0x7ff00000
 80055e0:	080073e8 	.word	0x080073e8
 80055e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80055e6:	1c51      	adds	r1, r2, #1
 80055e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80055ea:	7852      	ldrb	r2, [r2, #1]
 80055ec:	2a30      	cmp	r2, #48	@ 0x30
 80055ee:	d0f9      	beq.n	80055e4 <_strtod_l+0x294>
 80055f0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80055f4:	2908      	cmp	r1, #8
 80055f6:	f63f af78 	bhi.w	80054ea <_strtod_l+0x19a>
 80055fa:	f04f 080a 	mov.w	r8, #10
 80055fe:	3a30      	subs	r2, #48	@ 0x30
 8005600:	920e      	str	r2, [sp, #56]	@ 0x38
 8005602:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005604:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005606:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005608:	1c56      	adds	r6, r2, #1
 800560a:	9619      	str	r6, [sp, #100]	@ 0x64
 800560c:	7852      	ldrb	r2, [r2, #1]
 800560e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005612:	f1be 0f09 	cmp.w	lr, #9
 8005616:	d939      	bls.n	800568c <_strtod_l+0x33c>
 8005618:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800561a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800561e:	1a76      	subs	r6, r6, r1
 8005620:	2e08      	cmp	r6, #8
 8005622:	dc03      	bgt.n	800562c <_strtod_l+0x2dc>
 8005624:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005626:	4588      	cmp	r8, r1
 8005628:	bfa8      	it	ge
 800562a:	4688      	movge	r8, r1
 800562c:	f1bc 0f00 	cmp.w	ip, #0
 8005630:	d001      	beq.n	8005636 <_strtod_l+0x2e6>
 8005632:	f1c8 0800 	rsb	r8, r8, #0
 8005636:	2d00      	cmp	r5, #0
 8005638:	d14e      	bne.n	80056d8 <_strtod_l+0x388>
 800563a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800563c:	4308      	orrs	r0, r1
 800563e:	f47f aec0 	bne.w	80053c2 <_strtod_l+0x72>
 8005642:	2b00      	cmp	r3, #0
 8005644:	f47f aed6 	bne.w	80053f4 <_strtod_l+0xa4>
 8005648:	2a69      	cmp	r2, #105	@ 0x69
 800564a:	d028      	beq.n	800569e <_strtod_l+0x34e>
 800564c:	dc25      	bgt.n	800569a <_strtod_l+0x34a>
 800564e:	2a49      	cmp	r2, #73	@ 0x49
 8005650:	d025      	beq.n	800569e <_strtod_l+0x34e>
 8005652:	2a4e      	cmp	r2, #78	@ 0x4e
 8005654:	f47f aece 	bne.w	80053f4 <_strtod_l+0xa4>
 8005658:	499a      	ldr	r1, [pc, #616]	@ (80058c4 <_strtod_l+0x574>)
 800565a:	a819      	add	r0, sp, #100	@ 0x64
 800565c:	f001 f9de 	bl	8006a1c <__match>
 8005660:	2800      	cmp	r0, #0
 8005662:	f43f aec7 	beq.w	80053f4 <_strtod_l+0xa4>
 8005666:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b28      	cmp	r3, #40	@ 0x28
 800566c:	d12e      	bne.n	80056cc <_strtod_l+0x37c>
 800566e:	4996      	ldr	r1, [pc, #600]	@ (80058c8 <_strtod_l+0x578>)
 8005670:	aa1c      	add	r2, sp, #112	@ 0x70
 8005672:	a819      	add	r0, sp, #100	@ 0x64
 8005674:	f001 f9e6 	bl	8006a44 <__hexnan>
 8005678:	2805      	cmp	r0, #5
 800567a:	d127      	bne.n	80056cc <_strtod_l+0x37c>
 800567c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800567e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005682:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005686:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800568a:	e69a      	b.n	80053c2 <_strtod_l+0x72>
 800568c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800568e:	fb08 2101 	mla	r1, r8, r1, r2
 8005692:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005696:	920e      	str	r2, [sp, #56]	@ 0x38
 8005698:	e7b5      	b.n	8005606 <_strtod_l+0x2b6>
 800569a:	2a6e      	cmp	r2, #110	@ 0x6e
 800569c:	e7da      	b.n	8005654 <_strtod_l+0x304>
 800569e:	498b      	ldr	r1, [pc, #556]	@ (80058cc <_strtod_l+0x57c>)
 80056a0:	a819      	add	r0, sp, #100	@ 0x64
 80056a2:	f001 f9bb 	bl	8006a1c <__match>
 80056a6:	2800      	cmp	r0, #0
 80056a8:	f43f aea4 	beq.w	80053f4 <_strtod_l+0xa4>
 80056ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056ae:	4988      	ldr	r1, [pc, #544]	@ (80058d0 <_strtod_l+0x580>)
 80056b0:	3b01      	subs	r3, #1
 80056b2:	a819      	add	r0, sp, #100	@ 0x64
 80056b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80056b6:	f001 f9b1 	bl	8006a1c <__match>
 80056ba:	b910      	cbnz	r0, 80056c2 <_strtod_l+0x372>
 80056bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80056be:	3301      	adds	r3, #1
 80056c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80056c2:	f04f 0a00 	mov.w	sl, #0
 80056c6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80058d4 <_strtod_l+0x584>
 80056ca:	e67a      	b.n	80053c2 <_strtod_l+0x72>
 80056cc:	4882      	ldr	r0, [pc, #520]	@ (80058d8 <_strtod_l+0x588>)
 80056ce:	f000 fee3 	bl	8006498 <nan>
 80056d2:	4682      	mov	sl, r0
 80056d4:	468b      	mov	fp, r1
 80056d6:	e674      	b.n	80053c2 <_strtod_l+0x72>
 80056d8:	eba8 0309 	sub.w	r3, r8, r9
 80056dc:	2f00      	cmp	r7, #0
 80056de:	bf08      	it	eq
 80056e0:	462f      	moveq	r7, r5
 80056e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80056e4:	2d10      	cmp	r5, #16
 80056e6:	462c      	mov	r4, r5
 80056e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80056ea:	bfa8      	it	ge
 80056ec:	2410      	movge	r4, #16
 80056ee:	f7fa fe79 	bl	80003e4 <__aeabi_ui2d>
 80056f2:	2d09      	cmp	r5, #9
 80056f4:	4682      	mov	sl, r0
 80056f6:	468b      	mov	fp, r1
 80056f8:	dc11      	bgt.n	800571e <_strtod_l+0x3ce>
 80056fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f43f ae60 	beq.w	80053c2 <_strtod_l+0x72>
 8005702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005704:	dd76      	ble.n	80057f4 <_strtod_l+0x4a4>
 8005706:	2b16      	cmp	r3, #22
 8005708:	dc5d      	bgt.n	80057c6 <_strtod_l+0x476>
 800570a:	4974      	ldr	r1, [pc, #464]	@ (80058dc <_strtod_l+0x58c>)
 800570c:	4652      	mov	r2, sl
 800570e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005712:	465b      	mov	r3, fp
 8005714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005718:	f7fa fede 	bl	80004d8 <__aeabi_dmul>
 800571c:	e7d9      	b.n	80056d2 <_strtod_l+0x382>
 800571e:	4b6f      	ldr	r3, [pc, #444]	@ (80058dc <_strtod_l+0x58c>)
 8005720:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005724:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005728:	f7fa fed6 	bl	80004d8 <__aeabi_dmul>
 800572c:	4682      	mov	sl, r0
 800572e:	9808      	ldr	r0, [sp, #32]
 8005730:	468b      	mov	fp, r1
 8005732:	f7fa fe57 	bl	80003e4 <__aeabi_ui2d>
 8005736:	4602      	mov	r2, r0
 8005738:	460b      	mov	r3, r1
 800573a:	4650      	mov	r0, sl
 800573c:	4659      	mov	r1, fp
 800573e:	f7fa fd15 	bl	800016c <__adddf3>
 8005742:	2d0f      	cmp	r5, #15
 8005744:	4682      	mov	sl, r0
 8005746:	468b      	mov	fp, r1
 8005748:	ddd7      	ble.n	80056fa <_strtod_l+0x3aa>
 800574a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800574c:	1b2c      	subs	r4, r5, r4
 800574e:	441c      	add	r4, r3
 8005750:	2c00      	cmp	r4, #0
 8005752:	f340 8096 	ble.w	8005882 <_strtod_l+0x532>
 8005756:	f014 030f 	ands.w	r3, r4, #15
 800575a:	d00a      	beq.n	8005772 <_strtod_l+0x422>
 800575c:	495f      	ldr	r1, [pc, #380]	@ (80058dc <_strtod_l+0x58c>)
 800575e:	4652      	mov	r2, sl
 8005760:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005764:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005768:	465b      	mov	r3, fp
 800576a:	f7fa feb5 	bl	80004d8 <__aeabi_dmul>
 800576e:	4682      	mov	sl, r0
 8005770:	468b      	mov	fp, r1
 8005772:	f034 040f 	bics.w	r4, r4, #15
 8005776:	d073      	beq.n	8005860 <_strtod_l+0x510>
 8005778:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800577c:	dd48      	ble.n	8005810 <_strtod_l+0x4c0>
 800577e:	2400      	movs	r4, #0
 8005780:	46a0      	mov	r8, r4
 8005782:	46a1      	mov	r9, r4
 8005784:	940a      	str	r4, [sp, #40]	@ 0x28
 8005786:	2322      	movs	r3, #34	@ 0x22
 8005788:	f04f 0a00 	mov.w	sl, #0
 800578c:	9a05      	ldr	r2, [sp, #20]
 800578e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80058d4 <_strtod_l+0x584>
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005796:	2b00      	cmp	r3, #0
 8005798:	f43f ae13 	beq.w	80053c2 <_strtod_l+0x72>
 800579c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800579e:	9805      	ldr	r0, [sp, #20]
 80057a0:	f7ff f94c 	bl	8004a3c <_Bfree>
 80057a4:	4649      	mov	r1, r9
 80057a6:	9805      	ldr	r0, [sp, #20]
 80057a8:	f7ff f948 	bl	8004a3c <_Bfree>
 80057ac:	4641      	mov	r1, r8
 80057ae:	9805      	ldr	r0, [sp, #20]
 80057b0:	f7ff f944 	bl	8004a3c <_Bfree>
 80057b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057b6:	9805      	ldr	r0, [sp, #20]
 80057b8:	f7ff f940 	bl	8004a3c <_Bfree>
 80057bc:	4621      	mov	r1, r4
 80057be:	9805      	ldr	r0, [sp, #20]
 80057c0:	f7ff f93c 	bl	8004a3c <_Bfree>
 80057c4:	e5fd      	b.n	80053c2 <_strtod_l+0x72>
 80057c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80057cc:	4293      	cmp	r3, r2
 80057ce:	dbbc      	blt.n	800574a <_strtod_l+0x3fa>
 80057d0:	4c42      	ldr	r4, [pc, #264]	@ (80058dc <_strtod_l+0x58c>)
 80057d2:	f1c5 050f 	rsb	r5, r5, #15
 80057d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80057da:	4652      	mov	r2, sl
 80057dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80057e0:	465b      	mov	r3, fp
 80057e2:	f7fa fe79 	bl	80004d8 <__aeabi_dmul>
 80057e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e8:	1b5d      	subs	r5, r3, r5
 80057ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80057ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80057f2:	e791      	b.n	8005718 <_strtod_l+0x3c8>
 80057f4:	3316      	adds	r3, #22
 80057f6:	dba8      	blt.n	800574a <_strtod_l+0x3fa>
 80057f8:	4b38      	ldr	r3, [pc, #224]	@ (80058dc <_strtod_l+0x58c>)
 80057fa:	eba9 0808 	sub.w	r8, r9, r8
 80057fe:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005802:	4650      	mov	r0, sl
 8005804:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005808:	4659      	mov	r1, fp
 800580a:	f7fa ff8f 	bl	800072c <__aeabi_ddiv>
 800580e:	e760      	b.n	80056d2 <_strtod_l+0x382>
 8005810:	4b33      	ldr	r3, [pc, #204]	@ (80058e0 <_strtod_l+0x590>)
 8005812:	4650      	mov	r0, sl
 8005814:	9308      	str	r3, [sp, #32]
 8005816:	2300      	movs	r3, #0
 8005818:	4659      	mov	r1, fp
 800581a:	461e      	mov	r6, r3
 800581c:	1124      	asrs	r4, r4, #4
 800581e:	2c01      	cmp	r4, #1
 8005820:	dc21      	bgt.n	8005866 <_strtod_l+0x516>
 8005822:	b10b      	cbz	r3, 8005828 <_strtod_l+0x4d8>
 8005824:	4682      	mov	sl, r0
 8005826:	468b      	mov	fp, r1
 8005828:	492d      	ldr	r1, [pc, #180]	@ (80058e0 <_strtod_l+0x590>)
 800582a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800582e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005832:	4652      	mov	r2, sl
 8005834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005838:	465b      	mov	r3, fp
 800583a:	f7fa fe4d 	bl	80004d8 <__aeabi_dmul>
 800583e:	4b25      	ldr	r3, [pc, #148]	@ (80058d4 <_strtod_l+0x584>)
 8005840:	460a      	mov	r2, r1
 8005842:	400b      	ands	r3, r1
 8005844:	4927      	ldr	r1, [pc, #156]	@ (80058e4 <_strtod_l+0x594>)
 8005846:	4682      	mov	sl, r0
 8005848:	428b      	cmp	r3, r1
 800584a:	d898      	bhi.n	800577e <_strtod_l+0x42e>
 800584c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005850:	428b      	cmp	r3, r1
 8005852:	bf86      	itte	hi
 8005854:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8005858:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80058e8 <_strtod_l+0x598>
 800585c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005860:	2300      	movs	r3, #0
 8005862:	9308      	str	r3, [sp, #32]
 8005864:	e07a      	b.n	800595c <_strtod_l+0x60c>
 8005866:	07e2      	lsls	r2, r4, #31
 8005868:	d505      	bpl.n	8005876 <_strtod_l+0x526>
 800586a:	9b08      	ldr	r3, [sp, #32]
 800586c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005870:	f7fa fe32 	bl	80004d8 <__aeabi_dmul>
 8005874:	2301      	movs	r3, #1
 8005876:	9a08      	ldr	r2, [sp, #32]
 8005878:	3601      	adds	r6, #1
 800587a:	3208      	adds	r2, #8
 800587c:	1064      	asrs	r4, r4, #1
 800587e:	9208      	str	r2, [sp, #32]
 8005880:	e7cd      	b.n	800581e <_strtod_l+0x4ce>
 8005882:	d0ed      	beq.n	8005860 <_strtod_l+0x510>
 8005884:	4264      	negs	r4, r4
 8005886:	f014 020f 	ands.w	r2, r4, #15
 800588a:	d00a      	beq.n	80058a2 <_strtod_l+0x552>
 800588c:	4b13      	ldr	r3, [pc, #76]	@ (80058dc <_strtod_l+0x58c>)
 800588e:	4650      	mov	r0, sl
 8005890:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005894:	4659      	mov	r1, fp
 8005896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589a:	f7fa ff47 	bl	800072c <__aeabi_ddiv>
 800589e:	4682      	mov	sl, r0
 80058a0:	468b      	mov	fp, r1
 80058a2:	1124      	asrs	r4, r4, #4
 80058a4:	d0dc      	beq.n	8005860 <_strtod_l+0x510>
 80058a6:	2c1f      	cmp	r4, #31
 80058a8:	dd20      	ble.n	80058ec <_strtod_l+0x59c>
 80058aa:	2400      	movs	r4, #0
 80058ac:	46a0      	mov	r8, r4
 80058ae:	46a1      	mov	r9, r4
 80058b0:	940a      	str	r4, [sp, #40]	@ 0x28
 80058b2:	2322      	movs	r3, #34	@ 0x22
 80058b4:	9a05      	ldr	r2, [sp, #20]
 80058b6:	f04f 0a00 	mov.w	sl, #0
 80058ba:	f04f 0b00 	mov.w	fp, #0
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	e768      	b.n	8005794 <_strtod_l+0x444>
 80058c2:	bf00      	nop
 80058c4:	080071d5 	.word	0x080071d5
 80058c8:	080073ec 	.word	0x080073ec
 80058cc:	080071cd 	.word	0x080071cd
 80058d0:	08007204 	.word	0x08007204
 80058d4:	7ff00000 	.word	0x7ff00000
 80058d8:	08007595 	.word	0x08007595
 80058dc:	08007320 	.word	0x08007320
 80058e0:	080072f8 	.word	0x080072f8
 80058e4:	7ca00000 	.word	0x7ca00000
 80058e8:	7fefffff 	.word	0x7fefffff
 80058ec:	f014 0310 	ands.w	r3, r4, #16
 80058f0:	bf18      	it	ne
 80058f2:	236a      	movne	r3, #106	@ 0x6a
 80058f4:	4650      	mov	r0, sl
 80058f6:	9308      	str	r3, [sp, #32]
 80058f8:	4659      	mov	r1, fp
 80058fa:	2300      	movs	r3, #0
 80058fc:	4ea9      	ldr	r6, [pc, #676]	@ (8005ba4 <_strtod_l+0x854>)
 80058fe:	07e2      	lsls	r2, r4, #31
 8005900:	d504      	bpl.n	800590c <_strtod_l+0x5bc>
 8005902:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005906:	f7fa fde7 	bl	80004d8 <__aeabi_dmul>
 800590a:	2301      	movs	r3, #1
 800590c:	1064      	asrs	r4, r4, #1
 800590e:	f106 0608 	add.w	r6, r6, #8
 8005912:	d1f4      	bne.n	80058fe <_strtod_l+0x5ae>
 8005914:	b10b      	cbz	r3, 800591a <_strtod_l+0x5ca>
 8005916:	4682      	mov	sl, r0
 8005918:	468b      	mov	fp, r1
 800591a:	9b08      	ldr	r3, [sp, #32]
 800591c:	b1b3      	cbz	r3, 800594c <_strtod_l+0x5fc>
 800591e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005922:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005926:	2b00      	cmp	r3, #0
 8005928:	4659      	mov	r1, fp
 800592a:	dd0f      	ble.n	800594c <_strtod_l+0x5fc>
 800592c:	2b1f      	cmp	r3, #31
 800592e:	dd57      	ble.n	80059e0 <_strtod_l+0x690>
 8005930:	2b34      	cmp	r3, #52	@ 0x34
 8005932:	bfd8      	it	le
 8005934:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8005938:	f04f 0a00 	mov.w	sl, #0
 800593c:	bfcf      	iteee	gt
 800593e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005942:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005946:	4093      	lslle	r3, r2
 8005948:	ea03 0b01 	andle.w	fp, r3, r1
 800594c:	2200      	movs	r2, #0
 800594e:	2300      	movs	r3, #0
 8005950:	4650      	mov	r0, sl
 8005952:	4659      	mov	r1, fp
 8005954:	f7fb f828 	bl	80009a8 <__aeabi_dcmpeq>
 8005958:	2800      	cmp	r0, #0
 800595a:	d1a6      	bne.n	80058aa <_strtod_l+0x55a>
 800595c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800595e:	463a      	mov	r2, r7
 8005960:	9300      	str	r3, [sp, #0]
 8005962:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005964:	462b      	mov	r3, r5
 8005966:	9805      	ldr	r0, [sp, #20]
 8005968:	f7ff f8d0 	bl	8004b0c <__s2b>
 800596c:	900a      	str	r0, [sp, #40]	@ 0x28
 800596e:	2800      	cmp	r0, #0
 8005970:	f43f af05 	beq.w	800577e <_strtod_l+0x42e>
 8005974:	2400      	movs	r4, #0
 8005976:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005978:	eba9 0308 	sub.w	r3, r9, r8
 800597c:	2a00      	cmp	r2, #0
 800597e:	bfa8      	it	ge
 8005980:	2300      	movge	r3, #0
 8005982:	46a0      	mov	r8, r4
 8005984:	9312      	str	r3, [sp, #72]	@ 0x48
 8005986:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800598a:	9316      	str	r3, [sp, #88]	@ 0x58
 800598c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800598e:	9805      	ldr	r0, [sp, #20]
 8005990:	6859      	ldr	r1, [r3, #4]
 8005992:	f7ff f813 	bl	80049bc <_Balloc>
 8005996:	4681      	mov	r9, r0
 8005998:	2800      	cmp	r0, #0
 800599a:	f43f aef4 	beq.w	8005786 <_strtod_l+0x436>
 800599e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059a0:	300c      	adds	r0, #12
 80059a2:	691a      	ldr	r2, [r3, #16]
 80059a4:	f103 010c 	add.w	r1, r3, #12
 80059a8:	3202      	adds	r2, #2
 80059aa:	0092      	lsls	r2, r2, #2
 80059ac:	f000 fd66 	bl	800647c <memcpy>
 80059b0:	ab1c      	add	r3, sp, #112	@ 0x70
 80059b2:	9301      	str	r3, [sp, #4]
 80059b4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	4652      	mov	r2, sl
 80059ba:	465b      	mov	r3, fp
 80059bc:	9805      	ldr	r0, [sp, #20]
 80059be:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80059c2:	f7ff fbd5 	bl	8005170 <__d2b>
 80059c6:	901a      	str	r0, [sp, #104]	@ 0x68
 80059c8:	2800      	cmp	r0, #0
 80059ca:	f43f aedc 	beq.w	8005786 <_strtod_l+0x436>
 80059ce:	2101      	movs	r1, #1
 80059d0:	9805      	ldr	r0, [sp, #20]
 80059d2:	f7ff f931 	bl	8004c38 <__i2b>
 80059d6:	4680      	mov	r8, r0
 80059d8:	b948      	cbnz	r0, 80059ee <_strtod_l+0x69e>
 80059da:	f04f 0800 	mov.w	r8, #0
 80059de:	e6d2      	b.n	8005786 <_strtod_l+0x436>
 80059e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	ea03 0a0a 	and.w	sl, r3, sl
 80059ec:	e7ae      	b.n	800594c <_strtod_l+0x5fc>
 80059ee:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80059f0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	bfab      	itete	ge
 80059f6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80059f8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80059fa:	18ef      	addge	r7, r5, r3
 80059fc:	1b5e      	sublt	r6, r3, r5
 80059fe:	9b08      	ldr	r3, [sp, #32]
 8005a00:	bfa8      	it	ge
 8005a02:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005a04:	eba5 0503 	sub.w	r5, r5, r3
 8005a08:	4415      	add	r5, r2
 8005a0a:	4b67      	ldr	r3, [pc, #412]	@ (8005ba8 <_strtod_l+0x858>)
 8005a0c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8005a10:	bfb8      	it	lt
 8005a12:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005a14:	429d      	cmp	r5, r3
 8005a16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005a1a:	da50      	bge.n	8005abe <_strtod_l+0x76e>
 8005a1c:	1b5b      	subs	r3, r3, r5
 8005a1e:	2b1f      	cmp	r3, #31
 8005a20:	f04f 0101 	mov.w	r1, #1
 8005a24:	eba2 0203 	sub.w	r2, r2, r3
 8005a28:	dc3d      	bgt.n	8005aa6 <_strtod_l+0x756>
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005a30:	2300      	movs	r3, #0
 8005a32:	9310      	str	r3, [sp, #64]	@ 0x40
 8005a34:	18bd      	adds	r5, r7, r2
 8005a36:	9b08      	ldr	r3, [sp, #32]
 8005a38:	42af      	cmp	r7, r5
 8005a3a:	4416      	add	r6, r2
 8005a3c:	441e      	add	r6, r3
 8005a3e:	463b      	mov	r3, r7
 8005a40:	bfa8      	it	ge
 8005a42:	462b      	movge	r3, r5
 8005a44:	42b3      	cmp	r3, r6
 8005a46:	bfa8      	it	ge
 8005a48:	4633      	movge	r3, r6
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	bfc2      	ittt	gt
 8005a4e:	1aed      	subgt	r5, r5, r3
 8005a50:	1af6      	subgt	r6, r6, r3
 8005a52:	1aff      	subgt	r7, r7, r3
 8005a54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	dd16      	ble.n	8005a88 <_strtod_l+0x738>
 8005a5a:	4641      	mov	r1, r8
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	9805      	ldr	r0, [sp, #20]
 8005a60:	f7ff f9a8 	bl	8004db4 <__pow5mult>
 8005a64:	4680      	mov	r8, r0
 8005a66:	2800      	cmp	r0, #0
 8005a68:	d0b7      	beq.n	80059da <_strtod_l+0x68a>
 8005a6a:	4601      	mov	r1, r0
 8005a6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005a6e:	9805      	ldr	r0, [sp, #20]
 8005a70:	f7ff f8f8 	bl	8004c64 <__multiply>
 8005a74:	900e      	str	r0, [sp, #56]	@ 0x38
 8005a76:	2800      	cmp	r0, #0
 8005a78:	f43f ae85 	beq.w	8005786 <_strtod_l+0x436>
 8005a7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005a7e:	9805      	ldr	r0, [sp, #20]
 8005a80:	f7fe ffdc 	bl	8004a3c <_Bfree>
 8005a84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a86:	931a      	str	r3, [sp, #104]	@ 0x68
 8005a88:	2d00      	cmp	r5, #0
 8005a8a:	dc1d      	bgt.n	8005ac8 <_strtod_l+0x778>
 8005a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	dd23      	ble.n	8005ada <_strtod_l+0x78a>
 8005a92:	4649      	mov	r1, r9
 8005a94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005a96:	9805      	ldr	r0, [sp, #20]
 8005a98:	f7ff f98c 	bl	8004db4 <__pow5mult>
 8005a9c:	4681      	mov	r9, r0
 8005a9e:	b9e0      	cbnz	r0, 8005ada <_strtod_l+0x78a>
 8005aa0:	f04f 0900 	mov.w	r9, #0
 8005aa4:	e66f      	b.n	8005786 <_strtod_l+0x436>
 8005aa6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005aaa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005aae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005ab2:	35e2      	adds	r5, #226	@ 0xe2
 8005ab4:	fa01 f305 	lsl.w	r3, r1, r5
 8005ab8:	9310      	str	r3, [sp, #64]	@ 0x40
 8005aba:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005abc:	e7ba      	b.n	8005a34 <_strtod_l+0x6e4>
 8005abe:	2300      	movs	r3, #0
 8005ac0:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ac6:	e7b5      	b.n	8005a34 <_strtod_l+0x6e4>
 8005ac8:	462a      	mov	r2, r5
 8005aca:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005acc:	9805      	ldr	r0, [sp, #20]
 8005ace:	f7ff f9cb 	bl	8004e68 <__lshift>
 8005ad2:	901a      	str	r0, [sp, #104]	@ 0x68
 8005ad4:	2800      	cmp	r0, #0
 8005ad6:	d1d9      	bne.n	8005a8c <_strtod_l+0x73c>
 8005ad8:	e655      	b.n	8005786 <_strtod_l+0x436>
 8005ada:	2e00      	cmp	r6, #0
 8005adc:	dd07      	ble.n	8005aee <_strtod_l+0x79e>
 8005ade:	4649      	mov	r1, r9
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	9805      	ldr	r0, [sp, #20]
 8005ae4:	f7ff f9c0 	bl	8004e68 <__lshift>
 8005ae8:	4681      	mov	r9, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d0d8      	beq.n	8005aa0 <_strtod_l+0x750>
 8005aee:	2f00      	cmp	r7, #0
 8005af0:	dd08      	ble.n	8005b04 <_strtod_l+0x7b4>
 8005af2:	4641      	mov	r1, r8
 8005af4:	463a      	mov	r2, r7
 8005af6:	9805      	ldr	r0, [sp, #20]
 8005af8:	f7ff f9b6 	bl	8004e68 <__lshift>
 8005afc:	4680      	mov	r8, r0
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f43f ae41 	beq.w	8005786 <_strtod_l+0x436>
 8005b04:	464a      	mov	r2, r9
 8005b06:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b08:	9805      	ldr	r0, [sp, #20]
 8005b0a:	f7ff fa35 	bl	8004f78 <__mdiff>
 8005b0e:	4604      	mov	r4, r0
 8005b10:	2800      	cmp	r0, #0
 8005b12:	f43f ae38 	beq.w	8005786 <_strtod_l+0x436>
 8005b16:	68c3      	ldr	r3, [r0, #12]
 8005b18:	4641      	mov	r1, r8
 8005b1a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	60c3      	str	r3, [r0, #12]
 8005b20:	f7ff fa0e 	bl	8004f40 <__mcmp>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	da45      	bge.n	8005bb4 <_strtod_l+0x864>
 8005b28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b2a:	ea53 030a 	orrs.w	r3, r3, sl
 8005b2e:	d16b      	bne.n	8005c08 <_strtod_l+0x8b8>
 8005b30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d167      	bne.n	8005c08 <_strtod_l+0x8b8>
 8005b38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b3c:	0d1b      	lsrs	r3, r3, #20
 8005b3e:	051b      	lsls	r3, r3, #20
 8005b40:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005b44:	d960      	bls.n	8005c08 <_strtod_l+0x8b8>
 8005b46:	6963      	ldr	r3, [r4, #20]
 8005b48:	b913      	cbnz	r3, 8005b50 <_strtod_l+0x800>
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	dd5b      	ble.n	8005c08 <_strtod_l+0x8b8>
 8005b50:	4621      	mov	r1, r4
 8005b52:	2201      	movs	r2, #1
 8005b54:	9805      	ldr	r0, [sp, #20]
 8005b56:	f7ff f987 	bl	8004e68 <__lshift>
 8005b5a:	4641      	mov	r1, r8
 8005b5c:	4604      	mov	r4, r0
 8005b5e:	f7ff f9ef 	bl	8004f40 <__mcmp>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	dd50      	ble.n	8005c08 <_strtod_l+0x8b8>
 8005b66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b6a:	9a08      	ldr	r2, [sp, #32]
 8005b6c:	0d1b      	lsrs	r3, r3, #20
 8005b6e:	051b      	lsls	r3, r3, #20
 8005b70:	2a00      	cmp	r2, #0
 8005b72:	d06a      	beq.n	8005c4a <_strtod_l+0x8fa>
 8005b74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005b78:	d867      	bhi.n	8005c4a <_strtod_l+0x8fa>
 8005b7a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005b7e:	f67f ae98 	bls.w	80058b2 <_strtod_l+0x562>
 8005b82:	4650      	mov	r0, sl
 8005b84:	4659      	mov	r1, fp
 8005b86:	4b09      	ldr	r3, [pc, #36]	@ (8005bac <_strtod_l+0x85c>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f7fa fca5 	bl	80004d8 <__aeabi_dmul>
 8005b8e:	4b08      	ldr	r3, [pc, #32]	@ (8005bb0 <_strtod_l+0x860>)
 8005b90:	4682      	mov	sl, r0
 8005b92:	400b      	ands	r3, r1
 8005b94:	468b      	mov	fp, r1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f47f ae00 	bne.w	800579c <_strtod_l+0x44c>
 8005b9c:	2322      	movs	r3, #34	@ 0x22
 8005b9e:	9a05      	ldr	r2, [sp, #20]
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e5fb      	b.n	800579c <_strtod_l+0x44c>
 8005ba4:	08007418 	.word	0x08007418
 8005ba8:	fffffc02 	.word	0xfffffc02
 8005bac:	39500000 	.word	0x39500000
 8005bb0:	7ff00000 	.word	0x7ff00000
 8005bb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005bb8:	d165      	bne.n	8005c86 <_strtod_l+0x936>
 8005bba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005bbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bc0:	b35a      	cbz	r2, 8005c1a <_strtod_l+0x8ca>
 8005bc2:	4a99      	ldr	r2, [pc, #612]	@ (8005e28 <_strtod_l+0xad8>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d12b      	bne.n	8005c20 <_strtod_l+0x8d0>
 8005bc8:	9b08      	ldr	r3, [sp, #32]
 8005bca:	4651      	mov	r1, sl
 8005bcc:	b303      	cbz	r3, 8005c10 <_strtod_l+0x8c0>
 8005bce:	465a      	mov	r2, fp
 8005bd0:	4b96      	ldr	r3, [pc, #600]	@ (8005e2c <_strtod_l+0xadc>)
 8005bd2:	4013      	ands	r3, r2
 8005bd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005bd8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bdc:	d81b      	bhi.n	8005c16 <_strtod_l+0x8c6>
 8005bde:	0d1b      	lsrs	r3, r3, #20
 8005be0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005be4:	fa02 f303 	lsl.w	r3, r2, r3
 8005be8:	4299      	cmp	r1, r3
 8005bea:	d119      	bne.n	8005c20 <_strtod_l+0x8d0>
 8005bec:	4b90      	ldr	r3, [pc, #576]	@ (8005e30 <_strtod_l+0xae0>)
 8005bee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d102      	bne.n	8005bfa <_strtod_l+0x8aa>
 8005bf4:	3101      	adds	r1, #1
 8005bf6:	f43f adc6 	beq.w	8005786 <_strtod_l+0x436>
 8005bfa:	f04f 0a00 	mov.w	sl, #0
 8005bfe:	4b8b      	ldr	r3, [pc, #556]	@ (8005e2c <_strtod_l+0xadc>)
 8005c00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c02:	401a      	ands	r2, r3
 8005c04:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005c08:	9b08      	ldr	r3, [sp, #32]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1b9      	bne.n	8005b82 <_strtod_l+0x832>
 8005c0e:	e5c5      	b.n	800579c <_strtod_l+0x44c>
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005c14:	e7e8      	b.n	8005be8 <_strtod_l+0x898>
 8005c16:	4613      	mov	r3, r2
 8005c18:	e7e6      	b.n	8005be8 <_strtod_l+0x898>
 8005c1a:	ea53 030a 	orrs.w	r3, r3, sl
 8005c1e:	d0a2      	beq.n	8005b66 <_strtod_l+0x816>
 8005c20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c22:	b1db      	cbz	r3, 8005c5c <_strtod_l+0x90c>
 8005c24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c26:	4213      	tst	r3, r2
 8005c28:	d0ee      	beq.n	8005c08 <_strtod_l+0x8b8>
 8005c2a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c2c:	4650      	mov	r0, sl
 8005c2e:	4659      	mov	r1, fp
 8005c30:	9a08      	ldr	r2, [sp, #32]
 8005c32:	b1bb      	cbz	r3, 8005c64 <_strtod_l+0x914>
 8005c34:	f7ff fb68 	bl	8005308 <sulp>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c40:	f7fa fa94 	bl	800016c <__adddf3>
 8005c44:	4682      	mov	sl, r0
 8005c46:	468b      	mov	fp, r1
 8005c48:	e7de      	b.n	8005c08 <_strtod_l+0x8b8>
 8005c4a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005c4e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005c52:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005c56:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005c5a:	e7d5      	b.n	8005c08 <_strtod_l+0x8b8>
 8005c5c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005c5e:	ea13 0f0a 	tst.w	r3, sl
 8005c62:	e7e1      	b.n	8005c28 <_strtod_l+0x8d8>
 8005c64:	f7ff fb50 	bl	8005308 <sulp>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005c70:	f7fa fa7a 	bl	8000168 <__aeabi_dsub>
 8005c74:	2200      	movs	r2, #0
 8005c76:	2300      	movs	r3, #0
 8005c78:	4682      	mov	sl, r0
 8005c7a:	468b      	mov	fp, r1
 8005c7c:	f7fa fe94 	bl	80009a8 <__aeabi_dcmpeq>
 8005c80:	2800      	cmp	r0, #0
 8005c82:	d0c1      	beq.n	8005c08 <_strtod_l+0x8b8>
 8005c84:	e615      	b.n	80058b2 <_strtod_l+0x562>
 8005c86:	4641      	mov	r1, r8
 8005c88:	4620      	mov	r0, r4
 8005c8a:	f7ff fac9 	bl	8005220 <__ratio>
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005c94:	4606      	mov	r6, r0
 8005c96:	460f      	mov	r7, r1
 8005c98:	f7fa fe9a 	bl	80009d0 <__aeabi_dcmple>
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d06d      	beq.n	8005d7c <_strtod_l+0xa2c>
 8005ca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d178      	bne.n	8005d98 <_strtod_l+0xa48>
 8005ca6:	f1ba 0f00 	cmp.w	sl, #0
 8005caa:	d156      	bne.n	8005d5a <_strtod_l+0xa0a>
 8005cac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d158      	bne.n	8005d68 <_strtod_l+0xa18>
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	4630      	mov	r0, r6
 8005cba:	4639      	mov	r1, r7
 8005cbc:	4b5d      	ldr	r3, [pc, #372]	@ (8005e34 <_strtod_l+0xae4>)
 8005cbe:	f7fa fe7d 	bl	80009bc <__aeabi_dcmplt>
 8005cc2:	2800      	cmp	r0, #0
 8005cc4:	d157      	bne.n	8005d76 <_strtod_l+0xa26>
 8005cc6:	4630      	mov	r0, r6
 8005cc8:	4639      	mov	r1, r7
 8005cca:	2200      	movs	r2, #0
 8005ccc:	4b5a      	ldr	r3, [pc, #360]	@ (8005e38 <_strtod_l+0xae8>)
 8005cce:	f7fa fc03 	bl	80004d8 <__aeabi_dmul>
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460f      	mov	r7, r1
 8005cd6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005cda:	9606      	str	r6, [sp, #24]
 8005cdc:	9307      	str	r3, [sp, #28]
 8005cde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ce2:	4d52      	ldr	r5, [pc, #328]	@ (8005e2c <_strtod_l+0xadc>)
 8005ce4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005ce8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cea:	401d      	ands	r5, r3
 8005cec:	4b53      	ldr	r3, [pc, #332]	@ (8005e3c <_strtod_l+0xaec>)
 8005cee:	429d      	cmp	r5, r3
 8005cf0:	f040 80aa 	bne.w	8005e48 <_strtod_l+0xaf8>
 8005cf4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005cf6:	4650      	mov	r0, sl
 8005cf8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005cfc:	4659      	mov	r1, fp
 8005cfe:	f7ff f9cf 	bl	80050a0 <__ulp>
 8005d02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d06:	f7fa fbe7 	bl	80004d8 <__aeabi_dmul>
 8005d0a:	4652      	mov	r2, sl
 8005d0c:	465b      	mov	r3, fp
 8005d0e:	f7fa fa2d 	bl	800016c <__adddf3>
 8005d12:	460b      	mov	r3, r1
 8005d14:	4945      	ldr	r1, [pc, #276]	@ (8005e2c <_strtod_l+0xadc>)
 8005d16:	4a4a      	ldr	r2, [pc, #296]	@ (8005e40 <_strtod_l+0xaf0>)
 8005d18:	4019      	ands	r1, r3
 8005d1a:	4291      	cmp	r1, r2
 8005d1c:	4682      	mov	sl, r0
 8005d1e:	d942      	bls.n	8005da6 <_strtod_l+0xa56>
 8005d20:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005d22:	4b43      	ldr	r3, [pc, #268]	@ (8005e30 <_strtod_l+0xae0>)
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d103      	bne.n	8005d30 <_strtod_l+0x9e0>
 8005d28:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	f43f ad2b 	beq.w	8005786 <_strtod_l+0x436>
 8005d30:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005d34:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005e30 <_strtod_l+0xae0>
 8005d38:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005d3a:	9805      	ldr	r0, [sp, #20]
 8005d3c:	f7fe fe7e 	bl	8004a3c <_Bfree>
 8005d40:	4649      	mov	r1, r9
 8005d42:	9805      	ldr	r0, [sp, #20]
 8005d44:	f7fe fe7a 	bl	8004a3c <_Bfree>
 8005d48:	4641      	mov	r1, r8
 8005d4a:	9805      	ldr	r0, [sp, #20]
 8005d4c:	f7fe fe76 	bl	8004a3c <_Bfree>
 8005d50:	4621      	mov	r1, r4
 8005d52:	9805      	ldr	r0, [sp, #20]
 8005d54:	f7fe fe72 	bl	8004a3c <_Bfree>
 8005d58:	e618      	b.n	800598c <_strtod_l+0x63c>
 8005d5a:	f1ba 0f01 	cmp.w	sl, #1
 8005d5e:	d103      	bne.n	8005d68 <_strtod_l+0xa18>
 8005d60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	f43f ada5 	beq.w	80058b2 <_strtod_l+0x562>
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4b36      	ldr	r3, [pc, #216]	@ (8005e44 <_strtod_l+0xaf4>)
 8005d6c:	2600      	movs	r6, #0
 8005d6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d72:	4f30      	ldr	r7, [pc, #192]	@ (8005e34 <_strtod_l+0xae4>)
 8005d74:	e7b3      	b.n	8005cde <_strtod_l+0x98e>
 8005d76:	2600      	movs	r6, #0
 8005d78:	4f2f      	ldr	r7, [pc, #188]	@ (8005e38 <_strtod_l+0xae8>)
 8005d7a:	e7ac      	b.n	8005cd6 <_strtod_l+0x986>
 8005d7c:	4630      	mov	r0, r6
 8005d7e:	4639      	mov	r1, r7
 8005d80:	4b2d      	ldr	r3, [pc, #180]	@ (8005e38 <_strtod_l+0xae8>)
 8005d82:	2200      	movs	r2, #0
 8005d84:	f7fa fba8 	bl	80004d8 <__aeabi_dmul>
 8005d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	460f      	mov	r7, r1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0a1      	beq.n	8005cd6 <_strtod_l+0x986>
 8005d92:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005d96:	e7a2      	b.n	8005cde <_strtod_l+0x98e>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4b26      	ldr	r3, [pc, #152]	@ (8005e34 <_strtod_l+0xae4>)
 8005d9c:	4616      	mov	r6, r2
 8005d9e:	461f      	mov	r7, r3
 8005da0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005da4:	e79b      	b.n	8005cde <_strtod_l+0x98e>
 8005da6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005daa:	9b08      	ldr	r3, [sp, #32]
 8005dac:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1c1      	bne.n	8005d38 <_strtod_l+0x9e8>
 8005db4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005db8:	0d1b      	lsrs	r3, r3, #20
 8005dba:	051b      	lsls	r3, r3, #20
 8005dbc:	429d      	cmp	r5, r3
 8005dbe:	d1bb      	bne.n	8005d38 <_strtod_l+0x9e8>
 8005dc0:	4630      	mov	r0, r6
 8005dc2:	4639      	mov	r1, r7
 8005dc4:	f7fb f92e 	bl	8001024 <__aeabi_d2lz>
 8005dc8:	f7fa fb58 	bl	800047c <__aeabi_l2d>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	460b      	mov	r3, r1
 8005dd0:	4630      	mov	r0, r6
 8005dd2:	4639      	mov	r1, r7
 8005dd4:	f7fa f9c8 	bl	8000168 <__aeabi_dsub>
 8005dd8:	460b      	mov	r3, r1
 8005dda:	4602      	mov	r2, r0
 8005ddc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005de0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005de6:	ea46 060a 	orr.w	r6, r6, sl
 8005dea:	431e      	orrs	r6, r3
 8005dec:	d069      	beq.n	8005ec2 <_strtod_l+0xb72>
 8005dee:	a30a      	add	r3, pc, #40	@ (adr r3, 8005e18 <_strtod_l+0xac8>)
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	f7fa fde2 	bl	80009bc <__aeabi_dcmplt>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	f47f accf 	bne.w	800579c <_strtod_l+0x44c>
 8005dfe:	a308      	add	r3, pc, #32	@ (adr r3, 8005e20 <_strtod_l+0xad0>)
 8005e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e04:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e08:	f7fa fdf6 	bl	80009f8 <__aeabi_dcmpgt>
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d093      	beq.n	8005d38 <_strtod_l+0x9e8>
 8005e10:	e4c4      	b.n	800579c <_strtod_l+0x44c>
 8005e12:	bf00      	nop
 8005e14:	f3af 8000 	nop.w
 8005e18:	94a03595 	.word	0x94a03595
 8005e1c:	3fdfffff 	.word	0x3fdfffff
 8005e20:	35afe535 	.word	0x35afe535
 8005e24:	3fe00000 	.word	0x3fe00000
 8005e28:	000fffff 	.word	0x000fffff
 8005e2c:	7ff00000 	.word	0x7ff00000
 8005e30:	7fefffff 	.word	0x7fefffff
 8005e34:	3ff00000 	.word	0x3ff00000
 8005e38:	3fe00000 	.word	0x3fe00000
 8005e3c:	7fe00000 	.word	0x7fe00000
 8005e40:	7c9fffff 	.word	0x7c9fffff
 8005e44:	bff00000 	.word	0xbff00000
 8005e48:	9b08      	ldr	r3, [sp, #32]
 8005e4a:	b323      	cbz	r3, 8005e96 <_strtod_l+0xb46>
 8005e4c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005e50:	d821      	bhi.n	8005e96 <_strtod_l+0xb46>
 8005e52:	a327      	add	r3, pc, #156	@ (adr r3, 8005ef0 <_strtod_l+0xba0>)
 8005e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e58:	4630      	mov	r0, r6
 8005e5a:	4639      	mov	r1, r7
 8005e5c:	f7fa fdb8 	bl	80009d0 <__aeabi_dcmple>
 8005e60:	b1a0      	cbz	r0, 8005e8c <_strtod_l+0xb3c>
 8005e62:	4639      	mov	r1, r7
 8005e64:	4630      	mov	r0, r6
 8005e66:	f7fa fe0f 	bl	8000a88 <__aeabi_d2uiz>
 8005e6a:	2801      	cmp	r0, #1
 8005e6c:	bf38      	it	cc
 8005e6e:	2001      	movcc	r0, #1
 8005e70:	f7fa fab8 	bl	80003e4 <__aeabi_ui2d>
 8005e74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e76:	4606      	mov	r6, r0
 8005e78:	460f      	mov	r7, r1
 8005e7a:	b9fb      	cbnz	r3, 8005ebc <_strtod_l+0xb6c>
 8005e7c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005e80:	9014      	str	r0, [sp, #80]	@ 0x50
 8005e82:	9315      	str	r3, [sp, #84]	@ 0x54
 8005e84:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005e88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005e8c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005e8e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005e92:	1b5b      	subs	r3, r3, r5
 8005e94:	9311      	str	r3, [sp, #68]	@ 0x44
 8005e96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e9a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005e9e:	f7ff f8ff 	bl	80050a0 <__ulp>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4650      	mov	r0, sl
 8005ea8:	4659      	mov	r1, fp
 8005eaa:	f7fa fb15 	bl	80004d8 <__aeabi_dmul>
 8005eae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005eb2:	f7fa f95b 	bl	800016c <__adddf3>
 8005eb6:	4682      	mov	sl, r0
 8005eb8:	468b      	mov	fp, r1
 8005eba:	e776      	b.n	8005daa <_strtod_l+0xa5a>
 8005ebc:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005ec0:	e7e0      	b.n	8005e84 <_strtod_l+0xb34>
 8005ec2:	a30d      	add	r3, pc, #52	@ (adr r3, 8005ef8 <_strtod_l+0xba8>)
 8005ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec8:	f7fa fd78 	bl	80009bc <__aeabi_dcmplt>
 8005ecc:	e79e      	b.n	8005e0c <_strtod_l+0xabc>
 8005ece:	2300      	movs	r3, #0
 8005ed0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005ed2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005ed4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005ed6:	6013      	str	r3, [r2, #0]
 8005ed8:	f7ff ba77 	b.w	80053ca <_strtod_l+0x7a>
 8005edc:	2a65      	cmp	r2, #101	@ 0x65
 8005ede:	f43f ab6e 	beq.w	80055be <_strtod_l+0x26e>
 8005ee2:	2a45      	cmp	r2, #69	@ 0x45
 8005ee4:	f43f ab6b 	beq.w	80055be <_strtod_l+0x26e>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	f7ff bba6 	b.w	800563a <_strtod_l+0x2ea>
 8005eee:	bf00      	nop
 8005ef0:	ffc00000 	.word	0xffc00000
 8005ef4:	41dfffff 	.word	0x41dfffff
 8005ef8:	94a03595 	.word	0x94a03595
 8005efc:	3fcfffff 	.word	0x3fcfffff

08005f00 <_strtod_r>:
 8005f00:	4b01      	ldr	r3, [pc, #4]	@ (8005f08 <_strtod_r+0x8>)
 8005f02:	f7ff ba25 	b.w	8005350 <_strtod_l>
 8005f06:	bf00      	nop
 8005f08:	20000068 	.word	0x20000068

08005f0c <_strtol_l.constprop.0>:
 8005f0c:	2b24      	cmp	r3, #36	@ 0x24
 8005f0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f12:	4686      	mov	lr, r0
 8005f14:	4690      	mov	r8, r2
 8005f16:	d801      	bhi.n	8005f1c <_strtol_l.constprop.0+0x10>
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d106      	bne.n	8005f2a <_strtol_l.constprop.0+0x1e>
 8005f1c:	f7fd fdc0 	bl	8003aa0 <__errno>
 8005f20:	2316      	movs	r3, #22
 8005f22:	6003      	str	r3, [r0, #0]
 8005f24:	2000      	movs	r0, #0
 8005f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f2a:	460d      	mov	r5, r1
 8005f2c:	4833      	ldr	r0, [pc, #204]	@ (8005ffc <_strtol_l.constprop.0+0xf0>)
 8005f2e:	462a      	mov	r2, r5
 8005f30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f34:	5d06      	ldrb	r6, [r0, r4]
 8005f36:	f016 0608 	ands.w	r6, r6, #8
 8005f3a:	d1f8      	bne.n	8005f2e <_strtol_l.constprop.0+0x22>
 8005f3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8005f3e:	d12d      	bne.n	8005f9c <_strtol_l.constprop.0+0x90>
 8005f40:	2601      	movs	r6, #1
 8005f42:	782c      	ldrb	r4, [r5, #0]
 8005f44:	1c95      	adds	r5, r2, #2
 8005f46:	f033 0210 	bics.w	r2, r3, #16
 8005f4a:	d109      	bne.n	8005f60 <_strtol_l.constprop.0+0x54>
 8005f4c:	2c30      	cmp	r4, #48	@ 0x30
 8005f4e:	d12a      	bne.n	8005fa6 <_strtol_l.constprop.0+0x9a>
 8005f50:	782a      	ldrb	r2, [r5, #0]
 8005f52:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005f56:	2a58      	cmp	r2, #88	@ 0x58
 8005f58:	d125      	bne.n	8005fa6 <_strtol_l.constprop.0+0x9a>
 8005f5a:	2310      	movs	r3, #16
 8005f5c:	786c      	ldrb	r4, [r5, #1]
 8005f5e:	3502      	adds	r5, #2
 8005f60:	2200      	movs	r2, #0
 8005f62:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005f66:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005f6a:	fbbc f9f3 	udiv	r9, ip, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	fb03 ca19 	mls	sl, r3, r9, ip
 8005f74:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005f78:	2f09      	cmp	r7, #9
 8005f7a:	d81b      	bhi.n	8005fb4 <_strtol_l.constprop.0+0xa8>
 8005f7c:	463c      	mov	r4, r7
 8005f7e:	42a3      	cmp	r3, r4
 8005f80:	dd27      	ble.n	8005fd2 <_strtol_l.constprop.0+0xc6>
 8005f82:	1c57      	adds	r7, r2, #1
 8005f84:	d007      	beq.n	8005f96 <_strtol_l.constprop.0+0x8a>
 8005f86:	4581      	cmp	r9, r0
 8005f88:	d320      	bcc.n	8005fcc <_strtol_l.constprop.0+0xc0>
 8005f8a:	d101      	bne.n	8005f90 <_strtol_l.constprop.0+0x84>
 8005f8c:	45a2      	cmp	sl, r4
 8005f8e:	db1d      	blt.n	8005fcc <_strtol_l.constprop.0+0xc0>
 8005f90:	2201      	movs	r2, #1
 8005f92:	fb00 4003 	mla	r0, r0, r3, r4
 8005f96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f9a:	e7eb      	b.n	8005f74 <_strtol_l.constprop.0+0x68>
 8005f9c:	2c2b      	cmp	r4, #43	@ 0x2b
 8005f9e:	bf04      	itt	eq
 8005fa0:	782c      	ldrbeq	r4, [r5, #0]
 8005fa2:	1c95      	addeq	r5, r2, #2
 8005fa4:	e7cf      	b.n	8005f46 <_strtol_l.constprop.0+0x3a>
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1da      	bne.n	8005f60 <_strtol_l.constprop.0+0x54>
 8005faa:	2c30      	cmp	r4, #48	@ 0x30
 8005fac:	bf0c      	ite	eq
 8005fae:	2308      	moveq	r3, #8
 8005fb0:	230a      	movne	r3, #10
 8005fb2:	e7d5      	b.n	8005f60 <_strtol_l.constprop.0+0x54>
 8005fb4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005fb8:	2f19      	cmp	r7, #25
 8005fba:	d801      	bhi.n	8005fc0 <_strtol_l.constprop.0+0xb4>
 8005fbc:	3c37      	subs	r4, #55	@ 0x37
 8005fbe:	e7de      	b.n	8005f7e <_strtol_l.constprop.0+0x72>
 8005fc0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005fc4:	2f19      	cmp	r7, #25
 8005fc6:	d804      	bhi.n	8005fd2 <_strtol_l.constprop.0+0xc6>
 8005fc8:	3c57      	subs	r4, #87	@ 0x57
 8005fca:	e7d8      	b.n	8005f7e <_strtol_l.constprop.0+0x72>
 8005fcc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fd0:	e7e1      	b.n	8005f96 <_strtol_l.constprop.0+0x8a>
 8005fd2:	1c53      	adds	r3, r2, #1
 8005fd4:	d108      	bne.n	8005fe8 <_strtol_l.constprop.0+0xdc>
 8005fd6:	2322      	movs	r3, #34	@ 0x22
 8005fd8:	4660      	mov	r0, ip
 8005fda:	f8ce 3000 	str.w	r3, [lr]
 8005fde:	f1b8 0f00 	cmp.w	r8, #0
 8005fe2:	d0a0      	beq.n	8005f26 <_strtol_l.constprop.0+0x1a>
 8005fe4:	1e69      	subs	r1, r5, #1
 8005fe6:	e006      	b.n	8005ff6 <_strtol_l.constprop.0+0xea>
 8005fe8:	b106      	cbz	r6, 8005fec <_strtol_l.constprop.0+0xe0>
 8005fea:	4240      	negs	r0, r0
 8005fec:	f1b8 0f00 	cmp.w	r8, #0
 8005ff0:	d099      	beq.n	8005f26 <_strtol_l.constprop.0+0x1a>
 8005ff2:	2a00      	cmp	r2, #0
 8005ff4:	d1f6      	bne.n	8005fe4 <_strtol_l.constprop.0+0xd8>
 8005ff6:	f8c8 1000 	str.w	r1, [r8]
 8005ffa:	e794      	b.n	8005f26 <_strtol_l.constprop.0+0x1a>
 8005ffc:	08007441 	.word	0x08007441

08006000 <_strtol_r>:
 8006000:	f7ff bf84 	b.w	8005f0c <_strtol_l.constprop.0>

08006004 <__ssputs_r>:
 8006004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006008:	461f      	mov	r7, r3
 800600a:	688e      	ldr	r6, [r1, #8]
 800600c:	4682      	mov	sl, r0
 800600e:	42be      	cmp	r6, r7
 8006010:	460c      	mov	r4, r1
 8006012:	4690      	mov	r8, r2
 8006014:	680b      	ldr	r3, [r1, #0]
 8006016:	d82d      	bhi.n	8006074 <__ssputs_r+0x70>
 8006018:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800601c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006020:	d026      	beq.n	8006070 <__ssputs_r+0x6c>
 8006022:	6965      	ldr	r5, [r4, #20]
 8006024:	6909      	ldr	r1, [r1, #16]
 8006026:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800602a:	eba3 0901 	sub.w	r9, r3, r1
 800602e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006032:	1c7b      	adds	r3, r7, #1
 8006034:	444b      	add	r3, r9
 8006036:	106d      	asrs	r5, r5, #1
 8006038:	429d      	cmp	r5, r3
 800603a:	bf38      	it	cc
 800603c:	461d      	movcc	r5, r3
 800603e:	0553      	lsls	r3, r2, #21
 8006040:	d527      	bpl.n	8006092 <__ssputs_r+0x8e>
 8006042:	4629      	mov	r1, r5
 8006044:	f7fe fc2e 	bl	80048a4 <_malloc_r>
 8006048:	4606      	mov	r6, r0
 800604a:	b360      	cbz	r0, 80060a6 <__ssputs_r+0xa2>
 800604c:	464a      	mov	r2, r9
 800604e:	6921      	ldr	r1, [r4, #16]
 8006050:	f000 fa14 	bl	800647c <memcpy>
 8006054:	89a3      	ldrh	r3, [r4, #12]
 8006056:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800605a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800605e:	81a3      	strh	r3, [r4, #12]
 8006060:	6126      	str	r6, [r4, #16]
 8006062:	444e      	add	r6, r9
 8006064:	6026      	str	r6, [r4, #0]
 8006066:	463e      	mov	r6, r7
 8006068:	6165      	str	r5, [r4, #20]
 800606a:	eba5 0509 	sub.w	r5, r5, r9
 800606e:	60a5      	str	r5, [r4, #8]
 8006070:	42be      	cmp	r6, r7
 8006072:	d900      	bls.n	8006076 <__ssputs_r+0x72>
 8006074:	463e      	mov	r6, r7
 8006076:	4632      	mov	r2, r6
 8006078:	4641      	mov	r1, r8
 800607a:	6820      	ldr	r0, [r4, #0]
 800607c:	f000 f9c2 	bl	8006404 <memmove>
 8006080:	2000      	movs	r0, #0
 8006082:	68a3      	ldr	r3, [r4, #8]
 8006084:	1b9b      	subs	r3, r3, r6
 8006086:	60a3      	str	r3, [r4, #8]
 8006088:	6823      	ldr	r3, [r4, #0]
 800608a:	4433      	add	r3, r6
 800608c:	6023      	str	r3, [r4, #0]
 800608e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006092:	462a      	mov	r2, r5
 8006094:	f000 fd83 	bl	8006b9e <_realloc_r>
 8006098:	4606      	mov	r6, r0
 800609a:	2800      	cmp	r0, #0
 800609c:	d1e0      	bne.n	8006060 <__ssputs_r+0x5c>
 800609e:	4650      	mov	r0, sl
 80060a0:	6921      	ldr	r1, [r4, #16]
 80060a2:	f7fe fb8d 	bl	80047c0 <_free_r>
 80060a6:	230c      	movs	r3, #12
 80060a8:	f8ca 3000 	str.w	r3, [sl]
 80060ac:	89a3      	ldrh	r3, [r4, #12]
 80060ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80060b6:	81a3      	strh	r3, [r4, #12]
 80060b8:	e7e9      	b.n	800608e <__ssputs_r+0x8a>
	...

080060bc <_svfiprintf_r>:
 80060bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c0:	4698      	mov	r8, r3
 80060c2:	898b      	ldrh	r3, [r1, #12]
 80060c4:	4607      	mov	r7, r0
 80060c6:	061b      	lsls	r3, r3, #24
 80060c8:	460d      	mov	r5, r1
 80060ca:	4614      	mov	r4, r2
 80060cc:	b09d      	sub	sp, #116	@ 0x74
 80060ce:	d510      	bpl.n	80060f2 <_svfiprintf_r+0x36>
 80060d0:	690b      	ldr	r3, [r1, #16]
 80060d2:	b973      	cbnz	r3, 80060f2 <_svfiprintf_r+0x36>
 80060d4:	2140      	movs	r1, #64	@ 0x40
 80060d6:	f7fe fbe5 	bl	80048a4 <_malloc_r>
 80060da:	6028      	str	r0, [r5, #0]
 80060dc:	6128      	str	r0, [r5, #16]
 80060de:	b930      	cbnz	r0, 80060ee <_svfiprintf_r+0x32>
 80060e0:	230c      	movs	r3, #12
 80060e2:	603b      	str	r3, [r7, #0]
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060e8:	b01d      	add	sp, #116	@ 0x74
 80060ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ee:	2340      	movs	r3, #64	@ 0x40
 80060f0:	616b      	str	r3, [r5, #20]
 80060f2:	2300      	movs	r3, #0
 80060f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060f6:	2320      	movs	r3, #32
 80060f8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060fc:	2330      	movs	r3, #48	@ 0x30
 80060fe:	f04f 0901 	mov.w	r9, #1
 8006102:	f8cd 800c 	str.w	r8, [sp, #12]
 8006106:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80062a0 <_svfiprintf_r+0x1e4>
 800610a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800610e:	4623      	mov	r3, r4
 8006110:	469a      	mov	sl, r3
 8006112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006116:	b10a      	cbz	r2, 800611c <_svfiprintf_r+0x60>
 8006118:	2a25      	cmp	r2, #37	@ 0x25
 800611a:	d1f9      	bne.n	8006110 <_svfiprintf_r+0x54>
 800611c:	ebba 0b04 	subs.w	fp, sl, r4
 8006120:	d00b      	beq.n	800613a <_svfiprintf_r+0x7e>
 8006122:	465b      	mov	r3, fp
 8006124:	4622      	mov	r2, r4
 8006126:	4629      	mov	r1, r5
 8006128:	4638      	mov	r0, r7
 800612a:	f7ff ff6b 	bl	8006004 <__ssputs_r>
 800612e:	3001      	adds	r0, #1
 8006130:	f000 80a7 	beq.w	8006282 <_svfiprintf_r+0x1c6>
 8006134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006136:	445a      	add	r2, fp
 8006138:	9209      	str	r2, [sp, #36]	@ 0x24
 800613a:	f89a 3000 	ldrb.w	r3, [sl]
 800613e:	2b00      	cmp	r3, #0
 8006140:	f000 809f 	beq.w	8006282 <_svfiprintf_r+0x1c6>
 8006144:	2300      	movs	r3, #0
 8006146:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800614a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800614e:	f10a 0a01 	add.w	sl, sl, #1
 8006152:	9304      	str	r3, [sp, #16]
 8006154:	9307      	str	r3, [sp, #28]
 8006156:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800615a:	931a      	str	r3, [sp, #104]	@ 0x68
 800615c:	4654      	mov	r4, sl
 800615e:	2205      	movs	r2, #5
 8006160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006164:	484e      	ldr	r0, [pc, #312]	@ (80062a0 <_svfiprintf_r+0x1e4>)
 8006166:	f7fd fcc8 	bl	8003afa <memchr>
 800616a:	9a04      	ldr	r2, [sp, #16]
 800616c:	b9d8      	cbnz	r0, 80061a6 <_svfiprintf_r+0xea>
 800616e:	06d0      	lsls	r0, r2, #27
 8006170:	bf44      	itt	mi
 8006172:	2320      	movmi	r3, #32
 8006174:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006178:	0711      	lsls	r1, r2, #28
 800617a:	bf44      	itt	mi
 800617c:	232b      	movmi	r3, #43	@ 0x2b
 800617e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006182:	f89a 3000 	ldrb.w	r3, [sl]
 8006186:	2b2a      	cmp	r3, #42	@ 0x2a
 8006188:	d015      	beq.n	80061b6 <_svfiprintf_r+0xfa>
 800618a:	4654      	mov	r4, sl
 800618c:	2000      	movs	r0, #0
 800618e:	f04f 0c0a 	mov.w	ip, #10
 8006192:	9a07      	ldr	r2, [sp, #28]
 8006194:	4621      	mov	r1, r4
 8006196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800619a:	3b30      	subs	r3, #48	@ 0x30
 800619c:	2b09      	cmp	r3, #9
 800619e:	d94b      	bls.n	8006238 <_svfiprintf_r+0x17c>
 80061a0:	b1b0      	cbz	r0, 80061d0 <_svfiprintf_r+0x114>
 80061a2:	9207      	str	r2, [sp, #28]
 80061a4:	e014      	b.n	80061d0 <_svfiprintf_r+0x114>
 80061a6:	eba0 0308 	sub.w	r3, r0, r8
 80061aa:	fa09 f303 	lsl.w	r3, r9, r3
 80061ae:	4313      	orrs	r3, r2
 80061b0:	46a2      	mov	sl, r4
 80061b2:	9304      	str	r3, [sp, #16]
 80061b4:	e7d2      	b.n	800615c <_svfiprintf_r+0xa0>
 80061b6:	9b03      	ldr	r3, [sp, #12]
 80061b8:	1d19      	adds	r1, r3, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	9103      	str	r1, [sp, #12]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bfbb      	ittet	lt
 80061c2:	425b      	neglt	r3, r3
 80061c4:	f042 0202 	orrlt.w	r2, r2, #2
 80061c8:	9307      	strge	r3, [sp, #28]
 80061ca:	9307      	strlt	r3, [sp, #28]
 80061cc:	bfb8      	it	lt
 80061ce:	9204      	strlt	r2, [sp, #16]
 80061d0:	7823      	ldrb	r3, [r4, #0]
 80061d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80061d4:	d10a      	bne.n	80061ec <_svfiprintf_r+0x130>
 80061d6:	7863      	ldrb	r3, [r4, #1]
 80061d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80061da:	d132      	bne.n	8006242 <_svfiprintf_r+0x186>
 80061dc:	9b03      	ldr	r3, [sp, #12]
 80061de:	3402      	adds	r4, #2
 80061e0:	1d1a      	adds	r2, r3, #4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	9203      	str	r2, [sp, #12]
 80061e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061ea:	9305      	str	r3, [sp, #20]
 80061ec:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80062a4 <_svfiprintf_r+0x1e8>
 80061f0:	2203      	movs	r2, #3
 80061f2:	4650      	mov	r0, sl
 80061f4:	7821      	ldrb	r1, [r4, #0]
 80061f6:	f7fd fc80 	bl	8003afa <memchr>
 80061fa:	b138      	cbz	r0, 800620c <_svfiprintf_r+0x150>
 80061fc:	2240      	movs	r2, #64	@ 0x40
 80061fe:	9b04      	ldr	r3, [sp, #16]
 8006200:	eba0 000a 	sub.w	r0, r0, sl
 8006204:	4082      	lsls	r2, r0
 8006206:	4313      	orrs	r3, r2
 8006208:	3401      	adds	r4, #1
 800620a:	9304      	str	r3, [sp, #16]
 800620c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006210:	2206      	movs	r2, #6
 8006212:	4825      	ldr	r0, [pc, #148]	@ (80062a8 <_svfiprintf_r+0x1ec>)
 8006214:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006218:	f7fd fc6f 	bl	8003afa <memchr>
 800621c:	2800      	cmp	r0, #0
 800621e:	d036      	beq.n	800628e <_svfiprintf_r+0x1d2>
 8006220:	4b22      	ldr	r3, [pc, #136]	@ (80062ac <_svfiprintf_r+0x1f0>)
 8006222:	bb1b      	cbnz	r3, 800626c <_svfiprintf_r+0x1b0>
 8006224:	9b03      	ldr	r3, [sp, #12]
 8006226:	3307      	adds	r3, #7
 8006228:	f023 0307 	bic.w	r3, r3, #7
 800622c:	3308      	adds	r3, #8
 800622e:	9303      	str	r3, [sp, #12]
 8006230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006232:	4433      	add	r3, r6
 8006234:	9309      	str	r3, [sp, #36]	@ 0x24
 8006236:	e76a      	b.n	800610e <_svfiprintf_r+0x52>
 8006238:	460c      	mov	r4, r1
 800623a:	2001      	movs	r0, #1
 800623c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006240:	e7a8      	b.n	8006194 <_svfiprintf_r+0xd8>
 8006242:	2300      	movs	r3, #0
 8006244:	f04f 0c0a 	mov.w	ip, #10
 8006248:	4619      	mov	r1, r3
 800624a:	3401      	adds	r4, #1
 800624c:	9305      	str	r3, [sp, #20]
 800624e:	4620      	mov	r0, r4
 8006250:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006254:	3a30      	subs	r2, #48	@ 0x30
 8006256:	2a09      	cmp	r2, #9
 8006258:	d903      	bls.n	8006262 <_svfiprintf_r+0x1a6>
 800625a:	2b00      	cmp	r3, #0
 800625c:	d0c6      	beq.n	80061ec <_svfiprintf_r+0x130>
 800625e:	9105      	str	r1, [sp, #20]
 8006260:	e7c4      	b.n	80061ec <_svfiprintf_r+0x130>
 8006262:	4604      	mov	r4, r0
 8006264:	2301      	movs	r3, #1
 8006266:	fb0c 2101 	mla	r1, ip, r1, r2
 800626a:	e7f0      	b.n	800624e <_svfiprintf_r+0x192>
 800626c:	ab03      	add	r3, sp, #12
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	462a      	mov	r2, r5
 8006272:	4638      	mov	r0, r7
 8006274:	4b0e      	ldr	r3, [pc, #56]	@ (80062b0 <_svfiprintf_r+0x1f4>)
 8006276:	a904      	add	r1, sp, #16
 8006278:	f7fc fccc 	bl	8002c14 <_printf_float>
 800627c:	1c42      	adds	r2, r0, #1
 800627e:	4606      	mov	r6, r0
 8006280:	d1d6      	bne.n	8006230 <_svfiprintf_r+0x174>
 8006282:	89ab      	ldrh	r3, [r5, #12]
 8006284:	065b      	lsls	r3, r3, #25
 8006286:	f53f af2d 	bmi.w	80060e4 <_svfiprintf_r+0x28>
 800628a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800628c:	e72c      	b.n	80060e8 <_svfiprintf_r+0x2c>
 800628e:	ab03      	add	r3, sp, #12
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	462a      	mov	r2, r5
 8006294:	4638      	mov	r0, r7
 8006296:	4b06      	ldr	r3, [pc, #24]	@ (80062b0 <_svfiprintf_r+0x1f4>)
 8006298:	a904      	add	r1, sp, #16
 800629a:	f7fc ff59 	bl	8003150 <_printf_i>
 800629e:	e7ed      	b.n	800627c <_svfiprintf_r+0x1c0>
 80062a0:	08007541 	.word	0x08007541
 80062a4:	08007547 	.word	0x08007547
 80062a8:	0800754b 	.word	0x0800754b
 80062ac:	08002c15 	.word	0x08002c15
 80062b0:	08006005 	.word	0x08006005

080062b4 <__sflush_r>:
 80062b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80062b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ba:	0716      	lsls	r6, r2, #28
 80062bc:	4605      	mov	r5, r0
 80062be:	460c      	mov	r4, r1
 80062c0:	d454      	bmi.n	800636c <__sflush_r+0xb8>
 80062c2:	684b      	ldr	r3, [r1, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	dc02      	bgt.n	80062ce <__sflush_r+0x1a>
 80062c8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	dd48      	ble.n	8006360 <__sflush_r+0xac>
 80062ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062d0:	2e00      	cmp	r6, #0
 80062d2:	d045      	beq.n	8006360 <__sflush_r+0xac>
 80062d4:	2300      	movs	r3, #0
 80062d6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062da:	682f      	ldr	r7, [r5, #0]
 80062dc:	6a21      	ldr	r1, [r4, #32]
 80062de:	602b      	str	r3, [r5, #0]
 80062e0:	d030      	beq.n	8006344 <__sflush_r+0x90>
 80062e2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	0759      	lsls	r1, r3, #29
 80062e8:	d505      	bpl.n	80062f6 <__sflush_r+0x42>
 80062ea:	6863      	ldr	r3, [r4, #4]
 80062ec:	1ad2      	subs	r2, r2, r3
 80062ee:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062f0:	b10b      	cbz	r3, 80062f6 <__sflush_r+0x42>
 80062f2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062f4:	1ad2      	subs	r2, r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	4628      	mov	r0, r5
 80062fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062fc:	6a21      	ldr	r1, [r4, #32]
 80062fe:	47b0      	blx	r6
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	89a3      	ldrh	r3, [r4, #12]
 8006304:	d106      	bne.n	8006314 <__sflush_r+0x60>
 8006306:	6829      	ldr	r1, [r5, #0]
 8006308:	291d      	cmp	r1, #29
 800630a:	d82b      	bhi.n	8006364 <__sflush_r+0xb0>
 800630c:	4a28      	ldr	r2, [pc, #160]	@ (80063b0 <__sflush_r+0xfc>)
 800630e:	410a      	asrs	r2, r1
 8006310:	07d6      	lsls	r6, r2, #31
 8006312:	d427      	bmi.n	8006364 <__sflush_r+0xb0>
 8006314:	2200      	movs	r2, #0
 8006316:	6062      	str	r2, [r4, #4]
 8006318:	6922      	ldr	r2, [r4, #16]
 800631a:	04d9      	lsls	r1, r3, #19
 800631c:	6022      	str	r2, [r4, #0]
 800631e:	d504      	bpl.n	800632a <__sflush_r+0x76>
 8006320:	1c42      	adds	r2, r0, #1
 8006322:	d101      	bne.n	8006328 <__sflush_r+0x74>
 8006324:	682b      	ldr	r3, [r5, #0]
 8006326:	b903      	cbnz	r3, 800632a <__sflush_r+0x76>
 8006328:	6560      	str	r0, [r4, #84]	@ 0x54
 800632a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800632c:	602f      	str	r7, [r5, #0]
 800632e:	b1b9      	cbz	r1, 8006360 <__sflush_r+0xac>
 8006330:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006334:	4299      	cmp	r1, r3
 8006336:	d002      	beq.n	800633e <__sflush_r+0x8a>
 8006338:	4628      	mov	r0, r5
 800633a:	f7fe fa41 	bl	80047c0 <_free_r>
 800633e:	2300      	movs	r3, #0
 8006340:	6363      	str	r3, [r4, #52]	@ 0x34
 8006342:	e00d      	b.n	8006360 <__sflush_r+0xac>
 8006344:	2301      	movs	r3, #1
 8006346:	4628      	mov	r0, r5
 8006348:	47b0      	blx	r6
 800634a:	4602      	mov	r2, r0
 800634c:	1c50      	adds	r0, r2, #1
 800634e:	d1c9      	bne.n	80062e4 <__sflush_r+0x30>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d0c6      	beq.n	80062e4 <__sflush_r+0x30>
 8006356:	2b1d      	cmp	r3, #29
 8006358:	d001      	beq.n	800635e <__sflush_r+0xaa>
 800635a:	2b16      	cmp	r3, #22
 800635c:	d11d      	bne.n	800639a <__sflush_r+0xe6>
 800635e:	602f      	str	r7, [r5, #0]
 8006360:	2000      	movs	r0, #0
 8006362:	e021      	b.n	80063a8 <__sflush_r+0xf4>
 8006364:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006368:	b21b      	sxth	r3, r3
 800636a:	e01a      	b.n	80063a2 <__sflush_r+0xee>
 800636c:	690f      	ldr	r7, [r1, #16]
 800636e:	2f00      	cmp	r7, #0
 8006370:	d0f6      	beq.n	8006360 <__sflush_r+0xac>
 8006372:	0793      	lsls	r3, r2, #30
 8006374:	bf18      	it	ne
 8006376:	2300      	movne	r3, #0
 8006378:	680e      	ldr	r6, [r1, #0]
 800637a:	bf08      	it	eq
 800637c:	694b      	ldreq	r3, [r1, #20]
 800637e:	1bf6      	subs	r6, r6, r7
 8006380:	600f      	str	r7, [r1, #0]
 8006382:	608b      	str	r3, [r1, #8]
 8006384:	2e00      	cmp	r6, #0
 8006386:	ddeb      	ble.n	8006360 <__sflush_r+0xac>
 8006388:	4633      	mov	r3, r6
 800638a:	463a      	mov	r2, r7
 800638c:	4628      	mov	r0, r5
 800638e:	6a21      	ldr	r1, [r4, #32]
 8006390:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006394:	47e0      	blx	ip
 8006396:	2800      	cmp	r0, #0
 8006398:	dc07      	bgt.n	80063aa <__sflush_r+0xf6>
 800639a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800639e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80063a6:	81a3      	strh	r3, [r4, #12]
 80063a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063aa:	4407      	add	r7, r0
 80063ac:	1a36      	subs	r6, r6, r0
 80063ae:	e7e9      	b.n	8006384 <__sflush_r+0xd0>
 80063b0:	dfbffffe 	.word	0xdfbffffe

080063b4 <_fflush_r>:
 80063b4:	b538      	push	{r3, r4, r5, lr}
 80063b6:	690b      	ldr	r3, [r1, #16]
 80063b8:	4605      	mov	r5, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	b913      	cbnz	r3, 80063c4 <_fflush_r+0x10>
 80063be:	2500      	movs	r5, #0
 80063c0:	4628      	mov	r0, r5
 80063c2:	bd38      	pop	{r3, r4, r5, pc}
 80063c4:	b118      	cbz	r0, 80063ce <_fflush_r+0x1a>
 80063c6:	6a03      	ldr	r3, [r0, #32]
 80063c8:	b90b      	cbnz	r3, 80063ce <_fflush_r+0x1a>
 80063ca:	f7fd fa7d 	bl	80038c8 <__sinit>
 80063ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f3      	beq.n	80063be <_fflush_r+0xa>
 80063d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063d8:	07d0      	lsls	r0, r2, #31
 80063da:	d404      	bmi.n	80063e6 <_fflush_r+0x32>
 80063dc:	0599      	lsls	r1, r3, #22
 80063de:	d402      	bmi.n	80063e6 <_fflush_r+0x32>
 80063e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063e2:	f7fd fb88 	bl	8003af6 <__retarget_lock_acquire_recursive>
 80063e6:	4628      	mov	r0, r5
 80063e8:	4621      	mov	r1, r4
 80063ea:	f7ff ff63 	bl	80062b4 <__sflush_r>
 80063ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063f0:	4605      	mov	r5, r0
 80063f2:	07da      	lsls	r2, r3, #31
 80063f4:	d4e4      	bmi.n	80063c0 <_fflush_r+0xc>
 80063f6:	89a3      	ldrh	r3, [r4, #12]
 80063f8:	059b      	lsls	r3, r3, #22
 80063fa:	d4e1      	bmi.n	80063c0 <_fflush_r+0xc>
 80063fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063fe:	f7fd fb7b 	bl	8003af8 <__retarget_lock_release_recursive>
 8006402:	e7dd      	b.n	80063c0 <_fflush_r+0xc>

08006404 <memmove>:
 8006404:	4288      	cmp	r0, r1
 8006406:	b510      	push	{r4, lr}
 8006408:	eb01 0402 	add.w	r4, r1, r2
 800640c:	d902      	bls.n	8006414 <memmove+0x10>
 800640e:	4284      	cmp	r4, r0
 8006410:	4623      	mov	r3, r4
 8006412:	d807      	bhi.n	8006424 <memmove+0x20>
 8006414:	1e43      	subs	r3, r0, #1
 8006416:	42a1      	cmp	r1, r4
 8006418:	d008      	beq.n	800642c <memmove+0x28>
 800641a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800641e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006422:	e7f8      	b.n	8006416 <memmove+0x12>
 8006424:	4601      	mov	r1, r0
 8006426:	4402      	add	r2, r0
 8006428:	428a      	cmp	r2, r1
 800642a:	d100      	bne.n	800642e <memmove+0x2a>
 800642c:	bd10      	pop	{r4, pc}
 800642e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006432:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006436:	e7f7      	b.n	8006428 <memmove+0x24>

08006438 <strncmp>:
 8006438:	b510      	push	{r4, lr}
 800643a:	b16a      	cbz	r2, 8006458 <strncmp+0x20>
 800643c:	3901      	subs	r1, #1
 800643e:	1884      	adds	r4, r0, r2
 8006440:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006444:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006448:	429a      	cmp	r2, r3
 800644a:	d103      	bne.n	8006454 <strncmp+0x1c>
 800644c:	42a0      	cmp	r0, r4
 800644e:	d001      	beq.n	8006454 <strncmp+0x1c>
 8006450:	2a00      	cmp	r2, #0
 8006452:	d1f5      	bne.n	8006440 <strncmp+0x8>
 8006454:	1ad0      	subs	r0, r2, r3
 8006456:	bd10      	pop	{r4, pc}
 8006458:	4610      	mov	r0, r2
 800645a:	e7fc      	b.n	8006456 <strncmp+0x1e>

0800645c <_sbrk_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	2300      	movs	r3, #0
 8006460:	4d05      	ldr	r5, [pc, #20]	@ (8006478 <_sbrk_r+0x1c>)
 8006462:	4604      	mov	r4, r0
 8006464:	4608      	mov	r0, r1
 8006466:	602b      	str	r3, [r5, #0]
 8006468:	f7fb f8e0 	bl	800162c <_sbrk>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_sbrk_r+0x1a>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_sbrk_r+0x1a>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	2000040c 	.word	0x2000040c

0800647c <memcpy>:
 800647c:	440a      	add	r2, r1
 800647e:	4291      	cmp	r1, r2
 8006480:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006484:	d100      	bne.n	8006488 <memcpy+0xc>
 8006486:	4770      	bx	lr
 8006488:	b510      	push	{r4, lr}
 800648a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800648e:	4291      	cmp	r1, r2
 8006490:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006494:	d1f9      	bne.n	800648a <memcpy+0xe>
 8006496:	bd10      	pop	{r4, pc}

08006498 <nan>:
 8006498:	2000      	movs	r0, #0
 800649a:	4901      	ldr	r1, [pc, #4]	@ (80064a0 <nan+0x8>)
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	7ff80000 	.word	0x7ff80000

080064a4 <__assert_func>:
 80064a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064a6:	4614      	mov	r4, r2
 80064a8:	461a      	mov	r2, r3
 80064aa:	4b09      	ldr	r3, [pc, #36]	@ (80064d0 <__assert_func+0x2c>)
 80064ac:	4605      	mov	r5, r0
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68d8      	ldr	r0, [r3, #12]
 80064b2:	b954      	cbnz	r4, 80064ca <__assert_func+0x26>
 80064b4:	4b07      	ldr	r3, [pc, #28]	@ (80064d4 <__assert_func+0x30>)
 80064b6:	461c      	mov	r4, r3
 80064b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80064bc:	9100      	str	r1, [sp, #0]
 80064be:	462b      	mov	r3, r5
 80064c0:	4905      	ldr	r1, [pc, #20]	@ (80064d8 <__assert_func+0x34>)
 80064c2:	f000 fba7 	bl	8006c14 <fiprintf>
 80064c6:	f000 fbb7 	bl	8006c38 <abort>
 80064ca:	4b04      	ldr	r3, [pc, #16]	@ (80064dc <__assert_func+0x38>)
 80064cc:	e7f4      	b.n	80064b8 <__assert_func+0x14>
 80064ce:	bf00      	nop
 80064d0:	20000018 	.word	0x20000018
 80064d4:	08007595 	.word	0x08007595
 80064d8:	08007567 	.word	0x08007567
 80064dc:	0800755a 	.word	0x0800755a

080064e0 <_calloc_r>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	fba1 5402 	umull	r5, r4, r1, r2
 80064e6:	b93c      	cbnz	r4, 80064f8 <_calloc_r+0x18>
 80064e8:	4629      	mov	r1, r5
 80064ea:	f7fe f9db 	bl	80048a4 <_malloc_r>
 80064ee:	4606      	mov	r6, r0
 80064f0:	b928      	cbnz	r0, 80064fe <_calloc_r+0x1e>
 80064f2:	2600      	movs	r6, #0
 80064f4:	4630      	mov	r0, r6
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	220c      	movs	r2, #12
 80064fa:	6002      	str	r2, [r0, #0]
 80064fc:	e7f9      	b.n	80064f2 <_calloc_r+0x12>
 80064fe:	462a      	mov	r2, r5
 8006500:	4621      	mov	r1, r4
 8006502:	f7fd fa7a 	bl	80039fa <memset>
 8006506:	e7f5      	b.n	80064f4 <_calloc_r+0x14>

08006508 <rshift>:
 8006508:	6903      	ldr	r3, [r0, #16]
 800650a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800650e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006512:	f100 0414 	add.w	r4, r0, #20
 8006516:	ea4f 1261 	mov.w	r2, r1, asr #5
 800651a:	dd46      	ble.n	80065aa <rshift+0xa2>
 800651c:	f011 011f 	ands.w	r1, r1, #31
 8006520:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006524:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006528:	d10c      	bne.n	8006544 <rshift+0x3c>
 800652a:	4629      	mov	r1, r5
 800652c:	f100 0710 	add.w	r7, r0, #16
 8006530:	42b1      	cmp	r1, r6
 8006532:	d335      	bcc.n	80065a0 <rshift+0x98>
 8006534:	1a9b      	subs	r3, r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	1eea      	subs	r2, r5, #3
 800653a:	4296      	cmp	r6, r2
 800653c:	bf38      	it	cc
 800653e:	2300      	movcc	r3, #0
 8006540:	4423      	add	r3, r4
 8006542:	e015      	b.n	8006570 <rshift+0x68>
 8006544:	46a1      	mov	r9, r4
 8006546:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800654a:	f1c1 0820 	rsb	r8, r1, #32
 800654e:	40cf      	lsrs	r7, r1
 8006550:	f105 0e04 	add.w	lr, r5, #4
 8006554:	4576      	cmp	r6, lr
 8006556:	46f4      	mov	ip, lr
 8006558:	d816      	bhi.n	8006588 <rshift+0x80>
 800655a:	1a9a      	subs	r2, r3, r2
 800655c:	0092      	lsls	r2, r2, #2
 800655e:	3a04      	subs	r2, #4
 8006560:	3501      	adds	r5, #1
 8006562:	42ae      	cmp	r6, r5
 8006564:	bf38      	it	cc
 8006566:	2200      	movcc	r2, #0
 8006568:	18a3      	adds	r3, r4, r2
 800656a:	50a7      	str	r7, [r4, r2]
 800656c:	b107      	cbz	r7, 8006570 <rshift+0x68>
 800656e:	3304      	adds	r3, #4
 8006570:	42a3      	cmp	r3, r4
 8006572:	eba3 0204 	sub.w	r2, r3, r4
 8006576:	bf08      	it	eq
 8006578:	2300      	moveq	r3, #0
 800657a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800657e:	6102      	str	r2, [r0, #16]
 8006580:	bf08      	it	eq
 8006582:	6143      	streq	r3, [r0, #20]
 8006584:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006588:	f8dc c000 	ldr.w	ip, [ip]
 800658c:	fa0c fc08 	lsl.w	ip, ip, r8
 8006590:	ea4c 0707 	orr.w	r7, ip, r7
 8006594:	f849 7b04 	str.w	r7, [r9], #4
 8006598:	f85e 7b04 	ldr.w	r7, [lr], #4
 800659c:	40cf      	lsrs	r7, r1
 800659e:	e7d9      	b.n	8006554 <rshift+0x4c>
 80065a0:	f851 cb04 	ldr.w	ip, [r1], #4
 80065a4:	f847 cf04 	str.w	ip, [r7, #4]!
 80065a8:	e7c2      	b.n	8006530 <rshift+0x28>
 80065aa:	4623      	mov	r3, r4
 80065ac:	e7e0      	b.n	8006570 <rshift+0x68>

080065ae <__hexdig_fun>:
 80065ae:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80065b2:	2b09      	cmp	r3, #9
 80065b4:	d802      	bhi.n	80065bc <__hexdig_fun+0xe>
 80065b6:	3820      	subs	r0, #32
 80065b8:	b2c0      	uxtb	r0, r0
 80065ba:	4770      	bx	lr
 80065bc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80065c0:	2b05      	cmp	r3, #5
 80065c2:	d801      	bhi.n	80065c8 <__hexdig_fun+0x1a>
 80065c4:	3847      	subs	r0, #71	@ 0x47
 80065c6:	e7f7      	b.n	80065b8 <__hexdig_fun+0xa>
 80065c8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80065cc:	2b05      	cmp	r3, #5
 80065ce:	d801      	bhi.n	80065d4 <__hexdig_fun+0x26>
 80065d0:	3827      	subs	r0, #39	@ 0x27
 80065d2:	e7f1      	b.n	80065b8 <__hexdig_fun+0xa>
 80065d4:	2000      	movs	r0, #0
 80065d6:	4770      	bx	lr

080065d8 <__gethex>:
 80065d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065dc:	468a      	mov	sl, r1
 80065de:	4690      	mov	r8, r2
 80065e0:	b085      	sub	sp, #20
 80065e2:	9302      	str	r3, [sp, #8]
 80065e4:	680b      	ldr	r3, [r1, #0]
 80065e6:	9001      	str	r0, [sp, #4]
 80065e8:	1c9c      	adds	r4, r3, #2
 80065ea:	46a1      	mov	r9, r4
 80065ec:	f814 0b01 	ldrb.w	r0, [r4], #1
 80065f0:	2830      	cmp	r0, #48	@ 0x30
 80065f2:	d0fa      	beq.n	80065ea <__gethex+0x12>
 80065f4:	eba9 0303 	sub.w	r3, r9, r3
 80065f8:	f1a3 0b02 	sub.w	fp, r3, #2
 80065fc:	f7ff ffd7 	bl	80065ae <__hexdig_fun>
 8006600:	4605      	mov	r5, r0
 8006602:	2800      	cmp	r0, #0
 8006604:	d168      	bne.n	80066d8 <__gethex+0x100>
 8006606:	2201      	movs	r2, #1
 8006608:	4648      	mov	r0, r9
 800660a:	499f      	ldr	r1, [pc, #636]	@ (8006888 <__gethex+0x2b0>)
 800660c:	f7ff ff14 	bl	8006438 <strncmp>
 8006610:	4607      	mov	r7, r0
 8006612:	2800      	cmp	r0, #0
 8006614:	d167      	bne.n	80066e6 <__gethex+0x10e>
 8006616:	f899 0001 	ldrb.w	r0, [r9, #1]
 800661a:	4626      	mov	r6, r4
 800661c:	f7ff ffc7 	bl	80065ae <__hexdig_fun>
 8006620:	2800      	cmp	r0, #0
 8006622:	d062      	beq.n	80066ea <__gethex+0x112>
 8006624:	4623      	mov	r3, r4
 8006626:	7818      	ldrb	r0, [r3, #0]
 8006628:	4699      	mov	r9, r3
 800662a:	2830      	cmp	r0, #48	@ 0x30
 800662c:	f103 0301 	add.w	r3, r3, #1
 8006630:	d0f9      	beq.n	8006626 <__gethex+0x4e>
 8006632:	f7ff ffbc 	bl	80065ae <__hexdig_fun>
 8006636:	fab0 f580 	clz	r5, r0
 800663a:	f04f 0b01 	mov.w	fp, #1
 800663e:	096d      	lsrs	r5, r5, #5
 8006640:	464a      	mov	r2, r9
 8006642:	4616      	mov	r6, r2
 8006644:	7830      	ldrb	r0, [r6, #0]
 8006646:	3201      	adds	r2, #1
 8006648:	f7ff ffb1 	bl	80065ae <__hexdig_fun>
 800664c:	2800      	cmp	r0, #0
 800664e:	d1f8      	bne.n	8006642 <__gethex+0x6a>
 8006650:	2201      	movs	r2, #1
 8006652:	4630      	mov	r0, r6
 8006654:	498c      	ldr	r1, [pc, #560]	@ (8006888 <__gethex+0x2b0>)
 8006656:	f7ff feef 	bl	8006438 <strncmp>
 800665a:	2800      	cmp	r0, #0
 800665c:	d13f      	bne.n	80066de <__gethex+0x106>
 800665e:	b944      	cbnz	r4, 8006672 <__gethex+0x9a>
 8006660:	1c74      	adds	r4, r6, #1
 8006662:	4622      	mov	r2, r4
 8006664:	4616      	mov	r6, r2
 8006666:	7830      	ldrb	r0, [r6, #0]
 8006668:	3201      	adds	r2, #1
 800666a:	f7ff ffa0 	bl	80065ae <__hexdig_fun>
 800666e:	2800      	cmp	r0, #0
 8006670:	d1f8      	bne.n	8006664 <__gethex+0x8c>
 8006672:	1ba4      	subs	r4, r4, r6
 8006674:	00a7      	lsls	r7, r4, #2
 8006676:	7833      	ldrb	r3, [r6, #0]
 8006678:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800667c:	2b50      	cmp	r3, #80	@ 0x50
 800667e:	d13e      	bne.n	80066fe <__gethex+0x126>
 8006680:	7873      	ldrb	r3, [r6, #1]
 8006682:	2b2b      	cmp	r3, #43	@ 0x2b
 8006684:	d033      	beq.n	80066ee <__gethex+0x116>
 8006686:	2b2d      	cmp	r3, #45	@ 0x2d
 8006688:	d034      	beq.n	80066f4 <__gethex+0x11c>
 800668a:	2400      	movs	r4, #0
 800668c:	1c71      	adds	r1, r6, #1
 800668e:	7808      	ldrb	r0, [r1, #0]
 8006690:	f7ff ff8d 	bl	80065ae <__hexdig_fun>
 8006694:	1e43      	subs	r3, r0, #1
 8006696:	b2db      	uxtb	r3, r3
 8006698:	2b18      	cmp	r3, #24
 800669a:	d830      	bhi.n	80066fe <__gethex+0x126>
 800669c:	f1a0 0210 	sub.w	r2, r0, #16
 80066a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80066a4:	f7ff ff83 	bl	80065ae <__hexdig_fun>
 80066a8:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80066ac:	fa5f fc8c 	uxtb.w	ip, ip
 80066b0:	f1bc 0f18 	cmp.w	ip, #24
 80066b4:	f04f 030a 	mov.w	r3, #10
 80066b8:	d91e      	bls.n	80066f8 <__gethex+0x120>
 80066ba:	b104      	cbz	r4, 80066be <__gethex+0xe6>
 80066bc:	4252      	negs	r2, r2
 80066be:	4417      	add	r7, r2
 80066c0:	f8ca 1000 	str.w	r1, [sl]
 80066c4:	b1ed      	cbz	r5, 8006702 <__gethex+0x12a>
 80066c6:	f1bb 0f00 	cmp.w	fp, #0
 80066ca:	bf0c      	ite	eq
 80066cc:	2506      	moveq	r5, #6
 80066ce:	2500      	movne	r5, #0
 80066d0:	4628      	mov	r0, r5
 80066d2:	b005      	add	sp, #20
 80066d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066d8:	2500      	movs	r5, #0
 80066da:	462c      	mov	r4, r5
 80066dc:	e7b0      	b.n	8006640 <__gethex+0x68>
 80066de:	2c00      	cmp	r4, #0
 80066e0:	d1c7      	bne.n	8006672 <__gethex+0x9a>
 80066e2:	4627      	mov	r7, r4
 80066e4:	e7c7      	b.n	8006676 <__gethex+0x9e>
 80066e6:	464e      	mov	r6, r9
 80066e8:	462f      	mov	r7, r5
 80066ea:	2501      	movs	r5, #1
 80066ec:	e7c3      	b.n	8006676 <__gethex+0x9e>
 80066ee:	2400      	movs	r4, #0
 80066f0:	1cb1      	adds	r1, r6, #2
 80066f2:	e7cc      	b.n	800668e <__gethex+0xb6>
 80066f4:	2401      	movs	r4, #1
 80066f6:	e7fb      	b.n	80066f0 <__gethex+0x118>
 80066f8:	fb03 0002 	mla	r0, r3, r2, r0
 80066fc:	e7ce      	b.n	800669c <__gethex+0xc4>
 80066fe:	4631      	mov	r1, r6
 8006700:	e7de      	b.n	80066c0 <__gethex+0xe8>
 8006702:	4629      	mov	r1, r5
 8006704:	eba6 0309 	sub.w	r3, r6, r9
 8006708:	3b01      	subs	r3, #1
 800670a:	2b07      	cmp	r3, #7
 800670c:	dc0a      	bgt.n	8006724 <__gethex+0x14c>
 800670e:	9801      	ldr	r0, [sp, #4]
 8006710:	f7fe f954 	bl	80049bc <_Balloc>
 8006714:	4604      	mov	r4, r0
 8006716:	b940      	cbnz	r0, 800672a <__gethex+0x152>
 8006718:	4602      	mov	r2, r0
 800671a:	21e4      	movs	r1, #228	@ 0xe4
 800671c:	4b5b      	ldr	r3, [pc, #364]	@ (800688c <__gethex+0x2b4>)
 800671e:	485c      	ldr	r0, [pc, #368]	@ (8006890 <__gethex+0x2b8>)
 8006720:	f7ff fec0 	bl	80064a4 <__assert_func>
 8006724:	3101      	adds	r1, #1
 8006726:	105b      	asrs	r3, r3, #1
 8006728:	e7ef      	b.n	800670a <__gethex+0x132>
 800672a:	2300      	movs	r3, #0
 800672c:	f100 0a14 	add.w	sl, r0, #20
 8006730:	4655      	mov	r5, sl
 8006732:	469b      	mov	fp, r3
 8006734:	45b1      	cmp	r9, r6
 8006736:	d337      	bcc.n	80067a8 <__gethex+0x1d0>
 8006738:	f845 bb04 	str.w	fp, [r5], #4
 800673c:	eba5 050a 	sub.w	r5, r5, sl
 8006740:	10ad      	asrs	r5, r5, #2
 8006742:	6125      	str	r5, [r4, #16]
 8006744:	4658      	mov	r0, fp
 8006746:	f7fe fa2b 	bl	8004ba0 <__hi0bits>
 800674a:	016d      	lsls	r5, r5, #5
 800674c:	f8d8 6000 	ldr.w	r6, [r8]
 8006750:	1a2d      	subs	r5, r5, r0
 8006752:	42b5      	cmp	r5, r6
 8006754:	dd54      	ble.n	8006800 <__gethex+0x228>
 8006756:	1bad      	subs	r5, r5, r6
 8006758:	4629      	mov	r1, r5
 800675a:	4620      	mov	r0, r4
 800675c:	f7fe fdb3 	bl	80052c6 <__any_on>
 8006760:	4681      	mov	r9, r0
 8006762:	b178      	cbz	r0, 8006784 <__gethex+0x1ac>
 8006764:	f04f 0901 	mov.w	r9, #1
 8006768:	1e6b      	subs	r3, r5, #1
 800676a:	1159      	asrs	r1, r3, #5
 800676c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006770:	f003 021f 	and.w	r2, r3, #31
 8006774:	fa09 f202 	lsl.w	r2, r9, r2
 8006778:	420a      	tst	r2, r1
 800677a:	d003      	beq.n	8006784 <__gethex+0x1ac>
 800677c:	454b      	cmp	r3, r9
 800677e:	dc36      	bgt.n	80067ee <__gethex+0x216>
 8006780:	f04f 0902 	mov.w	r9, #2
 8006784:	4629      	mov	r1, r5
 8006786:	4620      	mov	r0, r4
 8006788:	f7ff febe 	bl	8006508 <rshift>
 800678c:	442f      	add	r7, r5
 800678e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006792:	42bb      	cmp	r3, r7
 8006794:	da42      	bge.n	800681c <__gethex+0x244>
 8006796:	4621      	mov	r1, r4
 8006798:	9801      	ldr	r0, [sp, #4]
 800679a:	f7fe f94f 	bl	8004a3c <_Bfree>
 800679e:	2300      	movs	r3, #0
 80067a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067a2:	25a3      	movs	r5, #163	@ 0xa3
 80067a4:	6013      	str	r3, [r2, #0]
 80067a6:	e793      	b.n	80066d0 <__gethex+0xf8>
 80067a8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80067ac:	2a2e      	cmp	r2, #46	@ 0x2e
 80067ae:	d012      	beq.n	80067d6 <__gethex+0x1fe>
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d104      	bne.n	80067be <__gethex+0x1e6>
 80067b4:	f845 bb04 	str.w	fp, [r5], #4
 80067b8:	f04f 0b00 	mov.w	fp, #0
 80067bc:	465b      	mov	r3, fp
 80067be:	7830      	ldrb	r0, [r6, #0]
 80067c0:	9303      	str	r3, [sp, #12]
 80067c2:	f7ff fef4 	bl	80065ae <__hexdig_fun>
 80067c6:	9b03      	ldr	r3, [sp, #12]
 80067c8:	f000 000f 	and.w	r0, r0, #15
 80067cc:	4098      	lsls	r0, r3
 80067ce:	ea4b 0b00 	orr.w	fp, fp, r0
 80067d2:	3304      	adds	r3, #4
 80067d4:	e7ae      	b.n	8006734 <__gethex+0x15c>
 80067d6:	45b1      	cmp	r9, r6
 80067d8:	d8ea      	bhi.n	80067b0 <__gethex+0x1d8>
 80067da:	2201      	movs	r2, #1
 80067dc:	4630      	mov	r0, r6
 80067de:	492a      	ldr	r1, [pc, #168]	@ (8006888 <__gethex+0x2b0>)
 80067e0:	9303      	str	r3, [sp, #12]
 80067e2:	f7ff fe29 	bl	8006438 <strncmp>
 80067e6:	9b03      	ldr	r3, [sp, #12]
 80067e8:	2800      	cmp	r0, #0
 80067ea:	d1e1      	bne.n	80067b0 <__gethex+0x1d8>
 80067ec:	e7a2      	b.n	8006734 <__gethex+0x15c>
 80067ee:	4620      	mov	r0, r4
 80067f0:	1ea9      	subs	r1, r5, #2
 80067f2:	f7fe fd68 	bl	80052c6 <__any_on>
 80067f6:	2800      	cmp	r0, #0
 80067f8:	d0c2      	beq.n	8006780 <__gethex+0x1a8>
 80067fa:	f04f 0903 	mov.w	r9, #3
 80067fe:	e7c1      	b.n	8006784 <__gethex+0x1ac>
 8006800:	da09      	bge.n	8006816 <__gethex+0x23e>
 8006802:	1b75      	subs	r5, r6, r5
 8006804:	4621      	mov	r1, r4
 8006806:	462a      	mov	r2, r5
 8006808:	9801      	ldr	r0, [sp, #4]
 800680a:	f7fe fb2d 	bl	8004e68 <__lshift>
 800680e:	4604      	mov	r4, r0
 8006810:	1b7f      	subs	r7, r7, r5
 8006812:	f100 0a14 	add.w	sl, r0, #20
 8006816:	f04f 0900 	mov.w	r9, #0
 800681a:	e7b8      	b.n	800678e <__gethex+0x1b6>
 800681c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006820:	42bd      	cmp	r5, r7
 8006822:	dd6f      	ble.n	8006904 <__gethex+0x32c>
 8006824:	1bed      	subs	r5, r5, r7
 8006826:	42ae      	cmp	r6, r5
 8006828:	dc34      	bgt.n	8006894 <__gethex+0x2bc>
 800682a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800682e:	2b02      	cmp	r3, #2
 8006830:	d022      	beq.n	8006878 <__gethex+0x2a0>
 8006832:	2b03      	cmp	r3, #3
 8006834:	d024      	beq.n	8006880 <__gethex+0x2a8>
 8006836:	2b01      	cmp	r3, #1
 8006838:	d115      	bne.n	8006866 <__gethex+0x28e>
 800683a:	42ae      	cmp	r6, r5
 800683c:	d113      	bne.n	8006866 <__gethex+0x28e>
 800683e:	2e01      	cmp	r6, #1
 8006840:	d10b      	bne.n	800685a <__gethex+0x282>
 8006842:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006846:	9a02      	ldr	r2, [sp, #8]
 8006848:	2562      	movs	r5, #98	@ 0x62
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	2301      	movs	r3, #1
 800684e:	6123      	str	r3, [r4, #16]
 8006850:	f8ca 3000 	str.w	r3, [sl]
 8006854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006856:	601c      	str	r4, [r3, #0]
 8006858:	e73a      	b.n	80066d0 <__gethex+0xf8>
 800685a:	4620      	mov	r0, r4
 800685c:	1e71      	subs	r1, r6, #1
 800685e:	f7fe fd32 	bl	80052c6 <__any_on>
 8006862:	2800      	cmp	r0, #0
 8006864:	d1ed      	bne.n	8006842 <__gethex+0x26a>
 8006866:	4621      	mov	r1, r4
 8006868:	9801      	ldr	r0, [sp, #4]
 800686a:	f7fe f8e7 	bl	8004a3c <_Bfree>
 800686e:	2300      	movs	r3, #0
 8006870:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006872:	2550      	movs	r5, #80	@ 0x50
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e72b      	b.n	80066d0 <__gethex+0xf8>
 8006878:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1f3      	bne.n	8006866 <__gethex+0x28e>
 800687e:	e7e0      	b.n	8006842 <__gethex+0x26a>
 8006880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1dd      	bne.n	8006842 <__gethex+0x26a>
 8006886:	e7ee      	b.n	8006866 <__gethex+0x28e>
 8006888:	080073e8 	.word	0x080073e8
 800688c:	0800727d 	.word	0x0800727d
 8006890:	08007596 	.word	0x08007596
 8006894:	1e6f      	subs	r7, r5, #1
 8006896:	f1b9 0f00 	cmp.w	r9, #0
 800689a:	d130      	bne.n	80068fe <__gethex+0x326>
 800689c:	b127      	cbz	r7, 80068a8 <__gethex+0x2d0>
 800689e:	4639      	mov	r1, r7
 80068a0:	4620      	mov	r0, r4
 80068a2:	f7fe fd10 	bl	80052c6 <__any_on>
 80068a6:	4681      	mov	r9, r0
 80068a8:	2301      	movs	r3, #1
 80068aa:	4629      	mov	r1, r5
 80068ac:	1b76      	subs	r6, r6, r5
 80068ae:	2502      	movs	r5, #2
 80068b0:	117a      	asrs	r2, r7, #5
 80068b2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80068b6:	f007 071f 	and.w	r7, r7, #31
 80068ba:	40bb      	lsls	r3, r7
 80068bc:	4213      	tst	r3, r2
 80068be:	4620      	mov	r0, r4
 80068c0:	bf18      	it	ne
 80068c2:	f049 0902 	orrne.w	r9, r9, #2
 80068c6:	f7ff fe1f 	bl	8006508 <rshift>
 80068ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80068ce:	f1b9 0f00 	cmp.w	r9, #0
 80068d2:	d047      	beq.n	8006964 <__gethex+0x38c>
 80068d4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d015      	beq.n	8006908 <__gethex+0x330>
 80068dc:	2b03      	cmp	r3, #3
 80068de:	d017      	beq.n	8006910 <__gethex+0x338>
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d109      	bne.n	80068f8 <__gethex+0x320>
 80068e4:	f019 0f02 	tst.w	r9, #2
 80068e8:	d006      	beq.n	80068f8 <__gethex+0x320>
 80068ea:	f8da 3000 	ldr.w	r3, [sl]
 80068ee:	ea49 0903 	orr.w	r9, r9, r3
 80068f2:	f019 0f01 	tst.w	r9, #1
 80068f6:	d10e      	bne.n	8006916 <__gethex+0x33e>
 80068f8:	f045 0510 	orr.w	r5, r5, #16
 80068fc:	e032      	b.n	8006964 <__gethex+0x38c>
 80068fe:	f04f 0901 	mov.w	r9, #1
 8006902:	e7d1      	b.n	80068a8 <__gethex+0x2d0>
 8006904:	2501      	movs	r5, #1
 8006906:	e7e2      	b.n	80068ce <__gethex+0x2f6>
 8006908:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800690a:	f1c3 0301 	rsb	r3, r3, #1
 800690e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0f0      	beq.n	80068f8 <__gethex+0x320>
 8006916:	f04f 0c00 	mov.w	ip, #0
 800691a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800691e:	f104 0314 	add.w	r3, r4, #20
 8006922:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006926:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800692a:	4618      	mov	r0, r3
 800692c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006930:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8006934:	d01b      	beq.n	800696e <__gethex+0x396>
 8006936:	3201      	adds	r2, #1
 8006938:	6002      	str	r2, [r0, #0]
 800693a:	2d02      	cmp	r5, #2
 800693c:	f104 0314 	add.w	r3, r4, #20
 8006940:	d13c      	bne.n	80069bc <__gethex+0x3e4>
 8006942:	f8d8 2000 	ldr.w	r2, [r8]
 8006946:	3a01      	subs	r2, #1
 8006948:	42b2      	cmp	r2, r6
 800694a:	d109      	bne.n	8006960 <__gethex+0x388>
 800694c:	2201      	movs	r2, #1
 800694e:	1171      	asrs	r1, r6, #5
 8006950:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006954:	f006 061f 	and.w	r6, r6, #31
 8006958:	fa02 f606 	lsl.w	r6, r2, r6
 800695c:	421e      	tst	r6, r3
 800695e:	d13a      	bne.n	80069d6 <__gethex+0x3fe>
 8006960:	f045 0520 	orr.w	r5, r5, #32
 8006964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006966:	601c      	str	r4, [r3, #0]
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	601f      	str	r7, [r3, #0]
 800696c:	e6b0      	b.n	80066d0 <__gethex+0xf8>
 800696e:	4299      	cmp	r1, r3
 8006970:	f843 cc04 	str.w	ip, [r3, #-4]
 8006974:	d8d9      	bhi.n	800692a <__gethex+0x352>
 8006976:	68a3      	ldr	r3, [r4, #8]
 8006978:	459b      	cmp	fp, r3
 800697a:	db17      	blt.n	80069ac <__gethex+0x3d4>
 800697c:	6861      	ldr	r1, [r4, #4]
 800697e:	9801      	ldr	r0, [sp, #4]
 8006980:	3101      	adds	r1, #1
 8006982:	f7fe f81b 	bl	80049bc <_Balloc>
 8006986:	4681      	mov	r9, r0
 8006988:	b918      	cbnz	r0, 8006992 <__gethex+0x3ba>
 800698a:	4602      	mov	r2, r0
 800698c:	2184      	movs	r1, #132	@ 0x84
 800698e:	4b19      	ldr	r3, [pc, #100]	@ (80069f4 <__gethex+0x41c>)
 8006990:	e6c5      	b.n	800671e <__gethex+0x146>
 8006992:	6922      	ldr	r2, [r4, #16]
 8006994:	f104 010c 	add.w	r1, r4, #12
 8006998:	3202      	adds	r2, #2
 800699a:	0092      	lsls	r2, r2, #2
 800699c:	300c      	adds	r0, #12
 800699e:	f7ff fd6d 	bl	800647c <memcpy>
 80069a2:	4621      	mov	r1, r4
 80069a4:	9801      	ldr	r0, [sp, #4]
 80069a6:	f7fe f849 	bl	8004a3c <_Bfree>
 80069aa:	464c      	mov	r4, r9
 80069ac:	6923      	ldr	r3, [r4, #16]
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	6122      	str	r2, [r4, #16]
 80069b2:	2201      	movs	r2, #1
 80069b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069b8:	615a      	str	r2, [r3, #20]
 80069ba:	e7be      	b.n	800693a <__gethex+0x362>
 80069bc:	6922      	ldr	r2, [r4, #16]
 80069be:	455a      	cmp	r2, fp
 80069c0:	dd0b      	ble.n	80069da <__gethex+0x402>
 80069c2:	2101      	movs	r1, #1
 80069c4:	4620      	mov	r0, r4
 80069c6:	f7ff fd9f 	bl	8006508 <rshift>
 80069ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80069ce:	3701      	adds	r7, #1
 80069d0:	42bb      	cmp	r3, r7
 80069d2:	f6ff aee0 	blt.w	8006796 <__gethex+0x1be>
 80069d6:	2501      	movs	r5, #1
 80069d8:	e7c2      	b.n	8006960 <__gethex+0x388>
 80069da:	f016 061f 	ands.w	r6, r6, #31
 80069de:	d0fa      	beq.n	80069d6 <__gethex+0x3fe>
 80069e0:	4453      	add	r3, sl
 80069e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80069e6:	f7fe f8db 	bl	8004ba0 <__hi0bits>
 80069ea:	f1c6 0620 	rsb	r6, r6, #32
 80069ee:	42b0      	cmp	r0, r6
 80069f0:	dbe7      	blt.n	80069c2 <__gethex+0x3ea>
 80069f2:	e7f0      	b.n	80069d6 <__gethex+0x3fe>
 80069f4:	0800727d 	.word	0x0800727d

080069f8 <L_shift>:
 80069f8:	f1c2 0208 	rsb	r2, r2, #8
 80069fc:	0092      	lsls	r2, r2, #2
 80069fe:	b570      	push	{r4, r5, r6, lr}
 8006a00:	f1c2 0620 	rsb	r6, r2, #32
 8006a04:	6843      	ldr	r3, [r0, #4]
 8006a06:	6804      	ldr	r4, [r0, #0]
 8006a08:	fa03 f506 	lsl.w	r5, r3, r6
 8006a0c:	432c      	orrs	r4, r5
 8006a0e:	40d3      	lsrs	r3, r2
 8006a10:	6004      	str	r4, [r0, #0]
 8006a12:	f840 3f04 	str.w	r3, [r0, #4]!
 8006a16:	4288      	cmp	r0, r1
 8006a18:	d3f4      	bcc.n	8006a04 <L_shift+0xc>
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}

08006a1c <__match>:
 8006a1c:	b530      	push	{r4, r5, lr}
 8006a1e:	6803      	ldr	r3, [r0, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a26:	b914      	cbnz	r4, 8006a2e <__match+0x12>
 8006a28:	6003      	str	r3, [r0, #0]
 8006a2a:	2001      	movs	r0, #1
 8006a2c:	bd30      	pop	{r4, r5, pc}
 8006a2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a32:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8006a36:	2d19      	cmp	r5, #25
 8006a38:	bf98      	it	ls
 8006a3a:	3220      	addls	r2, #32
 8006a3c:	42a2      	cmp	r2, r4
 8006a3e:	d0f0      	beq.n	8006a22 <__match+0x6>
 8006a40:	2000      	movs	r0, #0
 8006a42:	e7f3      	b.n	8006a2c <__match+0x10>

08006a44 <__hexnan>:
 8006a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a48:	2500      	movs	r5, #0
 8006a4a:	680b      	ldr	r3, [r1, #0]
 8006a4c:	4682      	mov	sl, r0
 8006a4e:	115e      	asrs	r6, r3, #5
 8006a50:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006a54:	f013 031f 	ands.w	r3, r3, #31
 8006a58:	bf18      	it	ne
 8006a5a:	3604      	addne	r6, #4
 8006a5c:	1f37      	subs	r7, r6, #4
 8006a5e:	4690      	mov	r8, r2
 8006a60:	46b9      	mov	r9, r7
 8006a62:	463c      	mov	r4, r7
 8006a64:	46ab      	mov	fp, r5
 8006a66:	b087      	sub	sp, #28
 8006a68:	6801      	ldr	r1, [r0, #0]
 8006a6a:	9301      	str	r3, [sp, #4]
 8006a6c:	f846 5c04 	str.w	r5, [r6, #-4]
 8006a70:	9502      	str	r5, [sp, #8]
 8006a72:	784a      	ldrb	r2, [r1, #1]
 8006a74:	1c4b      	adds	r3, r1, #1
 8006a76:	9303      	str	r3, [sp, #12]
 8006a78:	b342      	cbz	r2, 8006acc <__hexnan+0x88>
 8006a7a:	4610      	mov	r0, r2
 8006a7c:	9105      	str	r1, [sp, #20]
 8006a7e:	9204      	str	r2, [sp, #16]
 8006a80:	f7ff fd95 	bl	80065ae <__hexdig_fun>
 8006a84:	2800      	cmp	r0, #0
 8006a86:	d151      	bne.n	8006b2c <__hexnan+0xe8>
 8006a88:	9a04      	ldr	r2, [sp, #16]
 8006a8a:	9905      	ldr	r1, [sp, #20]
 8006a8c:	2a20      	cmp	r2, #32
 8006a8e:	d818      	bhi.n	8006ac2 <__hexnan+0x7e>
 8006a90:	9b02      	ldr	r3, [sp, #8]
 8006a92:	459b      	cmp	fp, r3
 8006a94:	dd13      	ble.n	8006abe <__hexnan+0x7a>
 8006a96:	454c      	cmp	r4, r9
 8006a98:	d206      	bcs.n	8006aa8 <__hexnan+0x64>
 8006a9a:	2d07      	cmp	r5, #7
 8006a9c:	dc04      	bgt.n	8006aa8 <__hexnan+0x64>
 8006a9e:	462a      	mov	r2, r5
 8006aa0:	4649      	mov	r1, r9
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7ff ffa8 	bl	80069f8 <L_shift>
 8006aa8:	4544      	cmp	r4, r8
 8006aaa:	d952      	bls.n	8006b52 <__hexnan+0x10e>
 8006aac:	2300      	movs	r3, #0
 8006aae:	f1a4 0904 	sub.w	r9, r4, #4
 8006ab2:	f844 3c04 	str.w	r3, [r4, #-4]
 8006ab6:	461d      	mov	r5, r3
 8006ab8:	464c      	mov	r4, r9
 8006aba:	f8cd b008 	str.w	fp, [sp, #8]
 8006abe:	9903      	ldr	r1, [sp, #12]
 8006ac0:	e7d7      	b.n	8006a72 <__hexnan+0x2e>
 8006ac2:	2a29      	cmp	r2, #41	@ 0x29
 8006ac4:	d157      	bne.n	8006b76 <__hexnan+0x132>
 8006ac6:	3102      	adds	r1, #2
 8006ac8:	f8ca 1000 	str.w	r1, [sl]
 8006acc:	f1bb 0f00 	cmp.w	fp, #0
 8006ad0:	d051      	beq.n	8006b76 <__hexnan+0x132>
 8006ad2:	454c      	cmp	r4, r9
 8006ad4:	d206      	bcs.n	8006ae4 <__hexnan+0xa0>
 8006ad6:	2d07      	cmp	r5, #7
 8006ad8:	dc04      	bgt.n	8006ae4 <__hexnan+0xa0>
 8006ada:	462a      	mov	r2, r5
 8006adc:	4649      	mov	r1, r9
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff ff8a 	bl	80069f8 <L_shift>
 8006ae4:	4544      	cmp	r4, r8
 8006ae6:	d936      	bls.n	8006b56 <__hexnan+0x112>
 8006ae8:	4623      	mov	r3, r4
 8006aea:	f1a8 0204 	sub.w	r2, r8, #4
 8006aee:	f853 1b04 	ldr.w	r1, [r3], #4
 8006af2:	429f      	cmp	r7, r3
 8006af4:	f842 1f04 	str.w	r1, [r2, #4]!
 8006af8:	d2f9      	bcs.n	8006aee <__hexnan+0xaa>
 8006afa:	1b3b      	subs	r3, r7, r4
 8006afc:	f023 0303 	bic.w	r3, r3, #3
 8006b00:	3304      	adds	r3, #4
 8006b02:	3401      	adds	r4, #1
 8006b04:	3e03      	subs	r6, #3
 8006b06:	42b4      	cmp	r4, r6
 8006b08:	bf88      	it	hi
 8006b0a:	2304      	movhi	r3, #4
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	4443      	add	r3, r8
 8006b10:	f843 2b04 	str.w	r2, [r3], #4
 8006b14:	429f      	cmp	r7, r3
 8006b16:	d2fb      	bcs.n	8006b10 <__hexnan+0xcc>
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	b91b      	cbnz	r3, 8006b24 <__hexnan+0xe0>
 8006b1c:	4547      	cmp	r7, r8
 8006b1e:	d128      	bne.n	8006b72 <__hexnan+0x12e>
 8006b20:	2301      	movs	r3, #1
 8006b22:	603b      	str	r3, [r7, #0]
 8006b24:	2005      	movs	r0, #5
 8006b26:	b007      	add	sp, #28
 8006b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	2d08      	cmp	r5, #8
 8006b30:	f10b 0b01 	add.w	fp, fp, #1
 8006b34:	dd06      	ble.n	8006b44 <__hexnan+0x100>
 8006b36:	4544      	cmp	r4, r8
 8006b38:	d9c1      	bls.n	8006abe <__hexnan+0x7a>
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	2501      	movs	r5, #1
 8006b3e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006b42:	3c04      	subs	r4, #4
 8006b44:	6822      	ldr	r2, [r4, #0]
 8006b46:	f000 000f 	and.w	r0, r0, #15
 8006b4a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8006b4e:	6020      	str	r0, [r4, #0]
 8006b50:	e7b5      	b.n	8006abe <__hexnan+0x7a>
 8006b52:	2508      	movs	r5, #8
 8006b54:	e7b3      	b.n	8006abe <__hexnan+0x7a>
 8006b56:	9b01      	ldr	r3, [sp, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0dd      	beq.n	8006b18 <__hexnan+0xd4>
 8006b5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b60:	f1c3 0320 	rsb	r3, r3, #32
 8006b64:	40da      	lsrs	r2, r3
 8006b66:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	f846 3c04 	str.w	r3, [r6, #-4]
 8006b70:	e7d2      	b.n	8006b18 <__hexnan+0xd4>
 8006b72:	3f04      	subs	r7, #4
 8006b74:	e7d0      	b.n	8006b18 <__hexnan+0xd4>
 8006b76:	2004      	movs	r0, #4
 8006b78:	e7d5      	b.n	8006b26 <__hexnan+0xe2>

08006b7a <__ascii_mbtowc>:
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	b901      	cbnz	r1, 8006b80 <__ascii_mbtowc+0x6>
 8006b7e:	a901      	add	r1, sp, #4
 8006b80:	b142      	cbz	r2, 8006b94 <__ascii_mbtowc+0x1a>
 8006b82:	b14b      	cbz	r3, 8006b98 <__ascii_mbtowc+0x1e>
 8006b84:	7813      	ldrb	r3, [r2, #0]
 8006b86:	600b      	str	r3, [r1, #0]
 8006b88:	7812      	ldrb	r2, [r2, #0]
 8006b8a:	1e10      	subs	r0, r2, #0
 8006b8c:	bf18      	it	ne
 8006b8e:	2001      	movne	r0, #1
 8006b90:	b002      	add	sp, #8
 8006b92:	4770      	bx	lr
 8006b94:	4610      	mov	r0, r2
 8006b96:	e7fb      	b.n	8006b90 <__ascii_mbtowc+0x16>
 8006b98:	f06f 0001 	mvn.w	r0, #1
 8006b9c:	e7f8      	b.n	8006b90 <__ascii_mbtowc+0x16>

08006b9e <_realloc_r>:
 8006b9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	4615      	mov	r5, r2
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	b921      	cbnz	r1, 8006bb4 <_realloc_r+0x16>
 8006baa:	4611      	mov	r1, r2
 8006bac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bb0:	f7fd be78 	b.w	80048a4 <_malloc_r>
 8006bb4:	b92a      	cbnz	r2, 8006bc2 <_realloc_r+0x24>
 8006bb6:	f7fd fe03 	bl	80047c0 <_free_r>
 8006bba:	2400      	movs	r4, #0
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc2:	f000 f840 	bl	8006c46 <_malloc_usable_size_r>
 8006bc6:	4285      	cmp	r5, r0
 8006bc8:	4606      	mov	r6, r0
 8006bca:	d802      	bhi.n	8006bd2 <_realloc_r+0x34>
 8006bcc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006bd0:	d8f4      	bhi.n	8006bbc <_realloc_r+0x1e>
 8006bd2:	4629      	mov	r1, r5
 8006bd4:	4640      	mov	r0, r8
 8006bd6:	f7fd fe65 	bl	80048a4 <_malloc_r>
 8006bda:	4607      	mov	r7, r0
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d0ec      	beq.n	8006bba <_realloc_r+0x1c>
 8006be0:	42b5      	cmp	r5, r6
 8006be2:	462a      	mov	r2, r5
 8006be4:	4621      	mov	r1, r4
 8006be6:	bf28      	it	cs
 8006be8:	4632      	movcs	r2, r6
 8006bea:	f7ff fc47 	bl	800647c <memcpy>
 8006bee:	4621      	mov	r1, r4
 8006bf0:	4640      	mov	r0, r8
 8006bf2:	f7fd fde5 	bl	80047c0 <_free_r>
 8006bf6:	463c      	mov	r4, r7
 8006bf8:	e7e0      	b.n	8006bbc <_realloc_r+0x1e>

08006bfa <__ascii_wctomb>:
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	4608      	mov	r0, r1
 8006bfe:	b141      	cbz	r1, 8006c12 <__ascii_wctomb+0x18>
 8006c00:	2aff      	cmp	r2, #255	@ 0xff
 8006c02:	d904      	bls.n	8006c0e <__ascii_wctomb+0x14>
 8006c04:	228a      	movs	r2, #138	@ 0x8a
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	4770      	bx	lr
 8006c0e:	2001      	movs	r0, #1
 8006c10:	700a      	strb	r2, [r1, #0]
 8006c12:	4770      	bx	lr

08006c14 <fiprintf>:
 8006c14:	b40e      	push	{r1, r2, r3}
 8006c16:	b503      	push	{r0, r1, lr}
 8006c18:	4601      	mov	r1, r0
 8006c1a:	ab03      	add	r3, sp, #12
 8006c1c:	4805      	ldr	r0, [pc, #20]	@ (8006c34 <fiprintf+0x20>)
 8006c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c22:	6800      	ldr	r0, [r0, #0]
 8006c24:	9301      	str	r3, [sp, #4]
 8006c26:	f000 f83d 	bl	8006ca4 <_vfiprintf_r>
 8006c2a:	b002      	add	sp, #8
 8006c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c30:	b003      	add	sp, #12
 8006c32:	4770      	bx	lr
 8006c34:	20000018 	.word	0x20000018

08006c38 <abort>:
 8006c38:	2006      	movs	r0, #6
 8006c3a:	b508      	push	{r3, lr}
 8006c3c:	f000 fa06 	bl	800704c <raise>
 8006c40:	2001      	movs	r0, #1
 8006c42:	f7fa fc7e 	bl	8001542 <_exit>

08006c46 <_malloc_usable_size_r>:
 8006c46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c4a:	1f18      	subs	r0, r3, #4
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	bfbc      	itt	lt
 8006c50:	580b      	ldrlt	r3, [r1, r0]
 8006c52:	18c0      	addlt	r0, r0, r3
 8006c54:	4770      	bx	lr

08006c56 <__sfputc_r>:
 8006c56:	6893      	ldr	r3, [r2, #8]
 8006c58:	b410      	push	{r4}
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	6093      	str	r3, [r2, #8]
 8006c60:	da07      	bge.n	8006c72 <__sfputc_r+0x1c>
 8006c62:	6994      	ldr	r4, [r2, #24]
 8006c64:	42a3      	cmp	r3, r4
 8006c66:	db01      	blt.n	8006c6c <__sfputc_r+0x16>
 8006c68:	290a      	cmp	r1, #10
 8006c6a:	d102      	bne.n	8006c72 <__sfputc_r+0x1c>
 8006c6c:	bc10      	pop	{r4}
 8006c6e:	f000 b931 	b.w	8006ed4 <__swbuf_r>
 8006c72:	6813      	ldr	r3, [r2, #0]
 8006c74:	1c58      	adds	r0, r3, #1
 8006c76:	6010      	str	r0, [r2, #0]
 8006c78:	7019      	strb	r1, [r3, #0]
 8006c7a:	4608      	mov	r0, r1
 8006c7c:	bc10      	pop	{r4}
 8006c7e:	4770      	bx	lr

08006c80 <__sfputs_r>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	4606      	mov	r6, r0
 8006c84:	460f      	mov	r7, r1
 8006c86:	4614      	mov	r4, r2
 8006c88:	18d5      	adds	r5, r2, r3
 8006c8a:	42ac      	cmp	r4, r5
 8006c8c:	d101      	bne.n	8006c92 <__sfputs_r+0x12>
 8006c8e:	2000      	movs	r0, #0
 8006c90:	e007      	b.n	8006ca2 <__sfputs_r+0x22>
 8006c92:	463a      	mov	r2, r7
 8006c94:	4630      	mov	r0, r6
 8006c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c9a:	f7ff ffdc 	bl	8006c56 <__sfputc_r>
 8006c9e:	1c43      	adds	r3, r0, #1
 8006ca0:	d1f3      	bne.n	8006c8a <__sfputs_r+0xa>
 8006ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ca4 <_vfiprintf_r>:
 8006ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ca8:	460d      	mov	r5, r1
 8006caa:	4614      	mov	r4, r2
 8006cac:	4698      	mov	r8, r3
 8006cae:	4606      	mov	r6, r0
 8006cb0:	b09d      	sub	sp, #116	@ 0x74
 8006cb2:	b118      	cbz	r0, 8006cbc <_vfiprintf_r+0x18>
 8006cb4:	6a03      	ldr	r3, [r0, #32]
 8006cb6:	b90b      	cbnz	r3, 8006cbc <_vfiprintf_r+0x18>
 8006cb8:	f7fc fe06 	bl	80038c8 <__sinit>
 8006cbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006cbe:	07d9      	lsls	r1, r3, #31
 8006cc0:	d405      	bmi.n	8006cce <_vfiprintf_r+0x2a>
 8006cc2:	89ab      	ldrh	r3, [r5, #12]
 8006cc4:	059a      	lsls	r2, r3, #22
 8006cc6:	d402      	bmi.n	8006cce <_vfiprintf_r+0x2a>
 8006cc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cca:	f7fc ff14 	bl	8003af6 <__retarget_lock_acquire_recursive>
 8006cce:	89ab      	ldrh	r3, [r5, #12]
 8006cd0:	071b      	lsls	r3, r3, #28
 8006cd2:	d501      	bpl.n	8006cd8 <_vfiprintf_r+0x34>
 8006cd4:	692b      	ldr	r3, [r5, #16]
 8006cd6:	b99b      	cbnz	r3, 8006d00 <_vfiprintf_r+0x5c>
 8006cd8:	4629      	mov	r1, r5
 8006cda:	4630      	mov	r0, r6
 8006cdc:	f000 f938 	bl	8006f50 <__swsetup_r>
 8006ce0:	b170      	cbz	r0, 8006d00 <_vfiprintf_r+0x5c>
 8006ce2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ce4:	07dc      	lsls	r4, r3, #31
 8006ce6:	d504      	bpl.n	8006cf2 <_vfiprintf_r+0x4e>
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006cec:	b01d      	add	sp, #116	@ 0x74
 8006cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf2:	89ab      	ldrh	r3, [r5, #12]
 8006cf4:	0598      	lsls	r0, r3, #22
 8006cf6:	d4f7      	bmi.n	8006ce8 <_vfiprintf_r+0x44>
 8006cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006cfa:	f7fc fefd 	bl	8003af8 <__retarget_lock_release_recursive>
 8006cfe:	e7f3      	b.n	8006ce8 <_vfiprintf_r+0x44>
 8006d00:	2300      	movs	r3, #0
 8006d02:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d04:	2320      	movs	r3, #32
 8006d06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d0a:	2330      	movs	r3, #48	@ 0x30
 8006d0c:	f04f 0901 	mov.w	r9, #1
 8006d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d14:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006ec0 <_vfiprintf_r+0x21c>
 8006d18:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d1c:	4623      	mov	r3, r4
 8006d1e:	469a      	mov	sl, r3
 8006d20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d24:	b10a      	cbz	r2, 8006d2a <_vfiprintf_r+0x86>
 8006d26:	2a25      	cmp	r2, #37	@ 0x25
 8006d28:	d1f9      	bne.n	8006d1e <_vfiprintf_r+0x7a>
 8006d2a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d2e:	d00b      	beq.n	8006d48 <_vfiprintf_r+0xa4>
 8006d30:	465b      	mov	r3, fp
 8006d32:	4622      	mov	r2, r4
 8006d34:	4629      	mov	r1, r5
 8006d36:	4630      	mov	r0, r6
 8006d38:	f7ff ffa2 	bl	8006c80 <__sfputs_r>
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	f000 80a7 	beq.w	8006e90 <_vfiprintf_r+0x1ec>
 8006d42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d44:	445a      	add	r2, fp
 8006d46:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d48:	f89a 3000 	ldrb.w	r3, [sl]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f000 809f 	beq.w	8006e90 <_vfiprintf_r+0x1ec>
 8006d52:	2300      	movs	r3, #0
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d5c:	f10a 0a01 	add.w	sl, sl, #1
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	9307      	str	r3, [sp, #28]
 8006d64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d68:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d6a:	4654      	mov	r4, sl
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d72:	4853      	ldr	r0, [pc, #332]	@ (8006ec0 <_vfiprintf_r+0x21c>)
 8006d74:	f7fc fec1 	bl	8003afa <memchr>
 8006d78:	9a04      	ldr	r2, [sp, #16]
 8006d7a:	b9d8      	cbnz	r0, 8006db4 <_vfiprintf_r+0x110>
 8006d7c:	06d1      	lsls	r1, r2, #27
 8006d7e:	bf44      	itt	mi
 8006d80:	2320      	movmi	r3, #32
 8006d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d86:	0713      	lsls	r3, r2, #28
 8006d88:	bf44      	itt	mi
 8006d8a:	232b      	movmi	r3, #43	@ 0x2b
 8006d8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d90:	f89a 3000 	ldrb.w	r3, [sl]
 8006d94:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d96:	d015      	beq.n	8006dc4 <_vfiprintf_r+0x120>
 8006d98:	4654      	mov	r4, sl
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	f04f 0c0a 	mov.w	ip, #10
 8006da0:	9a07      	ldr	r2, [sp, #28]
 8006da2:	4621      	mov	r1, r4
 8006da4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006da8:	3b30      	subs	r3, #48	@ 0x30
 8006daa:	2b09      	cmp	r3, #9
 8006dac:	d94b      	bls.n	8006e46 <_vfiprintf_r+0x1a2>
 8006dae:	b1b0      	cbz	r0, 8006dde <_vfiprintf_r+0x13a>
 8006db0:	9207      	str	r2, [sp, #28]
 8006db2:	e014      	b.n	8006dde <_vfiprintf_r+0x13a>
 8006db4:	eba0 0308 	sub.w	r3, r0, r8
 8006db8:	fa09 f303 	lsl.w	r3, r9, r3
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	46a2      	mov	sl, r4
 8006dc0:	9304      	str	r3, [sp, #16]
 8006dc2:	e7d2      	b.n	8006d6a <_vfiprintf_r+0xc6>
 8006dc4:	9b03      	ldr	r3, [sp, #12]
 8006dc6:	1d19      	adds	r1, r3, #4
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	9103      	str	r1, [sp, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	bfbb      	ittet	lt
 8006dd0:	425b      	neglt	r3, r3
 8006dd2:	f042 0202 	orrlt.w	r2, r2, #2
 8006dd6:	9307      	strge	r3, [sp, #28]
 8006dd8:	9307      	strlt	r3, [sp, #28]
 8006dda:	bfb8      	it	lt
 8006ddc:	9204      	strlt	r2, [sp, #16]
 8006dde:	7823      	ldrb	r3, [r4, #0]
 8006de0:	2b2e      	cmp	r3, #46	@ 0x2e
 8006de2:	d10a      	bne.n	8006dfa <_vfiprintf_r+0x156>
 8006de4:	7863      	ldrb	r3, [r4, #1]
 8006de6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006de8:	d132      	bne.n	8006e50 <_vfiprintf_r+0x1ac>
 8006dea:	9b03      	ldr	r3, [sp, #12]
 8006dec:	3402      	adds	r4, #2
 8006dee:	1d1a      	adds	r2, r3, #4
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	9203      	str	r2, [sp, #12]
 8006df4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006df8:	9305      	str	r3, [sp, #20]
 8006dfa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006ec4 <_vfiprintf_r+0x220>
 8006dfe:	2203      	movs	r2, #3
 8006e00:	4650      	mov	r0, sl
 8006e02:	7821      	ldrb	r1, [r4, #0]
 8006e04:	f7fc fe79 	bl	8003afa <memchr>
 8006e08:	b138      	cbz	r0, 8006e1a <_vfiprintf_r+0x176>
 8006e0a:	2240      	movs	r2, #64	@ 0x40
 8006e0c:	9b04      	ldr	r3, [sp, #16]
 8006e0e:	eba0 000a 	sub.w	r0, r0, sl
 8006e12:	4082      	lsls	r2, r0
 8006e14:	4313      	orrs	r3, r2
 8006e16:	3401      	adds	r4, #1
 8006e18:	9304      	str	r3, [sp, #16]
 8006e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1e:	2206      	movs	r2, #6
 8006e20:	4829      	ldr	r0, [pc, #164]	@ (8006ec8 <_vfiprintf_r+0x224>)
 8006e22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e26:	f7fc fe68 	bl	8003afa <memchr>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	d03f      	beq.n	8006eae <_vfiprintf_r+0x20a>
 8006e2e:	4b27      	ldr	r3, [pc, #156]	@ (8006ecc <_vfiprintf_r+0x228>)
 8006e30:	bb1b      	cbnz	r3, 8006e7a <_vfiprintf_r+0x1d6>
 8006e32:	9b03      	ldr	r3, [sp, #12]
 8006e34:	3307      	adds	r3, #7
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	9303      	str	r3, [sp, #12]
 8006e3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e40:	443b      	add	r3, r7
 8006e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e44:	e76a      	b.n	8006d1c <_vfiprintf_r+0x78>
 8006e46:	460c      	mov	r4, r1
 8006e48:	2001      	movs	r0, #1
 8006e4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e4e:	e7a8      	b.n	8006da2 <_vfiprintf_r+0xfe>
 8006e50:	2300      	movs	r3, #0
 8006e52:	f04f 0c0a 	mov.w	ip, #10
 8006e56:	4619      	mov	r1, r3
 8006e58:	3401      	adds	r4, #1
 8006e5a:	9305      	str	r3, [sp, #20]
 8006e5c:	4620      	mov	r0, r4
 8006e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e62:	3a30      	subs	r2, #48	@ 0x30
 8006e64:	2a09      	cmp	r2, #9
 8006e66:	d903      	bls.n	8006e70 <_vfiprintf_r+0x1cc>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d0c6      	beq.n	8006dfa <_vfiprintf_r+0x156>
 8006e6c:	9105      	str	r1, [sp, #20]
 8006e6e:	e7c4      	b.n	8006dfa <_vfiprintf_r+0x156>
 8006e70:	4604      	mov	r4, r0
 8006e72:	2301      	movs	r3, #1
 8006e74:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e78:	e7f0      	b.n	8006e5c <_vfiprintf_r+0x1b8>
 8006e7a:	ab03      	add	r3, sp, #12
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	462a      	mov	r2, r5
 8006e80:	4630      	mov	r0, r6
 8006e82:	4b13      	ldr	r3, [pc, #76]	@ (8006ed0 <_vfiprintf_r+0x22c>)
 8006e84:	a904      	add	r1, sp, #16
 8006e86:	f7fb fec5 	bl	8002c14 <_printf_float>
 8006e8a:	4607      	mov	r7, r0
 8006e8c:	1c78      	adds	r0, r7, #1
 8006e8e:	d1d6      	bne.n	8006e3e <_vfiprintf_r+0x19a>
 8006e90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e92:	07d9      	lsls	r1, r3, #31
 8006e94:	d405      	bmi.n	8006ea2 <_vfiprintf_r+0x1fe>
 8006e96:	89ab      	ldrh	r3, [r5, #12]
 8006e98:	059a      	lsls	r2, r3, #22
 8006e9a:	d402      	bmi.n	8006ea2 <_vfiprintf_r+0x1fe>
 8006e9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e9e:	f7fc fe2b 	bl	8003af8 <__retarget_lock_release_recursive>
 8006ea2:	89ab      	ldrh	r3, [r5, #12]
 8006ea4:	065b      	lsls	r3, r3, #25
 8006ea6:	f53f af1f 	bmi.w	8006ce8 <_vfiprintf_r+0x44>
 8006eaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006eac:	e71e      	b.n	8006cec <_vfiprintf_r+0x48>
 8006eae:	ab03      	add	r3, sp, #12
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	462a      	mov	r2, r5
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	4b06      	ldr	r3, [pc, #24]	@ (8006ed0 <_vfiprintf_r+0x22c>)
 8006eb8:	a904      	add	r1, sp, #16
 8006eba:	f7fc f949 	bl	8003150 <_printf_i>
 8006ebe:	e7e4      	b.n	8006e8a <_vfiprintf_r+0x1e6>
 8006ec0:	08007541 	.word	0x08007541
 8006ec4:	08007547 	.word	0x08007547
 8006ec8:	0800754b 	.word	0x0800754b
 8006ecc:	08002c15 	.word	0x08002c15
 8006ed0:	08006c81 	.word	0x08006c81

08006ed4 <__swbuf_r>:
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	460e      	mov	r6, r1
 8006ed8:	4614      	mov	r4, r2
 8006eda:	4605      	mov	r5, r0
 8006edc:	b118      	cbz	r0, 8006ee6 <__swbuf_r+0x12>
 8006ede:	6a03      	ldr	r3, [r0, #32]
 8006ee0:	b90b      	cbnz	r3, 8006ee6 <__swbuf_r+0x12>
 8006ee2:	f7fc fcf1 	bl	80038c8 <__sinit>
 8006ee6:	69a3      	ldr	r3, [r4, #24]
 8006ee8:	60a3      	str	r3, [r4, #8]
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	071a      	lsls	r2, r3, #28
 8006eee:	d501      	bpl.n	8006ef4 <__swbuf_r+0x20>
 8006ef0:	6923      	ldr	r3, [r4, #16]
 8006ef2:	b943      	cbnz	r3, 8006f06 <__swbuf_r+0x32>
 8006ef4:	4621      	mov	r1, r4
 8006ef6:	4628      	mov	r0, r5
 8006ef8:	f000 f82a 	bl	8006f50 <__swsetup_r>
 8006efc:	b118      	cbz	r0, 8006f06 <__swbuf_r+0x32>
 8006efe:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006f02:	4638      	mov	r0, r7
 8006f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	6922      	ldr	r2, [r4, #16]
 8006f0a:	b2f6      	uxtb	r6, r6
 8006f0c:	1a98      	subs	r0, r3, r2
 8006f0e:	6963      	ldr	r3, [r4, #20]
 8006f10:	4637      	mov	r7, r6
 8006f12:	4283      	cmp	r3, r0
 8006f14:	dc05      	bgt.n	8006f22 <__swbuf_r+0x4e>
 8006f16:	4621      	mov	r1, r4
 8006f18:	4628      	mov	r0, r5
 8006f1a:	f7ff fa4b 	bl	80063b4 <_fflush_r>
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	d1ed      	bne.n	8006efe <__swbuf_r+0x2a>
 8006f22:	68a3      	ldr	r3, [r4, #8]
 8006f24:	3b01      	subs	r3, #1
 8006f26:	60a3      	str	r3, [r4, #8]
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	6022      	str	r2, [r4, #0]
 8006f2e:	701e      	strb	r6, [r3, #0]
 8006f30:	6962      	ldr	r2, [r4, #20]
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d004      	beq.n	8006f42 <__swbuf_r+0x6e>
 8006f38:	89a3      	ldrh	r3, [r4, #12]
 8006f3a:	07db      	lsls	r3, r3, #31
 8006f3c:	d5e1      	bpl.n	8006f02 <__swbuf_r+0x2e>
 8006f3e:	2e0a      	cmp	r6, #10
 8006f40:	d1df      	bne.n	8006f02 <__swbuf_r+0x2e>
 8006f42:	4621      	mov	r1, r4
 8006f44:	4628      	mov	r0, r5
 8006f46:	f7ff fa35 	bl	80063b4 <_fflush_r>
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d0d9      	beq.n	8006f02 <__swbuf_r+0x2e>
 8006f4e:	e7d6      	b.n	8006efe <__swbuf_r+0x2a>

08006f50 <__swsetup_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4b29      	ldr	r3, [pc, #164]	@ (8006ff8 <__swsetup_r+0xa8>)
 8006f54:	4605      	mov	r5, r0
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	460c      	mov	r4, r1
 8006f5a:	b118      	cbz	r0, 8006f64 <__swsetup_r+0x14>
 8006f5c:	6a03      	ldr	r3, [r0, #32]
 8006f5e:	b90b      	cbnz	r3, 8006f64 <__swsetup_r+0x14>
 8006f60:	f7fc fcb2 	bl	80038c8 <__sinit>
 8006f64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f68:	0719      	lsls	r1, r3, #28
 8006f6a:	d422      	bmi.n	8006fb2 <__swsetup_r+0x62>
 8006f6c:	06da      	lsls	r2, r3, #27
 8006f6e:	d407      	bmi.n	8006f80 <__swsetup_r+0x30>
 8006f70:	2209      	movs	r2, #9
 8006f72:	602a      	str	r2, [r5, #0]
 8006f74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006f7c:	81a3      	strh	r3, [r4, #12]
 8006f7e:	e033      	b.n	8006fe8 <__swsetup_r+0x98>
 8006f80:	0758      	lsls	r0, r3, #29
 8006f82:	d512      	bpl.n	8006faa <__swsetup_r+0x5a>
 8006f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f86:	b141      	cbz	r1, 8006f9a <__swsetup_r+0x4a>
 8006f88:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f8c:	4299      	cmp	r1, r3
 8006f8e:	d002      	beq.n	8006f96 <__swsetup_r+0x46>
 8006f90:	4628      	mov	r0, r5
 8006f92:	f7fd fc15 	bl	80047c0 <_free_r>
 8006f96:	2300      	movs	r3, #0
 8006f98:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	6063      	str	r3, [r4, #4]
 8006fa6:	6923      	ldr	r3, [r4, #16]
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	89a3      	ldrh	r3, [r4, #12]
 8006fac:	f043 0308 	orr.w	r3, r3, #8
 8006fb0:	81a3      	strh	r3, [r4, #12]
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	b94b      	cbnz	r3, 8006fca <__swsetup_r+0x7a>
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fc0:	d003      	beq.n	8006fca <__swsetup_r+0x7a>
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	f000 f882 	bl	80070ce <__smakebuf_r>
 8006fca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fce:	f013 0201 	ands.w	r2, r3, #1
 8006fd2:	d00a      	beq.n	8006fea <__swsetup_r+0x9a>
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	60a2      	str	r2, [r4, #8]
 8006fd8:	6962      	ldr	r2, [r4, #20]
 8006fda:	4252      	negs	r2, r2
 8006fdc:	61a2      	str	r2, [r4, #24]
 8006fde:	6922      	ldr	r2, [r4, #16]
 8006fe0:	b942      	cbnz	r2, 8006ff4 <__swsetup_r+0xa4>
 8006fe2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fe6:	d1c5      	bne.n	8006f74 <__swsetup_r+0x24>
 8006fe8:	bd38      	pop	{r3, r4, r5, pc}
 8006fea:	0799      	lsls	r1, r3, #30
 8006fec:	bf58      	it	pl
 8006fee:	6962      	ldrpl	r2, [r4, #20]
 8006ff0:	60a2      	str	r2, [r4, #8]
 8006ff2:	e7f4      	b.n	8006fde <__swsetup_r+0x8e>
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	e7f7      	b.n	8006fe8 <__swsetup_r+0x98>
 8006ff8:	20000018 	.word	0x20000018

08006ffc <_raise_r>:
 8006ffc:	291f      	cmp	r1, #31
 8006ffe:	b538      	push	{r3, r4, r5, lr}
 8007000:	4605      	mov	r5, r0
 8007002:	460c      	mov	r4, r1
 8007004:	d904      	bls.n	8007010 <_raise_r+0x14>
 8007006:	2316      	movs	r3, #22
 8007008:	6003      	str	r3, [r0, #0]
 800700a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007012:	b112      	cbz	r2, 800701a <_raise_r+0x1e>
 8007014:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007018:	b94b      	cbnz	r3, 800702e <_raise_r+0x32>
 800701a:	4628      	mov	r0, r5
 800701c:	f000 f830 	bl	8007080 <_getpid_r>
 8007020:	4622      	mov	r2, r4
 8007022:	4601      	mov	r1, r0
 8007024:	4628      	mov	r0, r5
 8007026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800702a:	f000 b817 	b.w	800705c <_kill_r>
 800702e:	2b01      	cmp	r3, #1
 8007030:	d00a      	beq.n	8007048 <_raise_r+0x4c>
 8007032:	1c59      	adds	r1, r3, #1
 8007034:	d103      	bne.n	800703e <_raise_r+0x42>
 8007036:	2316      	movs	r3, #22
 8007038:	6003      	str	r3, [r0, #0]
 800703a:	2001      	movs	r0, #1
 800703c:	e7e7      	b.n	800700e <_raise_r+0x12>
 800703e:	2100      	movs	r1, #0
 8007040:	4620      	mov	r0, r4
 8007042:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007046:	4798      	blx	r3
 8007048:	2000      	movs	r0, #0
 800704a:	e7e0      	b.n	800700e <_raise_r+0x12>

0800704c <raise>:
 800704c:	4b02      	ldr	r3, [pc, #8]	@ (8007058 <raise+0xc>)
 800704e:	4601      	mov	r1, r0
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	f7ff bfd3 	b.w	8006ffc <_raise_r>
 8007056:	bf00      	nop
 8007058:	20000018 	.word	0x20000018

0800705c <_kill_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	2300      	movs	r3, #0
 8007060:	4d06      	ldr	r5, [pc, #24]	@ (800707c <_kill_r+0x20>)
 8007062:	4604      	mov	r4, r0
 8007064:	4608      	mov	r0, r1
 8007066:	4611      	mov	r1, r2
 8007068:	602b      	str	r3, [r5, #0]
 800706a:	f7fa fa5a 	bl	8001522 <_kill>
 800706e:	1c43      	adds	r3, r0, #1
 8007070:	d102      	bne.n	8007078 <_kill_r+0x1c>
 8007072:	682b      	ldr	r3, [r5, #0]
 8007074:	b103      	cbz	r3, 8007078 <_kill_r+0x1c>
 8007076:	6023      	str	r3, [r4, #0]
 8007078:	bd38      	pop	{r3, r4, r5, pc}
 800707a:	bf00      	nop
 800707c:	2000040c 	.word	0x2000040c

08007080 <_getpid_r>:
 8007080:	f7fa ba48 	b.w	8001514 <_getpid>

08007084 <__swhatbuf_r>:
 8007084:	b570      	push	{r4, r5, r6, lr}
 8007086:	460c      	mov	r4, r1
 8007088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800708c:	4615      	mov	r5, r2
 800708e:	2900      	cmp	r1, #0
 8007090:	461e      	mov	r6, r3
 8007092:	b096      	sub	sp, #88	@ 0x58
 8007094:	da0c      	bge.n	80070b0 <__swhatbuf_r+0x2c>
 8007096:	89a3      	ldrh	r3, [r4, #12]
 8007098:	2100      	movs	r1, #0
 800709a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800709e:	bf14      	ite	ne
 80070a0:	2340      	movne	r3, #64	@ 0x40
 80070a2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80070a6:	2000      	movs	r0, #0
 80070a8:	6031      	str	r1, [r6, #0]
 80070aa:	602b      	str	r3, [r5, #0]
 80070ac:	b016      	add	sp, #88	@ 0x58
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	466a      	mov	r2, sp
 80070b2:	f000 f849 	bl	8007148 <_fstat_r>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	dbed      	blt.n	8007096 <__swhatbuf_r+0x12>
 80070ba:	9901      	ldr	r1, [sp, #4]
 80070bc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80070c0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80070c4:	4259      	negs	r1, r3
 80070c6:	4159      	adcs	r1, r3
 80070c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80070cc:	e7eb      	b.n	80070a6 <__swhatbuf_r+0x22>

080070ce <__smakebuf_r>:
 80070ce:	898b      	ldrh	r3, [r1, #12]
 80070d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070d2:	079d      	lsls	r5, r3, #30
 80070d4:	4606      	mov	r6, r0
 80070d6:	460c      	mov	r4, r1
 80070d8:	d507      	bpl.n	80070ea <__smakebuf_r+0x1c>
 80070da:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	6123      	str	r3, [r4, #16]
 80070e2:	2301      	movs	r3, #1
 80070e4:	6163      	str	r3, [r4, #20]
 80070e6:	b003      	add	sp, #12
 80070e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070ea:	466a      	mov	r2, sp
 80070ec:	ab01      	add	r3, sp, #4
 80070ee:	f7ff ffc9 	bl	8007084 <__swhatbuf_r>
 80070f2:	9f00      	ldr	r7, [sp, #0]
 80070f4:	4605      	mov	r5, r0
 80070f6:	4639      	mov	r1, r7
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7fd fbd3 	bl	80048a4 <_malloc_r>
 80070fe:	b948      	cbnz	r0, 8007114 <__smakebuf_r+0x46>
 8007100:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007104:	059a      	lsls	r2, r3, #22
 8007106:	d4ee      	bmi.n	80070e6 <__smakebuf_r+0x18>
 8007108:	f023 0303 	bic.w	r3, r3, #3
 800710c:	f043 0302 	orr.w	r3, r3, #2
 8007110:	81a3      	strh	r3, [r4, #12]
 8007112:	e7e2      	b.n	80070da <__smakebuf_r+0xc>
 8007114:	89a3      	ldrh	r3, [r4, #12]
 8007116:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800711a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800711e:	81a3      	strh	r3, [r4, #12]
 8007120:	9b01      	ldr	r3, [sp, #4]
 8007122:	6020      	str	r0, [r4, #0]
 8007124:	b15b      	cbz	r3, 800713e <__smakebuf_r+0x70>
 8007126:	4630      	mov	r0, r6
 8007128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800712c:	f000 f81e 	bl	800716c <_isatty_r>
 8007130:	b128      	cbz	r0, 800713e <__smakebuf_r+0x70>
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	f023 0303 	bic.w	r3, r3, #3
 8007138:	f043 0301 	orr.w	r3, r3, #1
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	431d      	orrs	r5, r3
 8007142:	81a5      	strh	r5, [r4, #12]
 8007144:	e7cf      	b.n	80070e6 <__smakebuf_r+0x18>
	...

08007148 <_fstat_r>:
 8007148:	b538      	push	{r3, r4, r5, lr}
 800714a:	2300      	movs	r3, #0
 800714c:	4d06      	ldr	r5, [pc, #24]	@ (8007168 <_fstat_r+0x20>)
 800714e:	4604      	mov	r4, r0
 8007150:	4608      	mov	r0, r1
 8007152:	4611      	mov	r1, r2
 8007154:	602b      	str	r3, [r5, #0]
 8007156:	f7fa fa43 	bl	80015e0 <_fstat>
 800715a:	1c43      	adds	r3, r0, #1
 800715c:	d102      	bne.n	8007164 <_fstat_r+0x1c>
 800715e:	682b      	ldr	r3, [r5, #0]
 8007160:	b103      	cbz	r3, 8007164 <_fstat_r+0x1c>
 8007162:	6023      	str	r3, [r4, #0]
 8007164:	bd38      	pop	{r3, r4, r5, pc}
 8007166:	bf00      	nop
 8007168:	2000040c 	.word	0x2000040c

0800716c <_isatty_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	2300      	movs	r3, #0
 8007170:	4d05      	ldr	r5, [pc, #20]	@ (8007188 <_isatty_r+0x1c>)
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	602b      	str	r3, [r5, #0]
 8007178:	f7fa fa41 	bl	80015fe <_isatty>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d102      	bne.n	8007186 <_isatty_r+0x1a>
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	b103      	cbz	r3, 8007186 <_isatty_r+0x1a>
 8007184:	6023      	str	r3, [r4, #0]
 8007186:	bd38      	pop	{r3, r4, r5, pc}
 8007188:	2000040c 	.word	0x2000040c

0800718c <_init>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr

08007198 <_fini>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr
